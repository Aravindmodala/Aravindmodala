{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aravindmodala/Aravindmodala/blob/main/Predicting%20calories\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "842a912a",
      "metadata": {
        "id": "842a912a"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "df = pd.read_csv(\"train.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e291aa5c",
      "metadata": {
        "id": "e291aa5c"
      },
      "outputs": [],
      "source": [
        "df['Calories_log'] = np.log1p(df['Calories'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ee97faab",
      "metadata": {
        "id": "ee97faab"
      },
      "outputs": [],
      "source": [
        "df['Height_m'] = df['Height'] / 100\n",
        "df['BMI'] = df['Weight'] / (df['Height_m'] ** 2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7762ac91",
      "metadata": {
        "id": "7762ac91"
      },
      "outputs": [],
      "source": [
        "df['BMI*Body_Temp'] = df['BMI'] * df['Body_Temp']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "60bfc7f4",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "60bfc7f4",
        "outputId": "d77d3012-23b9-42b2-df73-f9e4ddee3752"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='BMI', ylabel='Calories'>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "sns.scatterplot(x='BMI', y='Calories', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eecad350",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "eecad350",
        "outputId": "3f032805-15a8-4539-a975-058725c1ed3c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    750000.000000\n",
              "mean         24.374817\n",
              "std           1.511310\n",
              "min          12.375937\n",
              "25%          23.255019\n",
              "50%          24.391059\n",
              "75%          25.487697\n",
              "max          46.443986\n",
              "Name: BMI, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BMI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>750000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>24.374817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.511310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>12.375937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>23.255019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>24.391059</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>25.487697</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>46.443986</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "df['BMI'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "78300909",
      "metadata": {
        "id": "78300909"
      },
      "outputs": [],
      "source": [
        "df['Effort'] = df['Heart_Rate'] * df['Duration']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9e311c55",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "9e311c55",
        "outputId": "b1d68534-58ca-4340-b5dd-ed958aa54b44"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Effort', ylabel='Calories'>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "sns.scatterplot(x='Effort', y='Calories', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3b6c0fe6",
      "metadata": {
        "id": "3b6c0fe6"
      },
      "outputs": [],
      "source": [
        "df[\"Age*BMI\"] = df[\"Age\"] * df[\"BMI\"]\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cd503896",
      "metadata": {
        "id": "cd503896"
      },
      "outputs": [],
      "source": [
        "df['body*weight'] = df['Body_Temp'] * df['Weight']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "af5e65d2",
      "metadata": {
        "id": "af5e65d2"
      },
      "outputs": [],
      "source": [
        "df['Weight*Dration'] = df['Weight'] * df['Duration']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f0594da3",
      "metadata": {
        "id": "f0594da3"
      },
      "outputs": [],
      "source": [
        "df['Age_Duration'] = df['Age'] * df['Duration']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "49880413",
      "metadata": {
        "id": "49880413"
      },
      "outputs": [],
      "source": [
        "df[\"Age_Adjusted_Effort\"] = df[\"Effort\"] / df[\"Age\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4a4121df",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "4a4121df",
        "outputId": "ebf5dd5b-fcec-4fab-e4ed-fd515099d92e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id     Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    male   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1  female   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2  female   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    male   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4  female   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...     ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    male   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996  female   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    male   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    male   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999  female   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  Height_m        BMI  BMI*Body_Temp  Effort  \\\n",
              "0          150.0      5.017280      1.89  22.955684     941.183058  2626.0   \n",
              "1           34.0      3.555348      1.63  22.582709     896.533554   680.0   \n",
              "2           29.0      3.401197      1.61  24.690405     982.678137   588.0   \n",
              "3          140.0      4.948760      1.92  24.414062     993.652344  2625.0   \n",
              "4          146.0      4.990433      1.66  22.136740     898.751633  2550.0   \n",
              "...          ...           ...       ...        ...            ...     ...   \n",
              "749995     230.0      5.442418      1.93  26.040968    1065.075572  3420.0   \n",
              "749996      96.0      4.574711      1.65  23.140496     937.190083  1656.0   \n",
              "749997     221.0      5.402677      1.62  25.529645    1044.162475  3277.0   \n",
              "749998     109.0      4.700480      1.82  27.472527    1107.142857  1734.0   \n",
              "749999     103.0      4.644391      1.71  22.229062     902.499915  1843.0   \n",
              "\n",
              "            Age*BMI  body*weight  Weight*Dration  Age_Duration  \\\n",
              "0        826.404636       3362.0          2132.0         936.0   \n",
              "1       1445.293387       2382.0           480.0         512.0   \n",
              "2       1259.210679       2547.2           448.0         357.0   \n",
              "3        488.281250       3663.0          2250.0         500.0   \n",
              "4        841.196110       2476.6          1525.0         950.0   \n",
              "...             ...          ...             ...           ...   \n",
              "749995   729.147091       3967.3          2910.0         840.0   \n",
              "749996  1480.991736       2551.5          1134.0        1152.0   \n",
              "749997  1531.778692       2740.3          1943.0        1740.0   \n",
              "749998  1236.263736       3667.3          1547.0         765.0   \n",
              "749999   866.933415       2639.0          1235.0         741.0   \n",
              "\n",
              "        Age_Adjusted_Effort  \n",
              "0                 72.944444  \n",
              "1                 10.625000  \n",
              "2                 11.529412  \n",
              "3                131.250000  \n",
              "4                 67.105263  \n",
              "...                     ...  \n",
              "749995           122.142857  \n",
              "749996            25.875000  \n",
              "749997            54.616667  \n",
              "749998            38.533333  \n",
              "749999            47.256410  \n",
              "\n",
              "[750000 rows x 19 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ec7fa7d8-68e8-4f49-a4f0-ccce7d3fde20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>Height_m</th>\n",
              "      <th>BMI</th>\n",
              "      <th>BMI*Body_Temp</th>\n",
              "      <th>Effort</th>\n",
              "      <th>Age*BMI</th>\n",
              "      <th>body*weight</th>\n",
              "      <th>Weight*Dration</th>\n",
              "      <th>Age_Duration</th>\n",
              "      <th>Age_Adjusted_Effort</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>male</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>1.89</td>\n",
              "      <td>22.955684</td>\n",
              "      <td>941.183058</td>\n",
              "      <td>2626.0</td>\n",
              "      <td>826.404636</td>\n",
              "      <td>3362.0</td>\n",
              "      <td>2132.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>72.944444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>1.63</td>\n",
              "      <td>22.582709</td>\n",
              "      <td>896.533554</td>\n",
              "      <td>680.0</td>\n",
              "      <td>1445.293387</td>\n",
              "      <td>2382.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>512.0</td>\n",
              "      <td>10.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>female</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>1.61</td>\n",
              "      <td>24.690405</td>\n",
              "      <td>982.678137</td>\n",
              "      <td>588.0</td>\n",
              "      <td>1259.210679</td>\n",
              "      <td>2547.2</td>\n",
              "      <td>448.0</td>\n",
              "      <td>357.0</td>\n",
              "      <td>11.529412</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>1.92</td>\n",
              "      <td>24.414062</td>\n",
              "      <td>993.652344</td>\n",
              "      <td>2625.0</td>\n",
              "      <td>488.281250</td>\n",
              "      <td>3663.0</td>\n",
              "      <td>2250.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>131.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>female</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>1.66</td>\n",
              "      <td>22.136740</td>\n",
              "      <td>898.751633</td>\n",
              "      <td>2550.0</td>\n",
              "      <td>841.196110</td>\n",
              "      <td>2476.6</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>950.0</td>\n",
              "      <td>67.105263</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>male</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>1.93</td>\n",
              "      <td>26.040968</td>\n",
              "      <td>1065.075572</td>\n",
              "      <td>3420.0</td>\n",
              "      <td>729.147091</td>\n",
              "      <td>3967.3</td>\n",
              "      <td>2910.0</td>\n",
              "      <td>840.0</td>\n",
              "      <td>122.142857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>female</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>1.65</td>\n",
              "      <td>23.140496</td>\n",
              "      <td>937.190083</td>\n",
              "      <td>1656.0</td>\n",
              "      <td>1480.991736</td>\n",
              "      <td>2551.5</td>\n",
              "      <td>1134.0</td>\n",
              "      <td>1152.0</td>\n",
              "      <td>25.875000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>male</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>1.62</td>\n",
              "      <td>25.529645</td>\n",
              "      <td>1044.162475</td>\n",
              "      <td>3277.0</td>\n",
              "      <td>1531.778692</td>\n",
              "      <td>2740.3</td>\n",
              "      <td>1943.0</td>\n",
              "      <td>1740.0</td>\n",
              "      <td>54.616667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>male</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>1.82</td>\n",
              "      <td>27.472527</td>\n",
              "      <td>1107.142857</td>\n",
              "      <td>1734.0</td>\n",
              "      <td>1236.263736</td>\n",
              "      <td>3667.3</td>\n",
              "      <td>1547.0</td>\n",
              "      <td>765.0</td>\n",
              "      <td>38.533333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>female</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>1.71</td>\n",
              "      <td>22.229062</td>\n",
              "      <td>902.499915</td>\n",
              "      <td>1843.0</td>\n",
              "      <td>866.933415</td>\n",
              "      <td>2639.0</td>\n",
              "      <td>1235.0</td>\n",
              "      <td>741.0</td>\n",
              "      <td>47.256410</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 19 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ec7fa7d8-68e8-4f49-a4f0-ccce7d3fde20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ec7fa7d8-68e8-4f49-a4f0-ccce7d3fde20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ec7fa7d8-68e8-4f49-a4f0-ccce7d3fde20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4e69dc79-66b9-45a8-a55d-1dedb7f40110\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e69dc79-66b9-45a8-a55d-1dedb7f40110')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4e69dc79-66b9-45a8-a55d-1dedb7f40110 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_11723133-9557-4f7a-b9d9-263587daf0a2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_11723133-9557-4f7a-b9d9-263587daf0a2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2e1e4ea2",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2e1e4ea2",
        "outputId": "91bd5e7a-4efc-4c02-9be6-bb91950f21d0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Feature         VIF\n",
            "0                const  698.447440\n",
            "1               Effort  163.542849\n",
            "2  Age_Adjusted_Effort    2.817076\n",
            "3               Weight    1.005913\n",
            "4           Heart_Rate    8.113594\n",
            "5             Duration  124.664133\n"
          ]
        }
      ],
      "source": [
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from statsmodels.tools.tools import add_constant\n",
        "import pandas as pd\n",
        "\n",
        "# Select features to check\n",
        "X = df[[\n",
        "    \"Effort\",\n",
        "    \"Age_Adjusted_Effort\",\n",
        "    \"Weight\",\n",
        "    \"Heart_Rate\",\n",
        "    \"Duration\"\n",
        "    # Add any other features you're interested in\n",
        "]]\n",
        "\n",
        "# Add constant column (intercept) required for VIF\n",
        "X = add_constant(X)\n",
        "\n",
        "# Calculate VIF for each feature\n",
        "vif = pd.DataFrame()\n",
        "vif[\"Feature\"] = X.columns\n",
        "vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n",
        "\n",
        "print(vif)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f757d834",
      "metadata": {
        "id": "f757d834"
      },
      "outputs": [],
      "source": [
        "df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2750bc17",
      "metadata": {
        "id": "2750bc17"
      },
      "outputs": [],
      "source": [
        "df['sex*heart'] = df['Sex'] * df['Heart_Rate']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "66247ab7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "66247ab7",
        "outputId": "c6d711a7-8a96-4b3c-df19-bd6e63efa6de"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  Height_m        BMI  BMI*Body_Temp  Effort  \\\n",
              "0          150.0      5.017280      1.89  22.955684     941.183058  2626.0   \n",
              "1           34.0      3.555348      1.63  22.582709     896.533554   680.0   \n",
              "2           29.0      3.401197      1.61  24.690405     982.678137   588.0   \n",
              "3          140.0      4.948760      1.92  24.414062     993.652344  2625.0   \n",
              "4          146.0      4.990433      1.66  22.136740     898.751633  2550.0   \n",
              "...          ...           ...       ...        ...            ...     ...   \n",
              "749995     230.0      5.442418      1.93  26.040968    1065.075572  3420.0   \n",
              "749996      96.0      4.574711      1.65  23.140496     937.190083  1656.0   \n",
              "749997     221.0      5.402677      1.62  25.529645    1044.162475  3277.0   \n",
              "749998     109.0      4.700480      1.82  27.472527    1107.142857  1734.0   \n",
              "749999     103.0      4.644391      1.71  22.229062     902.499915  1843.0   \n",
              "\n",
              "            Age*BMI  body*weight  Weight*Dration  Age_Duration  \\\n",
              "0        826.404636       3362.0          2132.0         936.0   \n",
              "1       1445.293387       2382.0           480.0         512.0   \n",
              "2       1259.210679       2547.2           448.0         357.0   \n",
              "3        488.281250       3663.0          2250.0         500.0   \n",
              "4        841.196110       2476.6          1525.0         950.0   \n",
              "...             ...          ...             ...           ...   \n",
              "749995   729.147091       3967.3          2910.0         840.0   \n",
              "749996  1480.991736       2551.5          1134.0        1152.0   \n",
              "749997  1531.778692       2740.3          1943.0        1740.0   \n",
              "749998  1236.263736       3667.3          1547.0         765.0   \n",
              "749999   866.933415       2639.0          1235.0         741.0   \n",
              "\n",
              "        Age_Adjusted_Effort  sex*heart  \n",
              "0                 72.944444        0.0  \n",
              "1                 10.625000       85.0  \n",
              "2                 11.529412       84.0  \n",
              "3                131.250000        0.0  \n",
              "4                 67.105263      102.0  \n",
              "...                     ...        ...  \n",
              "749995           122.142857        0.0  \n",
              "749996            25.875000       92.0  \n",
              "749997            54.616667        0.0  \n",
              "749998            38.533333        0.0  \n",
              "749999            47.256410       97.0  \n",
              "\n",
              "[750000 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-79275dc2-e345-4932-8d34-66bdf21e093f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>Height_m</th>\n",
              "      <th>BMI</th>\n",
              "      <th>BMI*Body_Temp</th>\n",
              "      <th>Effort</th>\n",
              "      <th>Age*BMI</th>\n",
              "      <th>body*weight</th>\n",
              "      <th>Weight*Dration</th>\n",
              "      <th>Age_Duration</th>\n",
              "      <th>Age_Adjusted_Effort</th>\n",
              "      <th>sex*heart</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>1.89</td>\n",
              "      <td>22.955684</td>\n",
              "      <td>941.183058</td>\n",
              "      <td>2626.0</td>\n",
              "      <td>826.404636</td>\n",
              "      <td>3362.0</td>\n",
              "      <td>2132.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>72.944444</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>1.63</td>\n",
              "      <td>22.582709</td>\n",
              "      <td>896.533554</td>\n",
              "      <td>680.0</td>\n",
              "      <td>1445.293387</td>\n",
              "      <td>2382.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>512.0</td>\n",
              "      <td>10.625000</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>1.61</td>\n",
              "      <td>24.690405</td>\n",
              "      <td>982.678137</td>\n",
              "      <td>588.0</td>\n",
              "      <td>1259.210679</td>\n",
              "      <td>2547.2</td>\n",
              "      <td>448.0</td>\n",
              "      <td>357.0</td>\n",
              "      <td>11.529412</td>\n",
              "      <td>84.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>1.92</td>\n",
              "      <td>24.414062</td>\n",
              "      <td>993.652344</td>\n",
              "      <td>2625.0</td>\n",
              "      <td>488.281250</td>\n",
              "      <td>3663.0</td>\n",
              "      <td>2250.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>131.250000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>1.66</td>\n",
              "      <td>22.136740</td>\n",
              "      <td>898.751633</td>\n",
              "      <td>2550.0</td>\n",
              "      <td>841.196110</td>\n",
              "      <td>2476.6</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>950.0</td>\n",
              "      <td>67.105263</td>\n",
              "      <td>102.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>1.93</td>\n",
              "      <td>26.040968</td>\n",
              "      <td>1065.075572</td>\n",
              "      <td>3420.0</td>\n",
              "      <td>729.147091</td>\n",
              "      <td>3967.3</td>\n",
              "      <td>2910.0</td>\n",
              "      <td>840.0</td>\n",
              "      <td>122.142857</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>1.65</td>\n",
              "      <td>23.140496</td>\n",
              "      <td>937.190083</td>\n",
              "      <td>1656.0</td>\n",
              "      <td>1480.991736</td>\n",
              "      <td>2551.5</td>\n",
              "      <td>1134.0</td>\n",
              "      <td>1152.0</td>\n",
              "      <td>25.875000</td>\n",
              "      <td>92.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>1.62</td>\n",
              "      <td>25.529645</td>\n",
              "      <td>1044.162475</td>\n",
              "      <td>3277.0</td>\n",
              "      <td>1531.778692</td>\n",
              "      <td>2740.3</td>\n",
              "      <td>1943.0</td>\n",
              "      <td>1740.0</td>\n",
              "      <td>54.616667</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>1.82</td>\n",
              "      <td>27.472527</td>\n",
              "      <td>1107.142857</td>\n",
              "      <td>1734.0</td>\n",
              "      <td>1236.263736</td>\n",
              "      <td>3667.3</td>\n",
              "      <td>1547.0</td>\n",
              "      <td>765.0</td>\n",
              "      <td>38.533333</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>1.71</td>\n",
              "      <td>22.229062</td>\n",
              "      <td>902.499915</td>\n",
              "      <td>1843.0</td>\n",
              "      <td>866.933415</td>\n",
              "      <td>2639.0</td>\n",
              "      <td>1235.0</td>\n",
              "      <td>741.0</td>\n",
              "      <td>47.256410</td>\n",
              "      <td>97.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-79275dc2-e345-4932-8d34-66bdf21e093f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-79275dc2-e345-4932-8d34-66bdf21e093f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-79275dc2-e345-4932-8d34-66bdf21e093f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-826031b0-e117-420e-82f2-6f025186dced\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-826031b0-e117-420e-82f2-6f025186dced')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-826031b0-e117-420e-82f2-6f025186dced button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_484d8c01-97b4-4d79-9d47-5ce0a7574647\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_484d8c01-97b4-4d79-9d47-5ce0a7574647 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f6bb1167",
      "metadata": {
        "id": "f6bb1167"
      },
      "outputs": [],
      "source": [
        "df['bodytmepduration'] = df['Body_Temp'] * df['Duration']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7900bdf9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "7900bdf9",
        "outputId": "88e8aced-4062-4891-d2d3-9bc4bedfe3aa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='bodytmepduration', ylabel='Calories'>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x='bodytmepduration', y='Calories', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "440edab4",
      "metadata": {
        "id": "440edab4"
      },
      "outputs": [],
      "source": [
        "max_hr = 220 - df['Age']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3d3242ef",
      "metadata": {
        "id": "3d3242ef"
      },
      "outputs": [],
      "source": [
        "df[\"hr_percent\"] = (df[\"Heart_Rate\"] / max_hr) * 100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68b74f37",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "68b74f37",
        "outputId": "6b593d3b-8301-4af4-b8fe-b8f8c0ccc072"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         54.891304\n",
              "1         54.487179\n",
              "2         49.704142\n",
              "3         52.500000\n",
              "4         56.043956\n",
              "            ...    \n",
              "749995    59.375000\n",
              "749996    58.974359\n",
              "749997    70.625000\n",
              "749998    58.285714\n",
              "749999    53.591160\n",
              "Name: hr_percent, Length: 750000, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hr_percent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54.891304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>54.487179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>49.704142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>52.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>56.043956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>59.375000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>58.974359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>70.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>58.285714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>53.591160</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "df[\"hr_percent\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "60f64c41",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "60f64c41",
        "outputId": "51fcb5a1-a61d-43f2-92db-8bd3c0a95f6a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='hr_percent', ylabel='Count'>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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ml577TW5XC517NhRF198sS6++GLFx8fL5XLp1Vdfre0aAb9RH8t4nLm0t0HFRcVnbwwAqDc1GtPUrl07ffnll1qzZo327NkjSerSpYsSExNrtTjA39TXnEBc2gMA/3NOPU1r165V165d5XK5ZLPZ9POf/1yPPvqoHn30UV155ZXq1q2bPvvss7qqFfALzAkEAIHpnELT7Nmz9dBDDykiouIfjcjISP32t7/VrFmzaq04AAAAf3FOoWn79u0aNGhQlfsHDBigjIyM8y4KAADA35xTaDp8+HClUw24BQcHKycn57yLAgAA8DfnFJouuOAC7dy5s8r9O3bsUNu2bc+7qLL+85//6N5771WrVq0UFham7t27a9u2bdZ+Y4wmTZqktm3bKiwsTImJidq/f7/HMXJzc5WUlKSIiAhFRUVpxIgROnHiRIXa+/fvr9DQULVr107Tp0+v1dcBAAAatnMKTTfffLMmTpyo06dPV9h36tQpPfvss7rllltqrbijR4/q6quvVkhIiP75z3/qm2++0cyZM9WiRQurzfTp0zVnzhzNmzdPmzdvVnh4uAYOHOhRY1JSknbt2qXU1FStWLFCGzZs0MiRI639LpdLAwYMUIcOHZSRkaEZM2Zo8uTJmj9/fq29FjRu7qkI3Iv7AgAan3OacmDChAl6//33demllyolJUWdOnWSJO3Zs0dz585VSUmJnnnmmVor7o9//KPatWunBQsWWNvi4+Ot/zbGaPbs2ZowYYJuvfVWSdJf/vIXxcTEaPny5Ro2bJh2796tVatWaevWrerTp48k6dVXX9XNN9+sl156SXFxcVq8eLEKCwv11ltvyW63q1u3bsrMzNSsWbM8whVQFffCvgX5LoW1rN3eVgCAfzinnqaYmBht2rRJl112mcaPH6/bbrtNt912m37/+9/rsssu0+eff66YmJhaK+7DDz9Unz59dMcdd6hNmzbq1auX3nzzTWv/gQMHlJWV5TE/VGRkpPr27av09HRJUnp6uqKioqzAJEmJiYkKCgrS5s2brTbXXnut7Ha71WbgwIHau3evjh49WmltBQUFcrlcHg8EBmOMnE5nhUku7c0iZQ9nOoLaVNW5BgBfOOcZwTt06KCPP/5YTqdTmzdv1hdffCGn06mPP/7YoxeoNnz33Xd644039JOf/ESffPKJfve732nUqFFatGiRJCkr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mRUrVpgDBw6Y9957zzRr1sy88sorVhved1W78847TdeuXc369evN/v37zbPPPmsiIiLM//3f/xlj/PPcEZpQZ44fP25+8pOfmNTUVHPddddZoSkvL8+EhISY9957z2q7e/duI8mkp6f7qFr/8Oyzz5qePXtWuo/zVrWnnnrKXHPNNVXuLy0tNbGxsWbGjBnWtry8PONwOMw777xTHyU2GKNHjzYXX3yxKS0t5T13FoMHDzYPPPCAx7bbb7/dJCUlGWN431Xn5MmTpkmTJmbFihUe26+44grzzDPP+O254/Ic6kxycrIGDx6sxMREj+0ZGRkqKiry2N65c2e1b99e6enp9V2m39m/f7/i4uJ00UUXKSkpSQcPHpTEeavOhx9+qD59+uiOO+5QmzZt1KtXL7355pvW/gMHDigrK8vj3EVGRqpv374Bf+7KKiws1F//+lc98MADstlsvOfOol+/fkpLS9O+ffskSdu3b9fnn3+um266SRLvu+oUFxerpKREoaGhHtvDwsL0+eef++25Y3JL1Il3331XX375pcf1abesrCzZ7fYKa/XFxMQoKyurnir0T3379tXChQvVqVMn/fjjj3ruuefUv39/7dy5k/NWje+++05vvPGGxo0bp9///vfaunWrRo0aJbvdruHDh1vnp/zs/pw7T8uXL1deXp5+/etfS+Lf6tk8/fTTcrlc6ty5s5o0aaKSkhK98MILSkpKkiTed9Vo3ry5EhISNHXqVHXp0kUxMTF65513lJ6erksuucRvzx2hCbXu0KFDGj16tFJTUyt8i0D13N9QJalHjx7q27evOnTooGXLliksLMyHlfm30tJS9enTR3/4wx8kSb169dLOnTs1b948DR8+3MfVNRx//vOfddNNN3m12jukZcuWafHixVqyZIm6deumzMxMjRkzRnFxcbzvvPD222/rgQce0AUXXKAmTZroiiuu0N13362MjAxfl1YlLs+h1mVkZCg7O1tXXHGFgoODFRwcrPXr12vOnDkKDg5WTEyMCgsLlZeX5/F7hw8fVmxsrG+K9lNRUVG69NJL9e233yo2NpbzVoW2bduqa9euHtu6dOliXdp0n5/yd31x7v7n+++/15o1a/Tggw9a23jPVe+JJ57Q008/rWHDhql79+667777NHbsWE2bNk0S77uzufjii7V+/XqdOHFChw4d0pYtW1RUVKSLLrrIb88doQm17sYbb9TXX3+tzMxM69GnTx8lJSVZ/x0SEqK0tDTrd/bu3auDBw8qISHBh5X7nxMnTuhf//qX2rZtq969e3PeqnD11Vdr7969Htv27dunDh06SJLi4+MVGxvrce5cLpc2b94c8OfObcGCBWrTpo0GDx5sbeM9V72TJ08qKMjzz2iTJk1UWloqifedt8LDw9W2bVsdPXpUn3zyiW699Vb/PXc+G4KOgFL27jljztzG3L59e7N27Vqzbds2k5CQYBISEnxXoJ947LHHzLp168yBAwfMxo0bTWJioomOjjbZ2dnGGM5bVbZs2WKCg4PNCy+8YPbv328WL15smjZtav76179abV588UUTFRVl/vGPf5gdO3aYW2+91ee3L/uLkpIS0759e/PUU09V2Md7rmrDhw83F1xwgTXlwPvvv2+io6PNk08+abXhfVe1VatWmX/+85/mu+++M6tXrzY9e/Y0ffv2NYWFhcYY/zx3hCbUi/Kh6dSpU+aRRx4xLVq0ME2bNjW33Xab+fHHH31XoJ+46667TNu2bY3dbjcXXHCBueuuuzzmGuK8Ve2jjz4yl112mXE4HKZz585m/vz5HvtLS0vNxIkTTUxMjHE4HObGG280e/fu9VG1/uWTTz4xkio9H7znquZyuczo0aNN+/btTWhoqLnooovMM888YwoKCqw2vO+qtnTpUnPRRRcZu91uYmNjTXJyssnLy7P2++O5sxlTZupSAAAAVIoxTQAAAF4gNAEAAHiB0AQAAOAFQhMAAIAXCE0AAABeIDQBAAB4gdAEAADgBUITAACAFwhNAPzS9ddfrzFjxvi6DACwEJoAoAGYPHmyLr/8cl+XAQQ0QhOARqGoqMgnz1tYWOiT5wVQ/whNAPxWaWmpnnzySbVs2VKxsbGaPHmytc9ms+mNN97QL3/5S4WHh+uFF16o9ljr1q2TzWbTypUr1aNHD4WGhuqqq67Szp07Pdp9/vnn6t+/v8LCwtSuXTuNGjVK+fn51v6OHTtq6tSpuv/++xUREaGRI0dKkjZu3Kjrr79eTZs2VYsWLTRw4EAdPXrUeh3Tpk1TfHy8wsLC1LNnT/3tb3+rUFtaWpr69Omjpk2bql+/ftq7d68kaeHChXruuee0fft22Ww22Ww2LVy48HxOLYCa8OlywQBQheuuu85ERESYyZMnm3379plFixYZm81mVq9ebYwxRpJp06aNeeutt8y//vUv8/3331d7vE8//dRIMl26dDGrV682O3bsMLfccovp2LGjKSwsNMYY8+2335rw8HDz8ssvm3379pmNGzeaXr16mV//+tfWcTp06GAiIiLMSy+9ZL799lvz7bffmq+++so4HA7zu9/9zmRmZpqdO3eaV1991eTk5BhjjHn++edN586dzapVq8y//vUvs2DBAuNwOMy6des8auvbt69Zt26d2bVrl+nfv7/p16+fMcaYkydPmscee8x069bN/Pjjj+bHH380J0+erPVzDqB6hCYAfum6664z11xzjce2K6+80jz11FPGmDOhacyYMV4fzx1M3n33XWvbkSNHTFhYmFm6dKkxxpgRI0aYkSNHevzeZ599ZoKCgsypU6eMMWdC05AhQzza3H333ebqq6+u9HlPnz5tmjZtajZt2uSxfcSIEebuu+/2qG3NmjXW/pUrVxpJ1vM+++yzpmfPnl6/XgC1L9iHnVwAUK0ePXp4/Ny2bVtlZ2dbP/fp0+ecj5mQkGD9d8uWLdWpUyft3r1bkrR9+3bt2LFDixcvttoYY1RaWqoDBw6oS5culT5vZmam7rjjjkqf79tvv9XJkyf185//3GN7YWGhevXq5bGt7Ott27atJCk7O1vt27c/15cJoA4QmgD4rZCQEI+fbTabSktLrZ/Dw8Nr9flOnDih3/72txo1alSFfWWDS/nnDQsLq/aYkrRy5UpdcMEFHvscDofHz2Vfr81mkySP1wvAtwhNAALKF198YQWgo0ePat++fVYP0hVXXKFvvvlGl1xyyTkds0ePHkpLS9Nzzz1XYV/Xrl3lcDh08OBBXXfddTWu2263q6SkpMa/D+D8EZoABJQpU6aoVatWiomJ0TPPPKPo6GgNGTJEkvTUU0/pqquuUkpKih588EGFh4frm2++UWpqql577bUqjzl+/Hh1795djzzyiB5++GHZ7XZ9+umnuuOOOxQdHa3HH39cY8eOVWlpqa655hodO3ZMGzduVEREhIYPH+5V3R07dtSBAweUmZmpCy+8UM2bN6/QUwWgbjHlAICA8uKLL2r06NHq3bu3srKy9NFHH8lut0s602O0fv167du3T/3791evXr00adIkxcXFVXvMSy+9VKtXr9b27dv105/+VAkJCfrHP/6h4OAz30unTp2qiRMnatq0aerSpYsGDRqklStXKj4+3uu6hw4dqkGDBumGG25Q69at9c4779T8JACoEZsxxvi6CACoa+vWrdMNN9ygo0ePKioqytflAGiA6GkCAADwAqEJQKPw8MMPq1mzZpU+Hn74YV+XB6AR4PIcgEYhOztbLper0n0RERFq06ZNPVcEoLEhNAEAAHiBy3MAAABeIDQBAAB4gdAEAADgBUITAACAFwhNAAAAXiA0AQAAeIHQBAAA4AVCEwAAgBf+P1s5GNFpD2AEAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.histplot(x='hr_percent', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aaf71b3c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "aaf71b3c",
        "outputId": "89f91386-c34c-4142-c16e-d5253df794ee"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='hr_percent'>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAggAAAGxCAYAAAAH0U5DAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAHURJREFUeJzt3XuQleV9wPHf2V12WS67KyALyF2jIBULIUFQJBmNjWNGbTKYOiTRMQ6iZIQkNiYlCkapzrRpp20Sop0mtpFqtM1ojE0AqWCleG2AqikXoaLlZgLLQri65+kfDicsD6BukLOrn8/Mjuz7nstvH184333P2bOFlFIKAIBDVJR7AACg/REIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZKraesVisRgbN26M7t27R6FQOJ4zAQDvkZRS7Ny5M/r16xcVFUc/T9DmQNi4cWMMGDCgrVcHAMrotddei/79+x91f5sDoXv37qU7qKura+vNAAAnUHNzcwwYMKD0OH40bQ6Eg08r1NXVCQQA6GDe7uUBXqQIAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkqso9AB88W7ZsiR07dpR7jA6jvr4+Ghsbyz0G8AEjEDihtmzZEp/7/BfiwP595R6lw+hUXRP3/eifRAJwQgkETqgdO3bEgf37Ys/QiVHsXF/ucaJiT1PUrn8y9gw5P4q1DeUeJ1Oxd0fEuiWxY8cOgQCcUAKBsih2ro9i117lHqOkWNvQruYBKDcvUgQAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDIdLhA2Lt3b6xevTr27t1b7lEAjsm/V3RkHS4QNmzYEFOmTIkNGzaUexSAY/LvFR1ZhwsEAOC9JxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDIVJV7gEPt2bMn7r777vjf//3fWLduXezatSuKxWJUVFREsVhsddldu3aVaUqAt9fS0hJTpkyJiCj9l99fZWVlRERUVFSUPgqFQtTW1kb//v2jsrIyVqxYES0tLRER0aVLl+jevXs0NjbG3r17o1evXjFhwoTo3bt3FIvFWL58ebz++uvxy1/+Mg4cOBC9e/eOa6+9Nvbu3RtNTU3R0NAQDQ0NsW7duti0aVNERJxxxhmxa9euaGhoiB49ekRERFNTU/To0SNGjhwZLS0t8cgjj8TGjRujX79+cdlll0V1dXXs37//iNsP19LSEitXroxt27aVbvPg130iFVJKqS1XbG5ujvr6+tixY0fU1dX93oPMnDkzli5d+q6u06NHj/jJT37ye983J87q1atjypQp8dszL41i117lHicqfvvr6PryT9vNPIc7ON8999wTp59+ernH4R168skn49Zbby33GJRBly5dYu/eva2+qa2srIwPfehDsWbNmlK4HNw+adKkmDp1amnbk08+Gd/73vdi8+bNpW19+vSJG264Ic4///zjMuM7ffxuF08xtCUOIiK2bdsWn/70p9+DiQDaRhx0TJ06dcq2VVUd+ST74dsHDhwYhUIhRo4cGbt3745isRiXXnpp/Ou//mvcdNNNUVVVFf/zP/8TVVVVcdNNN5W219XVxQMPPBDf//73I+KtY2fWrFkxdOjQ+O53vxv/9m//Ft/97ndj6NChMWvWrHjyySeP/xd+DGUPhD179sTSpUuP+j/i7Wzbti22bdt2nKcCePdaWlrEQQd08sknR48ePaK+vj4iIgqFQkREvPnmm9GtW7eoqamJTp06RU1NTdTU1MTDDz8cFRVvPXyOHTs29u/fHx/96Edj5cqV0dDQEOecc04899xz0dDQEBdddFEcOHAgCoVCHDhwIC666KLo2bNnfOpTn4qHHnooTjrppHjooYdiz5498b3vfS/GjRsXd9xxR4wYMSK6dOkSI0aMiDvuuCPGjRsXc+fObXUG4r32jh+V9+3bF/v27St93tzcfFwGuPvuuyMioqGhIX7961+Xtnfq1CkOHDhQ+vzkk0+ON954o/R5ZWVlaaG+9KUvxezZs4/LPLy3Xn311XKP0CFZt45h1apV5R6Bw/Tu3Tu2bt0aEW898B/+rHq3bt1Kjy1XXHFFPPjgg60uU1FR0eqxLyLi5z//eekphP79+8czzzxTegrwoosuiokTJ8a0adNi5cqVsXbt2igWi/GJT3wiFi5cGI888khMmjQpIt46E3HNNdfEt7/97bj77rtj8+bNccstt5Ti49AZJk+eXLrNUaNGHccVOrp3HAh33nln3Hbbbcd9gNdffz0iInsR4uF69OjRKhAOraiNGzd6ERDva3PmzCn3CNAhnXbaaaVAONJL7hobG0sveu/Xr1+2//A4iHjrMefw/Tt37izdxpAhQyLirTPcBy97xRVXxMKFC1tdNyJi3LhxEfG7x8KD1z3cobd5orzjQPjGN74RX/nKV0qfNzc3x4ABA37vAfr37x/PP/98VkyHO3xRDj2D0K9fP2cQOohXX33Vg10bzJw5MwYNGlTuMXgbq1atim9/+9vlHoNDrF27tvTnI51B2LJlS+nPhz94R0TU1NRkkXBoSNTU1ERERPfu3Uu3sX79+oh46xvbg5d98MEHs+tGRCxbtiwifvdYuH79+hgxYkQ2x6G3eaK840A4+NzL8XbdddfFww8/HE1NTa22H/r0QkS0OnsQ0foMwne+850Tumhwog0aNMhPMXQAp556qkBoZw6ePYg48hmEXbt2xcknnxwVFRUxf/78iGgdEsViMWpqako/ch8RcfHFF8fcuXOjWCzG66+/Hn369ClFxIIFC2LDhg3Rt2/fGDlyZIwYMSLmzp0bjz/+eFRUVMRll11Wuu8333wzfvCDH0RlZWVcd9118fTTT8e8efPijjvuaPVNc7FYjHnz5pVu80Qp+4sUa2tr49xzz40333yzTdfv0aOHOADahcrKyvjWt75V7jF4l9544434zW9+Ezt27IiI34VEZWVl7Nq1K/bt2xcHDhwovRbv8ssvLz0t/swzz0R1dXU8++yzMXLkyGhqaoqnn346xowZE9u3b4/58+dHp06dIqUUnTp1ivnz58evf/3rePTRR2PSpEmxffv2mDRpUtTW1sYNN9wQy5Yti29+85vx0ksvxe7du+Oll16Kb37zm7Fs2bK4/vrrT+j7IXgfBE4o74Pw7ngfhI7Jjzp+cL0X74PQt2/fuP7660/4+yC0m3dSnDNnzrt6J8W/+qu/itGjR5dpWoCjO//882PRokVxwQUXlHuU9533+zspnn/++XHuuee2i3dSbDeBEPHW0w0zZsw45mUOfgfarVu3EzMUQBtUVlbGPffcE1OmTHEGqB37yEc+clwvF/G7MwOHq66uPuL2I13/RP0o47GU/TUIAED7IxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDICAQAICMQAICMQAAAMgIBAMgIBAAgIxAAgIxAAAAyAgEAyAgEACAjEACAjEAAADICAQDIdLhAGDhwYNxzzz0xcODAco8CcEz+vaIjqyr3AO9W586d4/TTTy/3GABvy79XdGQd7gwCAPDeEwgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAAGYEAAGQEAgCQEQgAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkBEIAEBGIAAA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l0bXrl1jzpw5x7ytxYsXR6FQiMceeyxGjhwZnTt3jnPOOSdefPHFVpd76qmnYsKECVFbWxsDBgyIG2+8MX7729+W9g8ePDhuv/32+MIXvhB1dXUxZcqUiIhYunRpfOxjH4suXbrESSedFH/0R38U27dvL30dd955ZwwZMiRqa2vj7LPPjn/5l3/JZlu0aFGMGTMmunTpEuPHjy/9Cut77703brvttlixYkUUCoUoFApx7733/j5LC7xbZf1VUUDJxIkTU11dXZo9e3ZavXp1+sd//MdUKBTSggULUkopRUTq3bt3+sEPfpBeeeWV9Oqrrx7z9p544okUEWn48OFpwYIFaeXKlelTn/pUGjx4cOlXzK5duzZ17do1/fVf/3VavXp1Wrp0aRo1alS6+uqrS7czaNCgVFdXl/7yL/8yrV27Nq1duzb98pe/TDU1Nen6669Py5cvTy+++GL6u7/7u/TGG2+klFK644470rBhw9IvfvGL9Morr6Qf/vCHqaamJi1evLjVbGPHjk2LFy9OL730UpowYUIaP358Siml3bt3p69+9atpxIgRadOmTWnTpk1p9+7dx33NgaMTCNBOTJw4MZ133nmttn3kIx9JN998c0rprUCYMWPGO769gw/CDzzwQGnbb37zm1RbW5t+/OMfp5RS+uIXv5imTJnS6nr/8R//kSoqKkq/h37QoEHp8ssvb3WZK6+8Mp177rlHvN+9e/emLl26pP/8z/9stf2LX/xiuvLKK1vN9vjjj5f2P/bYYykiSvc7a9asdPbZZ7/jrxc4vqrKePICOMzIkSNbfd63b9/YunVr6fMxY8a869scN25c6c89evSIM844I371q19FRMSKFSti5cqVMW/evNJlUkpRLBZj/fr1MXz48CPe7/Lly2PSpElHvL+1a9fG7t274xOf+ESr7fv3749Ro0a12nbo19u3b9+IiNi6dWsMHDjw3X6ZwHEmEKAd6dSpU6vPC4VCFIvF0uddu3Y9rve3a9euuO666+LGG2/M9h36IH34/dbW1h7zNiMiHnvssTjllFNa7aupqWn1+aFfb6FQiIho9fUC5SMQ4H3u6aefLj3Yb9++PVavXl06MzB69Oh4+eWX47TTTntXtzly5MhYtGhR3Hbbbdm+M888M2pqamLDhg0xceLENs9dXV0dLS0tbb4+8PsRCPA+961vfSt69uwZjY2NMXPmzOjVq1dcfvnlERFx8803xznnnBNf+tKX4tprr42uXbvGyy+/HAsXLozvfOc7R73Nb3zjG3HWWWfFDTfcEFOnTo3q6up44oknYtKkSdGrV6+46aab4stf/nIUi8U477zzYseOHbF06dKoq6uLq6666h3NPXjw4Fi/fn0sX748+vfvH927d8/OQADvHT/mCO9zd911V0yfPj0+/OEPx+bNm+PRRx+N6urqiHjrTMCSJUti9erVMWHChBg1alTceuut0a9fv2Pe5umnnx4LFiyIFStWxEc/+tEYN25cPPLII1FV9db3HLfffnvccsstceedd8bw4cPjk5/8ZDz22GMxZMiQdzz3Zz7zmfjkJz8ZH//4x+Pkk0+O+++/v+2LALxrhZRSKvcQwPG3ePHi+PjHPx7bt2+PhoaGco8DdDDOIAAAGYEAHdTUqVOjW7duR/yYOnVquccDOjhPMUAHtXXr1mhubj7ivrq6uujdu/cJngh4PxEIAEDGUwwAQEYgAAAZgQAAZAQCAJARCABARiAAABmBAABkBAIAkPl/cIxs7NMTEgEAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.boxplot(x='hr_percent', data=df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "10d26c93",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "10d26c93",
        "outputId": "513b6e71-88f0-4654-8c56-086d6948d26c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  BMI*Body_Temp  Effort      Age*BMI  \\\n",
              "0          150.0      5.017280  ...     941.183058  2626.0   826.404636   \n",
              "1           34.0      3.555348  ...     896.533554   680.0  1445.293387   \n",
              "2           29.0      3.401197  ...     982.678137   588.0  1259.210679   \n",
              "3          140.0      4.948760  ...     993.652344  2625.0   488.281250   \n",
              "4          146.0      4.990433  ...     898.751633  2550.0   841.196110   \n",
              "...          ...           ...  ...            ...     ...          ...   \n",
              "749995     230.0      5.442418  ...    1065.075572  3420.0   729.147091   \n",
              "749996      96.0      4.574711  ...     937.190083  1656.0  1480.991736   \n",
              "749997     221.0      5.402677  ...    1044.162475  3277.0  1531.778692   \n",
              "749998     109.0      4.700480  ...    1107.142857  1734.0  1236.263736   \n",
              "749999     103.0      4.644391  ...     902.499915  1843.0   866.933415   \n",
              "\n",
              "        body*weight  Weight*Dration  Age_Duration  Age_Adjusted_Effort  \\\n",
              "0            3362.0          2132.0         936.0            72.944444   \n",
              "1            2382.0           480.0         512.0            10.625000   \n",
              "2            2547.2           448.0         357.0            11.529412   \n",
              "3            3663.0          2250.0         500.0           131.250000   \n",
              "4            2476.6          1525.0         950.0            67.105263   \n",
              "...             ...             ...           ...                  ...   \n",
              "749995       3967.3          2910.0         840.0           122.142857   \n",
              "749996       2551.5          1134.0        1152.0            25.875000   \n",
              "749997       2740.3          1943.0        1740.0            54.616667   \n",
              "749998       3667.3          1547.0         765.0            38.533333   \n",
              "749999       2639.0          1235.0         741.0            47.256410   \n",
              "\n",
              "        sex*heart  bodytmepduration  hr_percent  \n",
              "0             0.0            1066.0   54.891304  \n",
              "1            85.0             317.6   54.487179  \n",
              "2            84.0             278.6   49.704142  \n",
              "3             0.0            1017.5   52.500000  \n",
              "4           102.0            1015.0   56.043956  \n",
              "...           ...               ...         ...  \n",
              "749995        0.0            1227.0   59.375000  \n",
              "749996       92.0             729.0   58.974359  \n",
              "749997        0.0            1186.1   70.625000  \n",
              "749998        0.0             685.1   58.285714  \n",
              "749999       97.0             771.4   53.591160  \n",
              "\n",
              "[750000 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35540dbf-12f4-4b1d-8c85-dcf92a7abdb9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>BMI*Body_Temp</th>\n",
              "      <th>Effort</th>\n",
              "      <th>Age*BMI</th>\n",
              "      <th>body*weight</th>\n",
              "      <th>Weight*Dration</th>\n",
              "      <th>Age_Duration</th>\n",
              "      <th>Age_Adjusted_Effort</th>\n",
              "      <th>sex*heart</th>\n",
              "      <th>bodytmepduration</th>\n",
              "      <th>hr_percent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>941.183058</td>\n",
              "      <td>2626.0</td>\n",
              "      <td>826.404636</td>\n",
              "      <td>3362.0</td>\n",
              "      <td>2132.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>72.944444</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1066.0</td>\n",
              "      <td>54.891304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>896.533554</td>\n",
              "      <td>680.0</td>\n",
              "      <td>1445.293387</td>\n",
              "      <td>2382.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>512.0</td>\n",
              "      <td>10.625000</td>\n",
              "      <td>85.0</td>\n",
              "      <td>317.6</td>\n",
              "      <td>54.487179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>982.678137</td>\n",
              "      <td>588.0</td>\n",
              "      <td>1259.210679</td>\n",
              "      <td>2547.2</td>\n",
              "      <td>448.0</td>\n",
              "      <td>357.0</td>\n",
              "      <td>11.529412</td>\n",
              "      <td>84.0</td>\n",
              "      <td>278.6</td>\n",
              "      <td>49.704142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>993.652344</td>\n",
              "      <td>2625.0</td>\n",
              "      <td>488.281250</td>\n",
              "      <td>3663.0</td>\n",
              "      <td>2250.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>131.250000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1017.5</td>\n",
              "      <td>52.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>898.751633</td>\n",
              "      <td>2550.0</td>\n",
              "      <td>841.196110</td>\n",
              "      <td>2476.6</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>950.0</td>\n",
              "      <td>67.105263</td>\n",
              "      <td>102.0</td>\n",
              "      <td>1015.0</td>\n",
              "      <td>56.043956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>1065.075572</td>\n",
              "      <td>3420.0</td>\n",
              "      <td>729.147091</td>\n",
              "      <td>3967.3</td>\n",
              "      <td>2910.0</td>\n",
              "      <td>840.0</td>\n",
              "      <td>122.142857</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1227.0</td>\n",
              "      <td>59.375000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>937.190083</td>\n",
              "      <td>1656.0</td>\n",
              "      <td>1480.991736</td>\n",
              "      <td>2551.5</td>\n",
              "      <td>1134.0</td>\n",
              "      <td>1152.0</td>\n",
              "      <td>25.875000</td>\n",
              "      <td>92.0</td>\n",
              "      <td>729.0</td>\n",
              "      <td>58.974359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>1044.162475</td>\n",
              "      <td>3277.0</td>\n",
              "      <td>1531.778692</td>\n",
              "      <td>2740.3</td>\n",
              "      <td>1943.0</td>\n",
              "      <td>1740.0</td>\n",
              "      <td>54.616667</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1186.1</td>\n",
              "      <td>70.625000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>1107.142857</td>\n",
              "      <td>1734.0</td>\n",
              "      <td>1236.263736</td>\n",
              "      <td>3667.3</td>\n",
              "      <td>1547.0</td>\n",
              "      <td>765.0</td>\n",
              "      <td>38.533333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>685.1</td>\n",
              "      <td>58.285714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>902.499915</td>\n",
              "      <td>1843.0</td>\n",
              "      <td>866.933415</td>\n",
              "      <td>2639.0</td>\n",
              "      <td>1235.0</td>\n",
              "      <td>741.0</td>\n",
              "      <td>47.256410</td>\n",
              "      <td>97.0</td>\n",
              "      <td>771.4</td>\n",
              "      <td>53.591160</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35540dbf-12f4-4b1d-8c85-dcf92a7abdb9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35540dbf-12f4-4b1d-8c85-dcf92a7abdb9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35540dbf-12f4-4b1d-8c85-dcf92a7abdb9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-25562e1a-e97b-4700-8517-5c4b37771417\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25562e1a-e97b-4700-8517-5c4b37771417')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-25562e1a-e97b-4700-8517-5c4b37771417 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_49964523-c048-4547-8839-80b4699db8a9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_49964523-c048-4547-8839-80b4699db8a9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7b876021",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7b876021",
        "outputId": "6d1cd175-f15b-40f5-c9c5-3c0ba7542822"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['id',\n",
              " 'Sex',\n",
              " 'Age',\n",
              " 'Height',\n",
              " 'Weight',\n",
              " 'Duration',\n",
              " 'Heart_Rate',\n",
              " 'Body_Temp',\n",
              " 'Calories',\n",
              " 'Calories_log',\n",
              " 'Height_m',\n",
              " 'BMI',\n",
              " 'BMI*Body_Temp',\n",
              " 'Effort',\n",
              " 'Age*BMI',\n",
              " 'body*weight',\n",
              " 'Weight*Dration',\n",
              " 'Age_Duration',\n",
              " 'Age_Adjusted_Effort',\n",
              " 'sex*heart',\n",
              " 'bodytmepduration',\n",
              " 'hr_percent']"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "df.columns.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8356d04a",
      "metadata": {
        "id": "8356d04a"
      },
      "outputs": [],
      "source": [
        "df['effort/weight'] = df['Effort'] / df['Weight']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "13ca9e6e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "13ca9e6e",
        "outputId": "313def7d-2100-44b7-c34a-5a7300995a1e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  Effort      Age*BMI  body*weight  \\\n",
              "0          150.0      5.017280  ...  2626.0   826.404636       3362.0   \n",
              "1           34.0      3.555348  ...   680.0  1445.293387       2382.0   \n",
              "2           29.0      3.401197  ...   588.0  1259.210679       2547.2   \n",
              "3          140.0      4.948760  ...  2625.0   488.281250       3663.0   \n",
              "4          146.0      4.990433  ...  2550.0   841.196110       2476.6   \n",
              "...          ...           ...  ...     ...          ...          ...   \n",
              "749995     230.0      5.442418  ...  3420.0   729.147091       3967.3   \n",
              "749996      96.0      4.574711  ...  1656.0  1480.991736       2551.5   \n",
              "749997     221.0      5.402677  ...  3277.0  1531.778692       2740.3   \n",
              "749998     109.0      4.700480  ...  1734.0  1236.263736       3667.3   \n",
              "749999     103.0      4.644391  ...  1843.0   866.933415       2639.0   \n",
              "\n",
              "        Weight*Dration  Age_Duration  Age_Adjusted_Effort  sex*heart  \\\n",
              "0               2132.0         936.0            72.944444        0.0   \n",
              "1                480.0         512.0            10.625000       85.0   \n",
              "2                448.0         357.0            11.529412       84.0   \n",
              "3               2250.0         500.0           131.250000        0.0   \n",
              "4               1525.0         950.0            67.105263      102.0   \n",
              "...                ...           ...                  ...        ...   \n",
              "749995          2910.0         840.0           122.142857        0.0   \n",
              "749996          1134.0        1152.0            25.875000       92.0   \n",
              "749997          1943.0        1740.0            54.616667        0.0   \n",
              "749998          1547.0         765.0            38.533333        0.0   \n",
              "749999          1235.0         741.0            47.256410       97.0   \n",
              "\n",
              "        bodytmepduration  hr_percent  effort/weight  \n",
              "0                 1066.0   54.891304      32.024390  \n",
              "1                  317.6   54.487179      11.333333  \n",
              "2                  278.6   49.704142       9.187500  \n",
              "3                 1017.5   52.500000      29.166667  \n",
              "4                 1015.0   56.043956      41.803279  \n",
              "...                  ...         ...            ...  \n",
              "749995            1227.0   59.375000      35.257732  \n",
              "749996             729.0   58.974359      26.285714  \n",
              "749997            1186.1   70.625000      48.910448  \n",
              "749998             685.1   58.285714      19.054945  \n",
              "749999             771.4   53.591160      28.353846  \n",
              "\n",
              "[750000 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cbca733e-394f-4e4d-91db-b394cc43fca6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>Effort</th>\n",
              "      <th>Age*BMI</th>\n",
              "      <th>body*weight</th>\n",
              "      <th>Weight*Dration</th>\n",
              "      <th>Age_Duration</th>\n",
              "      <th>Age_Adjusted_Effort</th>\n",
              "      <th>sex*heart</th>\n",
              "      <th>bodytmepduration</th>\n",
              "      <th>hr_percent</th>\n",
              "      <th>effort/weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>2626.0</td>\n",
              "      <td>826.404636</td>\n",
              "      <td>3362.0</td>\n",
              "      <td>2132.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>72.944444</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1066.0</td>\n",
              "      <td>54.891304</td>\n",
              "      <td>32.024390</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>680.0</td>\n",
              "      <td>1445.293387</td>\n",
              "      <td>2382.0</td>\n",
              "      <td>480.0</td>\n",
              "      <td>512.0</td>\n",
              "      <td>10.625000</td>\n",
              "      <td>85.0</td>\n",
              "      <td>317.6</td>\n",
              "      <td>54.487179</td>\n",
              "      <td>11.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>588.0</td>\n",
              "      <td>1259.210679</td>\n",
              "      <td>2547.2</td>\n",
              "      <td>448.0</td>\n",
              "      <td>357.0</td>\n",
              "      <td>11.529412</td>\n",
              "      <td>84.0</td>\n",
              "      <td>278.6</td>\n",
              "      <td>49.704142</td>\n",
              "      <td>9.187500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>2625.0</td>\n",
              "      <td>488.281250</td>\n",
              "      <td>3663.0</td>\n",
              "      <td>2250.0</td>\n",
              "      <td>500.0</td>\n",
              "      <td>131.250000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1017.5</td>\n",
              "      <td>52.500000</td>\n",
              "      <td>29.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>2550.0</td>\n",
              "      <td>841.196110</td>\n",
              "      <td>2476.6</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>950.0</td>\n",
              "      <td>67.105263</td>\n",
              "      <td>102.0</td>\n",
              "      <td>1015.0</td>\n",
              "      <td>56.043956</td>\n",
              "      <td>41.803279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>3420.0</td>\n",
              "      <td>729.147091</td>\n",
              "      <td>3967.3</td>\n",
              "      <td>2910.0</td>\n",
              "      <td>840.0</td>\n",
              "      <td>122.142857</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1227.0</td>\n",
              "      <td>59.375000</td>\n",
              "      <td>35.257732</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>1656.0</td>\n",
              "      <td>1480.991736</td>\n",
              "      <td>2551.5</td>\n",
              "      <td>1134.0</td>\n",
              "      <td>1152.0</td>\n",
              "      <td>25.875000</td>\n",
              "      <td>92.0</td>\n",
              "      <td>729.0</td>\n",
              "      <td>58.974359</td>\n",
              "      <td>26.285714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>3277.0</td>\n",
              "      <td>1531.778692</td>\n",
              "      <td>2740.3</td>\n",
              "      <td>1943.0</td>\n",
              "      <td>1740.0</td>\n",
              "      <td>54.616667</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1186.1</td>\n",
              "      <td>70.625000</td>\n",
              "      <td>48.910448</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>1734.0</td>\n",
              "      <td>1236.263736</td>\n",
              "      <td>3667.3</td>\n",
              "      <td>1547.0</td>\n",
              "      <td>765.0</td>\n",
              "      <td>38.533333</td>\n",
              "      <td>0.0</td>\n",
              "      <td>685.1</td>\n",
              "      <td>58.285714</td>\n",
              "      <td>19.054945</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>1843.0</td>\n",
              "      <td>866.933415</td>\n",
              "      <td>2639.0</td>\n",
              "      <td>1235.0</td>\n",
              "      <td>741.0</td>\n",
              "      <td>47.256410</td>\n",
              "      <td>97.0</td>\n",
              "      <td>771.4</td>\n",
              "      <td>53.591160</td>\n",
              "      <td>28.353846</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cbca733e-394f-4e4d-91db-b394cc43fca6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cbca733e-394f-4e4d-91db-b394cc43fca6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cbca733e-394f-4e4d-91db-b394cc43fca6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2576ad5d-344d-4dbe-95b0-15694c5ee5ab\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2576ad5d-344d-4dbe-95b0-15694c5ee5ab')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2576ad5d-344d-4dbe-95b0-15694c5ee5ab button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2e9b4b36-51b1-4373-a3b0-b1a477e998af\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2e9b4b36-51b1-4373-a3b0-b1a477e998af button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5e8f0393",
      "metadata": {
        "id": "5e8f0393"
      },
      "outputs": [],
      "source": [
        "df['Heart_Rate/body_Temp'] = df['Heart_Rate'] / df['Body_Temp']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eb896408",
      "metadata": {
        "id": "eb896408"
      },
      "outputs": [],
      "source": [
        "df['BMR'] = df.apply(lambda row:\n",
        "    10 * row['Weight'] + 6.25 * row['Height'] * 100 - 5 * row['Age'] + (5 if row['Sex'] == 0 else -161),\n",
        "    axis=1\n",
        ")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5f79a9d0",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "5f79a9d0",
        "outputId": "8744b7e6-17fd-42cd-a589-8f62af734aec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    7.500000e+05\n",
              "mean     1.688903e+06\n",
              "std      9.253626e+05\n",
              "min      8.477400e+04\n",
              "25%      9.025560e+05\n",
              "50%      1.673264e+06\n",
              "75%      2.467896e+06\n",
              "max      4.120200e+06\n",
              "Name: BMR × Duration, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BMR × Duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>7.500000e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.688903e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>9.253626e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>8.477400e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>9.025560e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.673264e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2.467896e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4.120200e+06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "df['BMR × Duration'] = df['BMR'] * df['Duration']\n",
        "df['BMR × Duration'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9dff5275",
      "metadata": {
        "id": "9dff5275"
      },
      "outputs": [],
      "source": [
        "df['LBM'] = df.apply(lambda row:\n",
        "    0.407 * row['Weight'] + 0.267 * row['Height_m'] * 100 - 19.2\n",
        "    if row['Sex'] == 0\n",
        "    else 0.252 * row['Weight'] + 0.473 * row['Height_m'] * 100 - 48.3,\n",
        "    axis=1\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ab1220cf",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "ab1220cf",
        "outputId": "64f5bbfd-8d5a-4f26-d64a-8d7bc5620583"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         1.89\n",
              "1         1.63\n",
              "2         1.61\n",
              "3         1.92\n",
              "4         1.66\n",
              "          ... \n",
              "749995    1.93\n",
              "749996    1.65\n",
              "749997    1.62\n",
              "749998    1.82\n",
              "749999    1.71\n",
              "Name: Height_m, Length: 750000, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Height_m</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>1.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>1.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>1.62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>1.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>1.71</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "df['Height_m']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "858b08ee",
      "metadata": {
        "id": "858b08ee"
      },
      "outputs": [],
      "source": [
        "df['BMR_katch'] = 370 + 21.6 * df['LBM']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6004576a",
      "metadata": {
        "id": "6004576a"
      },
      "outputs": [],
      "source": [
        "df['HR_per_BMR'] = df['Heart_Rate'] / df['BMR_katch']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "58cae3f5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "58cae3f5",
        "outputId": "64a4520e-ed44-4ee9-9766-e17b482737cb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['id',\n",
              " 'Sex',\n",
              " 'Age',\n",
              " 'Height',\n",
              " 'Weight',\n",
              " 'Duration',\n",
              " 'Heart_Rate',\n",
              " 'Body_Temp',\n",
              " 'Calories',\n",
              " 'Calories_log',\n",
              " 'Height_m',\n",
              " 'BMI',\n",
              " 'BMI*Body_Temp',\n",
              " 'Effort',\n",
              " 'Age*BMI',\n",
              " 'body*weight',\n",
              " 'Weight*Dration',\n",
              " 'Age_Duration',\n",
              " 'Age_Adjusted_Effort',\n",
              " 'sex*heart',\n",
              " 'bodytmepduration',\n",
              " 'hr_percent',\n",
              " 'effort/weight',\n",
              " 'Heart_Rate/body_Temp',\n",
              " 'BMR',\n",
              " 'BMR × Duration',\n",
              " 'LBM',\n",
              " 'BMR_katch',\n",
              " 'HR_per_BMR']"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "df.columns.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8c4c150d",
      "metadata": {
        "id": "8c4c150d"
      },
      "outputs": [],
      "source": [
        "df[\"Temp_Slope\"] = (df[\"Body_Temp\"] - 37) / (df[\"Duration\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4355ab48",
      "metadata": {
        "id": "4355ab48"
      },
      "outputs": [],
      "source": [
        "df[\"HR_Slope\"] = df[\"Heart_Rate\"] / (df[\"Duration\"] )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "60325ba2",
      "metadata": {
        "id": "60325ba2"
      },
      "outputs": [],
      "source": [
        "df['dur_over_temp_delta'] = df['Duration'] / ((df['Body_Temp'] - 37) + 1e-5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c8308924",
      "metadata": {
        "id": "c8308924"
      },
      "outputs": [],
      "source": [
        "df[\"Micro_Effort\"] = (df[\"Heart_Rate\"] * df[\"Duration\"]) / (df[\"Weight\"])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fe7696b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "6fe7696b",
        "outputId": "929530ff-4b59-4c16-f159-c09dd23a0f2b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from sklearn.decomposition import PCA\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Step 1: Scale your selected features\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "cluster_features = df[['Duration', 'Heart_Rate', 'Body_Temp', 'LBM', 'Effort']]\n",
        "scaled = StandardScaler().fit_transform(cluster_features)\n",
        "\n",
        "# Step 2: Fit KMeans again (if not already)\n",
        "from sklearn.cluster import KMeans\n",
        "kmeans = KMeans(n_clusters=3, random_state=42)\n",
        "df['cluster_group'] = kmeans.fit_predict(scaled)\n",
        "\n",
        "# Step 3: Reduce to 2D using PCA for visualization\n",
        "pca = PCA(n_components=2)\n",
        "pca_result = pca.fit_transform(scaled)\n",
        "\n",
        "# Step 4: Plot the clusters in 2D\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(\n",
        "    x=pca_result[:, 0],\n",
        "    y=pca_result[:, 1],\n",
        "    hue=df['cluster_group'],\n",
        "    palette='Set2',\n",
        "    alpha=0.6\n",
        ")\n",
        "plt.title(\"KMeans Clustering Visualized in 2D (PCA)\")\n",
        "plt.xlabel(\"PCA Component 1\")\n",
        "plt.ylabel(\"PCA Component 2\")\n",
        "plt.legend(title=\"Cluster\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "71e74067",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "71e74067",
        "outputId": "c5dc9b89-0c8f-4ed7-f36b-0f8872edcc95"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    750000.000000\n",
              "mean         15.421015\n",
              "std           8.354095\n",
              "min           1.000000\n",
              "25%           8.000000\n",
              "50%          15.000000\n",
              "75%          23.000000\n",
              "max          30.000000\n",
              "Name: Duration, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>750000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>15.421015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>8.354095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>15.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>23.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>30.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ],
      "source": [
        "df['Duration'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8787e3b9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "8787e3b9",
        "outputId": "1bf6adcf-ff0b-4ef3-da57-dd0c8170aacc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                          id       Sex        Age      Height     Weight  \\\n",
              "cluster_group                                                              \n",
              "0              374811.660102  0.049780  41.415978  185.205682  87.195114   \n",
              "1              374687.318113  0.480951  41.589536  175.362137  75.744941   \n",
              "2              375640.433726  0.959171  41.174032  163.732048  62.812421   \n",
              "\n",
              "                Duration  Heart_Rate  Body_Temp    Calories  Calories_log  \\\n",
              "cluster_group                                                               \n",
              "0              21.994374  102.498324  40.593168  138.353823      4.865790   \n",
              "1               7.323286   87.030100  39.332677   31.104910      3.243100   \n",
              "2              21.174302  101.346092  40.549634  125.433209      4.783316   \n",
              "\n",
              "               ...  Heart_Rate/body_Temp            BMR  BMR × Duration  \\\n",
              "cluster_group  ...                                                        \n",
              "0              ...              2.524568  116415.158806    2.557444e+06   \n",
              "1              ...              2.212052  110075.999830    8.058120e+05   \n",
              "2              ...              2.498884  102600.561985    2.172240e+06   \n",
              "\n",
              "                     LBM    BMR_katch  HR_per_BMR  Temp_Slope   HR_Slope  \\\n",
              "cluster_group                                                              \n",
              "0              65.550439  1785.889473    0.057677    0.170340   4.882454   \n",
              "1              56.086815  1581.475208    0.056298    0.382040  17.903019   \n",
              "2              45.194761  1346.206834    0.075789    0.175306   5.030707   \n",
              "\n",
              "               dur_over_temp_delta  Micro_Effort  \n",
              "cluster_group                                     \n",
              "0                         6.076420     26.420818  \n",
              "1                         2.942086      8.829391  \n",
              "2                         5.917764     34.877880  \n",
              "\n",
              "[3 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-976d72a1-6b02-48bd-8fce-af2af20bc617\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>Heart_Rate/body_Temp</th>\n",
              "      <th>BMR</th>\n",
              "      <th>BMR × Duration</th>\n",
              "      <th>LBM</th>\n",
              "      <th>BMR_katch</th>\n",
              "      <th>HR_per_BMR</th>\n",
              "      <th>Temp_Slope</th>\n",
              "      <th>HR_Slope</th>\n",
              "      <th>dur_over_temp_delta</th>\n",
              "      <th>Micro_Effort</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster_group</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>374811.660102</td>\n",
              "      <td>0.049780</td>\n",
              "      <td>41.415978</td>\n",
              "      <td>185.205682</td>\n",
              "      <td>87.195114</td>\n",
              "      <td>21.994374</td>\n",
              "      <td>102.498324</td>\n",
              "      <td>40.593168</td>\n",
              "      <td>138.353823</td>\n",
              "      <td>4.865790</td>\n",
              "      <td>...</td>\n",
              "      <td>2.524568</td>\n",
              "      <td>116415.158806</td>\n",
              "      <td>2.557444e+06</td>\n",
              "      <td>65.550439</td>\n",
              "      <td>1785.889473</td>\n",
              "      <td>0.057677</td>\n",
              "      <td>0.170340</td>\n",
              "      <td>4.882454</td>\n",
              "      <td>6.076420</td>\n",
              "      <td>26.420818</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>374687.318113</td>\n",
              "      <td>0.480951</td>\n",
              "      <td>41.589536</td>\n",
              "      <td>175.362137</td>\n",
              "      <td>75.744941</td>\n",
              "      <td>7.323286</td>\n",
              "      <td>87.030100</td>\n",
              "      <td>39.332677</td>\n",
              "      <td>31.104910</td>\n",
              "      <td>3.243100</td>\n",
              "      <td>...</td>\n",
              "      <td>2.212052</td>\n",
              "      <td>110075.999830</td>\n",
              "      <td>8.058120e+05</td>\n",
              "      <td>56.086815</td>\n",
              "      <td>1581.475208</td>\n",
              "      <td>0.056298</td>\n",
              "      <td>0.382040</td>\n",
              "      <td>17.903019</td>\n",
              "      <td>2.942086</td>\n",
              "      <td>8.829391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>375640.433726</td>\n",
              "      <td>0.959171</td>\n",
              "      <td>41.174032</td>\n",
              "      <td>163.732048</td>\n",
              "      <td>62.812421</td>\n",
              "      <td>21.174302</td>\n",
              "      <td>101.346092</td>\n",
              "      <td>40.549634</td>\n",
              "      <td>125.433209</td>\n",
              "      <td>4.783316</td>\n",
              "      <td>...</td>\n",
              "      <td>2.498884</td>\n",
              "      <td>102600.561985</td>\n",
              "      <td>2.172240e+06</td>\n",
              "      <td>45.194761</td>\n",
              "      <td>1346.206834</td>\n",
              "      <td>0.075789</td>\n",
              "      <td>0.175306</td>\n",
              "      <td>5.030707</td>\n",
              "      <td>5.917764</td>\n",
              "      <td>34.877880</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3 rows × 33 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-976d72a1-6b02-48bd-8fce-af2af20bc617')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-976d72a1-6b02-48bd-8fce-af2af20bc617 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-976d72a1-6b02-48bd-8fce-af2af20bc617');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bc5249d3-32a7-41e8-92e8-d5a9b37c412b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc5249d3-32a7-41e8-92e8-d5a9b37c412b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bc5249d3-32a7-41e8-92e8-d5a9b37c412b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "df.groupby('cluster_group').mean()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99ff9a39",
      "metadata": {
        "id": "99ff9a39"
      },
      "outputs": [],
      "source": [
        "df['Duration_sqaured'] = df['Duration'] ** 2"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install autofeat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ghF1ZXmYTVSC",
        "outputId": "29925294-a5d4-45ee-eea2-29149e14302f"
      },
      "id": "ghF1ZXmYTVSC",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting autofeat\n",
            "  Downloading autofeat-2.1.3-py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: joblib<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from autofeat) (1.5.0)\n",
            "Requirement already satisfied: numba>=0.53.1 in /usr/local/lib/python3.11/dist-packages (from autofeat) (0.60.0)\n",
            "Collecting numpy<2.0.0,>=1.20.3 (from autofeat)\n",
            "  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pandas<3.0.0,>=1.3.5 in /usr/local/lib/python3.11/dist-packages (from autofeat) (2.2.2)\n",
            "Collecting pint<1.0,>=0.17 (from autofeat)\n",
            "  Downloading Pint-0.24.4-py3-none-any.whl.metadata (8.5 kB)\n",
            "Requirement already satisfied: scikit-learn<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from autofeat) (1.6.1)\n",
            "Requirement already satisfied: scipy<2.0.0,>=1.7.3 in /usr/local/lib/python3.11/dist-packages (from autofeat) (1.15.3)\n",
            "Requirement already satisfied: sympy<2.0.0,>=1.7.1 in /usr/local/lib/python3.11/dist-packages (from autofeat) (1.13.1)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.11/dist-packages (from numba>=0.53.1->autofeat) (0.43.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0.0,>=1.3.5->autofeat) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0.0,>=1.3.5->autofeat) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0.0,>=1.3.5->autofeat) (2025.2)\n",
            "Requirement already satisfied: platformdirs>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from pint<1.0,>=0.17->autofeat) (4.3.8)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from pint<1.0,>=0.17->autofeat) (4.13.2)\n",
            "Collecting flexcache>=0.3 (from pint<1.0,>=0.17->autofeat)\n",
            "  Downloading flexcache-0.3-py3-none-any.whl.metadata (7.0 kB)\n",
            "Collecting flexparser>=0.4 (from pint<1.0,>=0.17->autofeat)\n",
            "  Downloading flexparser-0.4-py3-none-any.whl.metadata (18 kB)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.2.0->autofeat) (3.6.0)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy<2.0.0,>=1.7.1->autofeat) (1.3.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3.0.0,>=1.3.5->autofeat) (1.17.0)\n",
            "Downloading autofeat-2.1.3-py3-none-any.whl (23 kB)\n",
            "Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m60.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading Pint-0.24.4-py3-none-any.whl (302 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m302.0/302.0 kB\u001b[0m \u001b[31m19.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading flexcache-0.3-py3-none-any.whl (13 kB)\n",
            "Downloading flexparser-0.4-py3-none-any.whl (27 kB)\n",
            "Installing collected packages: numpy, flexparser, flexcache, pint, autofeat\n",
            "  Attempting uninstall: numpy\n",
            "    Found existing installation: numpy 2.0.2\n",
            "    Uninstalling numpy-2.0.2:\n",
            "      Successfully uninstalled numpy-2.0.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed autofeat-2.1.3 flexcache-0.3 flexparser-0.4 numpy-1.26.4 pint-0.24.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "id": "X60yDXg7TuOu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "outputId": "19311a8f-9e0d-4946-bf90-c8b099c17908"
      },
      "id": "X60yDXg7TuOu",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  BMR × Duration     LBM  BMR_katch  \\\n",
              "0          150.0      5.017280  ...       3088020.0  64.637  1766.1592   \n",
              "1           34.0      3.555348  ...        815952.0  43.919  1318.6504   \n",
              "2           29.0      3.401197  ...        705943.0  43.981  1319.9896   \n",
              "3          140.0      4.948760  ...       3020125.0  68.694  1853.7904   \n",
              "4          146.0      4.990433  ...       2600225.0  45.590  1354.7440   \n",
              "...          ...           ...  ...             ...     ...        ...   \n",
              "749995     230.0      5.442418  ...       3643800.0  71.810  1921.0960   \n",
              "749996      96.0      4.574711  ...       1858932.0  45.621  1355.4136   \n",
              "749997     221.0      5.402677  ...       2947125.0  51.323  1478.5768   \n",
              "749998     109.0      4.700480  ...       1945480.0  66.431  1804.9096   \n",
              "749999     103.0      4.644391  ...       2036211.0  48.963  1427.6008   \n",
              "\n",
              "        HR_per_BMR  Temp_Slope   HR_Slope  dur_over_temp_delta  Micro_Effort  \\\n",
              "0         0.057186    0.153846   3.884615             6.499984     32.024390   \n",
              "1         0.064460    0.337500  10.625000             2.962952     11.333333   \n",
              "2         0.063637    0.400000  12.000000             2.499991      9.187500   \n",
              "3         0.056641    0.148000   4.200000             6.756738     29.166667   \n",
              "4         0.075291    0.144000   4.080000             6.944425     41.803279   \n",
              "...            ...         ...        ...                  ...           ...   \n",
              "749995    0.059341    0.130000   3.800000             7.692288     35.257732   \n",
              "749996    0.067876    0.194444   5.111111             5.142842     26.285714   \n",
              "749997    0.076425    0.134483   3.896552             7.435878     48.910448   \n",
              "749998    0.056513    0.194118   6.000000             5.151500     19.054945   \n",
              "749999    0.067946    0.189474   5.105263             5.277763     28.353846   \n",
              "\n",
              "        cluster_group  Duration_sqaured  \n",
              "0                   0             676.0  \n",
              "1                   1              64.0  \n",
              "2                   1              49.0  \n",
              "3                   0             625.0  \n",
              "4                   2             625.0  \n",
              "...               ...               ...  \n",
              "749995              0             900.0  \n",
              "749996              2             324.0  \n",
              "749997              2             841.0  \n",
              "749998              0             289.0  \n",
              "749999              2             361.0  \n",
              "\n",
              "[750000 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d85b5950-cb09-453f-82ba-e8c12646b24e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>BMR × Duration</th>\n",
              "      <th>LBM</th>\n",
              "      <th>BMR_katch</th>\n",
              "      <th>HR_per_BMR</th>\n",
              "      <th>Temp_Slope</th>\n",
              "      <th>HR_Slope</th>\n",
              "      <th>dur_over_temp_delta</th>\n",
              "      <th>Micro_Effort</th>\n",
              "      <th>cluster_group</th>\n",
              "      <th>Duration_sqaured</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>3088020.0</td>\n",
              "      <td>64.637</td>\n",
              "      <td>1766.1592</td>\n",
              "      <td>0.057186</td>\n",
              "      <td>0.153846</td>\n",
              "      <td>3.884615</td>\n",
              "      <td>6.499984</td>\n",
              "      <td>32.024390</td>\n",
              "      <td>0</td>\n",
              "      <td>676.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>815952.0</td>\n",
              "      <td>43.919</td>\n",
              "      <td>1318.6504</td>\n",
              "      <td>0.064460</td>\n",
              "      <td>0.337500</td>\n",
              "      <td>10.625000</td>\n",
              "      <td>2.962952</td>\n",
              "      <td>11.333333</td>\n",
              "      <td>1</td>\n",
              "      <td>64.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>705943.0</td>\n",
              "      <td>43.981</td>\n",
              "      <td>1319.9896</td>\n",
              "      <td>0.063637</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>2.499991</td>\n",
              "      <td>9.187500</td>\n",
              "      <td>1</td>\n",
              "      <td>49.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>3020125.0</td>\n",
              "      <td>68.694</td>\n",
              "      <td>1853.7904</td>\n",
              "      <td>0.056641</td>\n",
              "      <td>0.148000</td>\n",
              "      <td>4.200000</td>\n",
              "      <td>6.756738</td>\n",
              "      <td>29.166667</td>\n",
              "      <td>0</td>\n",
              "      <td>625.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>2600225.0</td>\n",
              "      <td>45.590</td>\n",
              "      <td>1354.7440</td>\n",
              "      <td>0.075291</td>\n",
              "      <td>0.144000</td>\n",
              "      <td>4.080000</td>\n",
              "      <td>6.944425</td>\n",
              "      <td>41.803279</td>\n",
              "      <td>2</td>\n",
              "      <td>625.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>3643800.0</td>\n",
              "      <td>71.810</td>\n",
              "      <td>1921.0960</td>\n",
              "      <td>0.059341</td>\n",
              "      <td>0.130000</td>\n",
              "      <td>3.800000</td>\n",
              "      <td>7.692288</td>\n",
              "      <td>35.257732</td>\n",
              "      <td>0</td>\n",
              "      <td>900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>1858932.0</td>\n",
              "      <td>45.621</td>\n",
              "      <td>1355.4136</td>\n",
              "      <td>0.067876</td>\n",
              "      <td>0.194444</td>\n",
              "      <td>5.111111</td>\n",
              "      <td>5.142842</td>\n",
              "      <td>26.285714</td>\n",
              "      <td>2</td>\n",
              "      <td>324.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>2947125.0</td>\n",
              "      <td>51.323</td>\n",
              "      <td>1478.5768</td>\n",
              "      <td>0.076425</td>\n",
              "      <td>0.134483</td>\n",
              "      <td>3.896552</td>\n",
              "      <td>7.435878</td>\n",
              "      <td>48.910448</td>\n",
              "      <td>2</td>\n",
              "      <td>841.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>1945480.0</td>\n",
              "      <td>66.431</td>\n",
              "      <td>1804.9096</td>\n",
              "      <td>0.056513</td>\n",
              "      <td>0.194118</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.151500</td>\n",
              "      <td>19.054945</td>\n",
              "      <td>0</td>\n",
              "      <td>289.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>2036211.0</td>\n",
              "      <td>48.963</td>\n",
              "      <td>1427.6008</td>\n",
              "      <td>0.067946</td>\n",
              "      <td>0.189474</td>\n",
              "      <td>5.105263</td>\n",
              "      <td>5.277763</td>\n",
              "      <td>28.353846</td>\n",
              "      <td>2</td>\n",
              "      <td>361.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 35 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d85b5950-cb09-453f-82ba-e8c12646b24e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d85b5950-cb09-453f-82ba-e8c12646b24e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d85b5950-cb09-453f-82ba-e8c12646b24e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-d4276bb2-5312-473b-8cbd-d96511655f52\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4276bb2-5312-473b-8cbd-d96511655f52')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-d4276bb2-5312-473b-8cbd-d96511655f52 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d5852afc-bbed-4ce2-9c50-950d6e79a63f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d5852afc-bbed-4ce2-9c50-950d6e79a63f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Weight**2/Duration_sqaured'] = (df['Weight'] ** 2) / df['Duration_sqaured']\n",
        "df['log(Heart_Rate)/Body_Temp'] = np.log(df['Heart_Rate']) / df['Body_Temp']\n",
        "df['1/(Age*Duration_sqaured)'] = 1 / (df['Age'] * df['Duration_sqaured'])\n",
        "df['Age**3/Duration_sqaured'] = (df['Age'] ** 3) / df['Duration_sqaured']\n",
        "df['log(Duration_sqaured)/Duration_sqaured'] = np.log(df['Duration_sqaured']) / df['Duration_sqaured']\n",
        "df['Age**3*Sex'] = (df['Age'] ** 3) * df['Sex']\n",
        "df['Sex/Duration_sqaured'] = df['Sex'] / df['Duration_sqaured']"
      ],
      "metadata": {
        "id": "RhEFL5ngThfD"
      },
      "id": "RhEFL5ngThfD",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Gender'] = 1 - df['Sex']  # converts 0→1 (male), 1→0 (female)"
      ],
      "metadata": {
        "id": "d8Ol9XQyZQPK"
      },
      "id": "d8Ol9XQyZQPK",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Weight_lb'] = df['Weight'] * 2.20462  # kg → lb\n",
        "\n",
        "df['VO2_max'] = (\n",
        "    132.853\n",
        "    - 0.0769 * df['Weight_lb']\n",
        "    - 0.3877 * df['Age']\n",
        "    + 6.315 * df['Gender']\n",
        "    - 3.2649 * (df['Duration'] / 60)  # convert seconds to minutes\n",
        "    - 0.1565 * df['Heart_Rate']\n",
        ")"
      ],
      "metadata": {
        "id": "p8dyHEQaZRzP"
      },
      "id": "p8dyHEQaZRzP",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['VO2_per_kg'] = df['VO2_max'] / df['Weight']\n"
      ],
      "metadata": {
        "id": "UpMgcoQMewge"
      },
      "id": "UpMgcoQMewge",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Age_bin'] = pd.cut(df['Age'], bins =[0,20,30,40,50,60,80], labels = ['0-20','20-30','30-40','40-50','50-60','60+'])"
      ],
      "metadata": {
        "id": "SrerYrNlW8S-"
      },
      "id": "SrerYrNlW8S-",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['HR_bin'] = pd.cut(df['Heart_Rate'], bins=[60, 90, 110, 130, 160, 200], labels=['low', 'moderate', 'high', 'very_high', 'extreme'])"
      ],
      "metadata": {
        "id": "aPw7P7SEX5EJ"
      },
      "id": "aPw7P7SEX5EJ",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Duration_bin'] = pd.cut(df['Duration'], bins=[0, 5, 10, 20, 30, 60], labels=['very_short', 'short', 'medium', 'long', 'very_long'])"
      ],
      "metadata": {
        "id": "FHM5IlQKXAgb"
      },
      "id": "FHM5IlQKXAgb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Temp_bin'] = pd.cut(df['Body_Temp'],\n",
        "                        bins=[36.0, 37.0, 38.0, 39.0, 40.0, 41.5],\n",
        "                        labels=['normal', 'elevated', 'hot', 'very_hot', 'extreme'])"
      ],
      "metadata": {
        "id": "NVv_jjLfYtlQ"
      },
      "id": "NVv_jjLfYtlQ",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "B2fLRpFOdMsP"
      },
      "id": "B2fLRpFOdMsP",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "IKjztzAVedJk",
        "outputId": "3d2759f8-6f7e-44c0-9448-c1f1605df012"
      },
      "id": "IKjztzAVedJk",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  Age**3*Sex  Sex/Duration_sqaured  Gender  \\\n",
              "0          150.0      5.017280  ...           0              0.000000       1   \n",
              "1           34.0      3.555348  ...      262144              0.015625       0   \n",
              "2           29.0      3.401197  ...      132651              0.020408       0   \n",
              "3          140.0      4.948760  ...           0              0.000000       1   \n",
              "4          146.0      4.990433  ...       54872              0.001600       0   \n",
              "...          ...           ...  ...         ...                   ...     ...   \n",
              "749995     230.0      5.442418  ...           0              0.000000       1   \n",
              "749996      96.0      4.574711  ...      262144              0.003086       0   \n",
              "749997     221.0      5.402677  ...           0              0.000000       1   \n",
              "749998     109.0      4.700480  ...           0              0.000000       1   \n",
              "749999     103.0      4.644391  ...       59319              0.002770       0   \n",
              "\n",
              "        Weight_lb    VO2_max  VO2_per_kg  Age_bin    HR_bin  Duration_bin  \\\n",
              "0       180.77884  94.087617    1.147410    30-40  moderate          long   \n",
              "1       132.27720  84.130263    1.402171      60+       low         short   \n",
              "2       141.09568  88.703137    1.385987    50-60       low         short   \n",
              "3       198.41580  98.362950    1.092922     0-20  moderate          long   \n",
              "4       134.48182  90.455373    1.482875    30-40  moderate          long   \n",
              "...           ...        ...         ...      ...       ...           ...   \n",
              "749995  213.84814  92.394028    0.952516    20-30      high          long   \n",
              "749996  138.89106  81.982007    1.301302      60+  moderate        medium   \n",
              "749997  147.70954  85.284601    1.272904    50-60      high          long   \n",
              "749998  200.62042  89.405735    0.982481    40-50  moderate        medium   \n",
              "749999  143.30030  90.498522    1.392285    30-40  moderate        medium   \n",
              "\n",
              "        Temp_bin  \n",
              "0        extreme  \n",
              "1       very_hot  \n",
              "2       very_hot  \n",
              "3        extreme  \n",
              "4        extreme  \n",
              "...          ...  \n",
              "749995   extreme  \n",
              "749996   extreme  \n",
              "749997   extreme  \n",
              "749998   extreme  \n",
              "749999   extreme  \n",
              "\n",
              "[750000 rows x 50 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4727189d-78c0-414c-b293-8df045da97f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>Age**3*Sex</th>\n",
              "      <th>Sex/Duration_sqaured</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Weight_lb</th>\n",
              "      <th>VO2_max</th>\n",
              "      <th>VO2_per_kg</th>\n",
              "      <th>Age_bin</th>\n",
              "      <th>HR_bin</th>\n",
              "      <th>Duration_bin</th>\n",
              "      <th>Temp_bin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>180.77884</td>\n",
              "      <td>94.087617</td>\n",
              "      <td>1.147410</td>\n",
              "      <td>30-40</td>\n",
              "      <td>moderate</td>\n",
              "      <td>long</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>262144</td>\n",
              "      <td>0.015625</td>\n",
              "      <td>0</td>\n",
              "      <td>132.27720</td>\n",
              "      <td>84.130263</td>\n",
              "      <td>1.402171</td>\n",
              "      <td>60+</td>\n",
              "      <td>low</td>\n",
              "      <td>short</td>\n",
              "      <td>very_hot</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>132651</td>\n",
              "      <td>0.020408</td>\n",
              "      <td>0</td>\n",
              "      <td>141.09568</td>\n",
              "      <td>88.703137</td>\n",
              "      <td>1.385987</td>\n",
              "      <td>50-60</td>\n",
              "      <td>low</td>\n",
              "      <td>short</td>\n",
              "      <td>very_hot</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>198.41580</td>\n",
              "      <td>98.362950</td>\n",
              "      <td>1.092922</td>\n",
              "      <td>0-20</td>\n",
              "      <td>moderate</td>\n",
              "      <td>long</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>54872</td>\n",
              "      <td>0.001600</td>\n",
              "      <td>0</td>\n",
              "      <td>134.48182</td>\n",
              "      <td>90.455373</td>\n",
              "      <td>1.482875</td>\n",
              "      <td>30-40</td>\n",
              "      <td>moderate</td>\n",
              "      <td>long</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>213.84814</td>\n",
              "      <td>92.394028</td>\n",
              "      <td>0.952516</td>\n",
              "      <td>20-30</td>\n",
              "      <td>high</td>\n",
              "      <td>long</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>262144</td>\n",
              "      <td>0.003086</td>\n",
              "      <td>0</td>\n",
              "      <td>138.89106</td>\n",
              "      <td>81.982007</td>\n",
              "      <td>1.301302</td>\n",
              "      <td>60+</td>\n",
              "      <td>moderate</td>\n",
              "      <td>medium</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>147.70954</td>\n",
              "      <td>85.284601</td>\n",
              "      <td>1.272904</td>\n",
              "      <td>50-60</td>\n",
              "      <td>high</td>\n",
              "      <td>long</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>200.62042</td>\n",
              "      <td>89.405735</td>\n",
              "      <td>0.982481</td>\n",
              "      <td>40-50</td>\n",
              "      <td>moderate</td>\n",
              "      <td>medium</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>59319</td>\n",
              "      <td>0.002770</td>\n",
              "      <td>0</td>\n",
              "      <td>143.30030</td>\n",
              "      <td>90.498522</td>\n",
              "      <td>1.392285</td>\n",
              "      <td>30-40</td>\n",
              "      <td>moderate</td>\n",
              "      <td>medium</td>\n",
              "      <td>extreme</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 50 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4727189d-78c0-414c-b293-8df045da97f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4727189d-78c0-414c-b293-8df045da97f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4727189d-78c0-414c-b293-8df045da97f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5252bbe9-c2d9-42af-9077-937edf485d4f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5252bbe9-c2d9-42af-9077-937edf485d4f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5252bbe9-c2d9-42af-9077-937edf485d4f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_00d078cf-4938-4d1b-81b5-e4726f02a3ac\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_00d078cf-4938-4d1b-81b5-e4726f02a3ac button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lmplot(x='Height', y='Calories', hue = 'Sex', data=df)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "XNFyqO1sZG4d",
        "outputId": "b97d998f-9be3-4b2a-ce81-8a044b6e96ff"
      },
      "id": "XNFyqO1sZG4d",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x79907f405a90>"
            ]
          },
          "metadata": {},
          "execution_count": 57
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 558.875x500 with 1 Axes>"
            ],
            "image/png": "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4TBNTU188pOfxHXdyfwok8pIx62rq4uPfexjHHvssYRCIdra2rjyyivp6enJ2c5sO26TjREks5z+/n7Wrl3LbbfdNuxyd999N48//jitra1D5l100UVs3bqV+++/n9/85jc8/PDDfOhDH5qoXa4YRjp2O3fu5NRTT2XFihU89NBDPPPMM3z2s58lGAxmlrn66qu59957+fnPf86mTZvYv38/559//mR9hClhpON2zTXXcN999/GDH/yAbdu2cdVVV3HFFVdwzz33ZJaZjccNYNOmTXz0ox/l8ccf5/777yeZTPK2t72N/v7+zDIjHRvP83jnO99JIpHgscce46677uLOO+/kc5/73FR8pElhpOO2f/9+9u/fz1e+8hWee+457rzzTu677z4uu+yyzDZm43GbdJTBkAJQd99995Dp+/btU0cddZR67rnn1KJFi9TXvva1zLznn39eAeovf/lLZtr//M//KCGEeuWVVyZhryuDQsfuPe95j3r/+99fdJ3u7m7l8/nUz3/+88y0bdu2KUBt3rx5ona1oih03FavXq3+9V//NWfaq171KvWZz3xGKWWOWzYHDx5UgNq0aZNSqrRj87vf/U5ZlqXa29szy2zcuFHV1taqeDw+uR9gisg/boX42c9+pvx+v0omk0opc9wmAxMhMQyLlJJ/+qd/4pOf/CSrV68eMn/z5s3U19fzmte8JjPt9NNPx7Isnnjiicnc1YpCSslvf/tbjjnmGM444wyampo4+eSTc4YntmzZQjKZ5PTTT89MW7FiBW1tbWzevHkK9royOOWUU7jnnnt45ZVXUErxxz/+kb///e+87W1vA8xxyyY9pNDY2AiUdmw2b97MmjVraG5uzixzxhln0Nvby9atWydx76eO/ONWbJna2locR7d8M8dt4jGCxDAsX/ziF3EchyuvvLLg/Pb2dpqamnKmOY5DY2Mj7e3tk7GLFcnBgweJRCL8x3/8B2eeeSb/+7//y3nnncf555/Ppk2bAH3s/H4/9fX1Oes2NzfP6mP3jW98g1WrVrFgwQL8fj9nnnkmt912G6eddhpgjlsaKSVXXXUVr3/96znuuOOA0o5Ne3t7zk01PT89b6ZT6Ljl09nZyRe+8IWcoefZftwmA9Pt11CULVu28PWvf52//e1vpjV2mUgpATjnnHO4+uqrATjhhBN47LHH+Pa3v8369euncvcqmm984xs8/vjj3HPPPSxatIiHH36Yj370o7S2tub88p/tfPSjH+W5557jkUcemepdmVaMdNx6e3t55zvfyapVq/iXf/mXyd25WY6JkBiK8qc//YmDBw/S1taG4zg4jsNLL73Exz/+cRYvXgxAS0sLBw8ezFnPdV26urpoaWmZgr2uDObOnYvjOKxatSpn+sqVKzNVNi0tLSQSCbq7u3OW6ejomLXHLhqNcv3113PzzTdz1llncfzxx3PFFVfwnve8h6985SuAOW4AV1xxBb/5zW/44x//yIIFCzLTSzk2LS0tQ6pu0q9n+vErdtzS9PX1ceaZZ1JTU8Pdd9+Nz+fLzJvNx22yMILEUJR/+qd/4plnnuGpp57KPFpbW/nkJz/J73//ewDWrVtHd3c3W7Zsyaz34IMPIqXk5JNPnqpdn3L8fj+vfe1rh5Rk/v3vf2fRokUAvPrVr8bn8/HAAw9k5r/wwgvs3buXdevWTer+VgrJZJJkMoll5V6abNvORJ1m83FTSnHFFVdw99138+CDD7JkyZKc+aUcm3Xr1vHss8/m/JC4//77qa2tHSKgZwojHTfQkZG3ve1t+P1+7rnnnpxqOJidx23SmeKkWsMU09fXp5588kn15JNPKkDdfPPN6sknn1QvvfRSweXzq2yUUurMM89UJ554onriiSfUI488oo4++mj13ve+dxL2fmoZ6dj98pe/VD6fT33nO99RL774ovrGN76hbNtWf/rTnzLb+Od//mfV1tamHnzwQfXXv/5VrVu3Tq1bt26qPtKkMNJxW79+vVq9erX64x//qHbt2qXuuOMOFQwG1be+9a3MNmbjcVNKqQ0bNqi6ujr10EMPqQMHDmQeAwMDmWVGOjau66rjjjtOve1tb1NPPfWUuu+++9S8efPUddddNxUfaVIY6bj19PSok08+Wa1Zs0bt2LEjZxnXdZVSs/O4TTZGkMxy/vjHPypgyOPiiy8uuHwhQXL48GH13ve+V1VXV6va2lp16aWXqr6+vonf+SmmlGP33//932r58uUqGAyqtWvXql/96lc524hGo+ojH/mIamhoUOFwWJ133nnqwIEDk/xJJpeRjtuBAwfUJZdcolpbW1UwGFTHHnus+upXv6qklJltzMbjppQqeNwAdccdd2SWKeXY7NmzR7397W9XoVBIzZ07V3384x/PlLfOREY6bsXOSUDt3r07s53ZdtwmG6GUUhMbgzEYDAaDwWAYHpNDYjAYDAaDYcoxgsRgMBgMBsOUYwSJwWAwGAyGKccIEoPBYDAYDFOOESQGg8FgMBimHCNIDAaDwWAwTDlGkBgMBoPBYJhyjCAxGAwGg8Ew5RhBYjAYymbx4sXccsstJS+/Z88ehBA89dRTE7ZPBoNhemMEicEwi7jkkks499xzh0x/6KGHEEIM6RJbjL/85S986EMfGtd9u/POO6mvrx/XbRoMhumDM9U7YDAYph/z5s2b6l0wGAwzDBMhMRgMQ3jkkUd4wxveQCgUYuHChVx55ZX09/dn5ucP2Wzfvp1TTz2VYDDIqlWr+MMf/oAQgl/96lc52921axdvetObCIfDrF27ls2bNwM6QnPppZfS09ODEAIhBP/yL/8yCZ/UYDBUCkaQGAyGHHbu3MmZZ57JBRdcwDPPPMNPf/pTHnnkEa644oqCy3uex7nnnks4HOaJJ57gO9/5Dp/5zGcKLvuZz3yGT3ziEzz11FMcc8wxvPe978V1XU455RRuueUWamtrOXDgAAcOHOATn/jERH5Mg8FQYZghG4NhlvGb3/yG6urqnGme52We33TTTVx00UVcddVVABx99NHceuutrF+/no0bNxIMBnPWvf/++9m5cycPPfQQLS0tAPz7v/87b33rW4e89yc+8Qne+c53AnDDDTewevVqduzYwYoVK6irq0MIkdmGwWCYXRhBYjDMMt70pjexcePGnGlPPPEE73//+wF4+umneeaZZ/jhD3+Yma+UQkrJ7t27WblyZc66L7zwAgsXLswREieddFLB9z7++OMzz+fPnw/AwYMHWbFixdg+lMFgmPYYQWIwzDKqqqpYvnx5zrR9+/Zlnkci/3/7dquiQBSGcfwR0WQRFMEgwiA2QcEi2vQajBZBg2icIl6A4LWoF2AQHLMYDDpJk2BzMOqGhV3cL3Zx4TC7/1+aMB/vaQ9nnuOp1Wqp2+2+ezaVSj307VAo9HIdCAQkSdfr9aF3AvgbCCQA7hQKBW02m3eh5TPZbFaHw0HH41GJRELS87HgnwqHw3e/jgD8L5RaAdyxbVvL5VKdTker1Uq73U7T6fTTUmutVpNlWWo0Glqv13IcR/1+X9LrLsh3pNNpeZ6n2Wym0+mky+XyK+sB4A8EEgB3crmc5vO5ttutKpWK8vm8BoOBksnkh/cHg0FNJhN5nqdisahms/lyyuZtAfYrpVJJ7XZb9Xpd8Xhcw+HwV9YDwB8Ct9vtZnoIAH+L4zgql8tyXVeWZZkeB4APEEgAPGw8HisSiSiTych1XfV6PUWjUS0WC9OjAfAJSq0AHnY+n2Xbtvb7vWKxmKrVqkajkemxAPgIOyQAAMA4Sq0AAMA4AgkAADCOQAIAAIwjkAAAAOMIJAAAwDgCCQAAMI5AAgAAjCOQAAAA454AprqpJPF7vh4AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols = df[['Height','Weight', 'Body_Temp', 'Duration', 'Heart_Rate']]"
      ],
      "metadata": {
        "id": "X0d-B08giV9p"
      },
      "id": "X0d-B08giV9p",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.get_dummies(df, columns=['Gender'])"
      ],
      "metadata": {
        "id": "9hnTPuPXjcrU"
      },
      "id": "9hnTPuPXjcrU",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Gender_0'] = df['Gender_0'].map({True: 1, False: 0})"
      ],
      "metadata": {
        "id": "H_CuKFRElkAa"
      },
      "id": "H_CuKFRElkAa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Gender_1'] = df['Gender_0'].map({True: 1, False: 0})"
      ],
      "metadata": {
        "id": "LTEH45u-mg6a"
      },
      "id": "LTEH45u-mg6a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Sex']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "0OH6Lkk8lffq",
        "outputId": "05206015-763f-4947-bc33-ce34c332c417"
      },
      "id": "0OH6Lkk8lffq",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0         0\n",
              "1         1\n",
              "2         1\n",
              "3         0\n",
              "4         1\n",
              "         ..\n",
              "749995    0\n",
              "749996    1\n",
              "749997    0\n",
              "749998    0\n",
              "749999    1\n",
              "Name: Sex, Length: 750000, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create Male and Female binary columns\n",
        "df['Male'] = (df['Sex'] == 0).astype(int)\n",
        "df['Female'] = (df['Sex'] == 1).astype(int)\n"
      ],
      "metadata": {
        "id": "wzm1OM3PXx_e"
      },
      "id": "wzm1OM3PXx_e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in numerical_cols:\n",
        "    df[f'{col}_X_Male'] = df[col] * df[\"Male\"]\n",
        "    df[f'{col}_X_Female'] = df[col] * df[\"Female\"]"
      ],
      "metadata": {
        "id": "dMUHlPCQYith"
      },
      "id": "dMUHlPCQYith",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "id": "Xlsiq31AcOTM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "b9a777c6-02b5-484f-ab36-a8cf22f20a6b"
      },
      "id": "Xlsiq31AcOTM",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  Height_X_Male  Height_X_Female  \\\n",
              "0          150.0      5.017280  ...          189.0              0.0   \n",
              "1           34.0      3.555348  ...            0.0            163.0   \n",
              "2           29.0      3.401197  ...            0.0            161.0   \n",
              "3          140.0      4.948760  ...          192.0              0.0   \n",
              "4          146.0      4.990433  ...            0.0            166.0   \n",
              "...          ...           ...  ...            ...              ...   \n",
              "749995     230.0      5.442418  ...          193.0              0.0   \n",
              "749996      96.0      4.574711  ...            0.0            165.0   \n",
              "749997     221.0      5.402677  ...          162.0              0.0   \n",
              "749998     109.0      4.700480  ...          182.0              0.0   \n",
              "749999     103.0      4.644391  ...            0.0            171.0   \n",
              "\n",
              "        Weight_X_Male  Weight_X_Female  Body_Temp_X_Male  Body_Temp_X_Female  \\\n",
              "0                82.0              0.0              41.0                 0.0   \n",
              "1                 0.0             60.0               0.0                39.7   \n",
              "2                 0.0             64.0               0.0                39.8   \n",
              "3                90.0              0.0              40.7                 0.0   \n",
              "4                 0.0             61.0               0.0                40.6   \n",
              "...               ...              ...               ...                 ...   \n",
              "749995           97.0              0.0              40.9                 0.0   \n",
              "749996            0.0             63.0               0.0                40.5   \n",
              "749997           67.0              0.0              40.9                 0.0   \n",
              "749998           91.0              0.0              40.3                 0.0   \n",
              "749999            0.0             65.0               0.0                40.6   \n",
              "\n",
              "        Duration_X_Male  Duration_X_Female  Heart_Rate_X_Male  \\\n",
              "0                  26.0                0.0              101.0   \n",
              "1                   0.0                8.0                0.0   \n",
              "2                   0.0                7.0                0.0   \n",
              "3                  25.0                0.0              105.0   \n",
              "4                   0.0               25.0                0.0   \n",
              "...                 ...                ...                ...   \n",
              "749995             30.0                0.0              114.0   \n",
              "749996              0.0               18.0                0.0   \n",
              "749997             29.0                0.0              113.0   \n",
              "749998             17.0                0.0              102.0   \n",
              "749999              0.0               19.0                0.0   \n",
              "\n",
              "        Heart_Rate_X_Female  \n",
              "0                       0.0  \n",
              "1                      85.0  \n",
              "2                      84.0  \n",
              "3                       0.0  \n",
              "4                     102.0  \n",
              "...                     ...  \n",
              "749995                  0.0  \n",
              "749996                 92.0  \n",
              "749997                  0.0  \n",
              "749998                  0.0  \n",
              "749999                 97.0  \n",
              "\n",
              "[750000 rows x 63 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ae9ccad-50f3-4e0f-8f24-0fc2fa70c688\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>Height_X_Male</th>\n",
              "      <th>Height_X_Female</th>\n",
              "      <th>Weight_X_Male</th>\n",
              "      <th>Weight_X_Female</th>\n",
              "      <th>Body_Temp_X_Male</th>\n",
              "      <th>Body_Temp_X_Female</th>\n",
              "      <th>Duration_X_Male</th>\n",
              "      <th>Duration_X_Female</th>\n",
              "      <th>Heart_Rate_X_Male</th>\n",
              "      <th>Heart_Rate_X_Female</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>189.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>163.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>85.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>84.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>192.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>102.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>193.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>165.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>92.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>162.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>182.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>171.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>0.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>97.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 63 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ae9ccad-50f3-4e0f-8f24-0fc2fa70c688')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3ae9ccad-50f3-4e0f-8f24-0fc2fa70c688 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3ae9ccad-50f3-4e0f-8f24-0fc2fa70c688');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-826d85be-f2bb-45c5-849c-96e2a2fb4870\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-826d85be-f2bb-45c5-849c-96e2a2fb4870')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-826d85be-f2bb-45c5-849c-96e2a2fb4870 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_166d69aa-3283-49b4-9427-d74f2abd29dc\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_166d69aa-3283-49b4-9427-d74f2abd29dc button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bin_cols = ['Age_bin', 'HR_bin','Duration_bin','Temp_bin']"
      ],
      "metadata": {
        "id": "g46REVXAggTe"
      },
      "id": "g46REVXAggTe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def add_binwise_target_stats(df, bin_cols, target_col='Calories_log', stats=['mean', 'median', 'std']):\n",
        "    df_encoded = df.copy()\n",
        "\n",
        "    for bin_col in bin_cols:\n",
        "        # Group by bin and calculate target statistics\n",
        "        agg_df = df_encoded.groupby(bin_col)[target_col].agg(stats).reset_index()\n",
        "\n",
        "        # Rename columns\n",
        "        agg_df.columns = [bin_col] + [f'{bin_col}_target_{stat}' for stat in stats]\n",
        "\n",
        "        # Merge back to original dataframe\n",
        "        df_encoded = df_encoded.merge(agg_df, on=bin_col, how='left')\n",
        "\n",
        "    return df_encoded\n"
      ],
      "metadata": {
        "id": "H4S6Jlq3f_5i"
      },
      "id": "H4S6Jlq3f_5i",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bin_cols = ['Age_bin', 'HR_bin', 'Duration_bin', 'Temp_bin']\n",
        "df = add_binwise_target_stats(df, bin_cols, target_col='Calories_log')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LI6tQwYPhFgB",
        "outputId": "cade1264-a794-41cf-af26-54ba5a352cc3"
      },
      "id": "LI6tQwYPhFgB",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-67-f8d3c43c0a6b>:6: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  agg_df = df_encoded.groupby(bin_col)[target_col].agg(stats).reset_index()\n",
            "<ipython-input-67-f8d3c43c0a6b>:6: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  agg_df = df_encoded.groupby(bin_col)[target_col].agg(stats).reset_index()\n",
            "<ipython-input-67-f8d3c43c0a6b>:6: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  agg_df = df_encoded.groupby(bin_col)[target_col].agg(stats).reset_index()\n",
            "<ipython-input-67-f8d3c43c0a6b>:6: FutureWarning: The default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n",
            "  agg_df = df_encoded.groupby(bin_col)[target_col].agg(stats).reset_index()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "AzrDTlqjg9Z5",
        "outputId": "2f59cdfe-903b-4b77-f92b-953bf9608679"
      },
      "id": "AzrDTlqjg9Z5",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            id  Sex  Age  Height  Weight  Duration  Heart_Rate  Body_Temp  \\\n",
              "0            0    0   36   189.0    82.0      26.0       101.0       41.0   \n",
              "1            1    1   64   163.0    60.0       8.0        85.0       39.7   \n",
              "2            2    1   51   161.0    64.0       7.0        84.0       39.8   \n",
              "3            3    0   20   192.0    90.0      25.0       105.0       40.7   \n",
              "4            4    1   38   166.0    61.0      25.0       102.0       40.6   \n",
              "...        ...  ...  ...     ...     ...       ...         ...        ...   \n",
              "749995  749995    0   28   193.0    97.0      30.0       114.0       40.9   \n",
              "749996  749996    1   64   165.0    63.0      18.0        92.0       40.5   \n",
              "749997  749997    0   60   162.0    67.0      29.0       113.0       40.9   \n",
              "749998  749998    0   45   182.0    91.0      17.0       102.0       40.3   \n",
              "749999  749999    1   39   171.0    65.0      19.0        97.0       40.6   \n",
              "\n",
              "        Calories  Calories_log  ...  Age_bin_target_std  HR_bin_target_mean  \\\n",
              "0          150.0      5.017280  ...            0.951446            4.585202   \n",
              "1           34.0      3.555348  ...            0.915592            3.083631   \n",
              "2           29.0      3.401197  ...            0.944149            3.083631   \n",
              "3          140.0      4.948760  ...            0.986483            4.585202   \n",
              "4          146.0      4.990433  ...            0.951446            4.585202   \n",
              "...          ...           ...  ...                 ...                 ...   \n",
              "749995     230.0      5.442418  ...            1.006705            5.311860   \n",
              "749996      96.0      4.574711  ...            0.915592            4.585202   \n",
              "749997     221.0      5.402677  ...            0.944149            5.311860   \n",
              "749998     109.0      4.700480  ...            0.922530            4.585202   \n",
              "749999     103.0      4.644391  ...            0.951446            4.585202   \n",
              "\n",
              "        HR_bin_target_median  HR_bin_target_std  Duration_bin_target_mean  \\\n",
              "0                   4.672829           0.537116                  5.080691   \n",
              "1                   3.178054           0.763550                  3.518998   \n",
              "2                   3.178054           0.763550                  3.518998   \n",
              "3                   4.672829           0.537116                  5.080691   \n",
              "4                   4.672829           0.537116                  5.080691   \n",
              "...                      ...                ...                       ...   \n",
              "749995              5.313206           0.144463                  5.080691   \n",
              "749996              4.672829           0.537116                  4.351209   \n",
              "749997              5.313206           0.144463                  5.080691   \n",
              "749998              4.672829           0.537116                  4.351209   \n",
              "749999              4.672829           0.537116                  4.351209   \n",
              "\n",
              "        Duration_bin_target_median  Duration_bin_target_std  \\\n",
              "0                         5.087596                 0.217437   \n",
              "1                         3.555348                 0.305606   \n",
              "2                         3.555348                 0.305606   \n",
              "3                         5.087596                 0.217437   \n",
              "4                         5.087596                 0.217437   \n",
              "...                            ...                      ...   \n",
              "749995                    5.087596                 0.217437   \n",
              "749996                    4.369448                 0.301555   \n",
              "749997                    5.087596                 0.217437   \n",
              "749998                    4.369448                 0.301555   \n",
              "749999                    4.369448                 0.301555   \n",
              "\n",
              "        Temp_bin_target_mean  Temp_bin_target_median  Temp_bin_target_std  \n",
              "0                   4.776397                4.820282             0.413858  \n",
              "1                   3.611024                3.637586             0.453131  \n",
              "2                   3.611024                3.637586             0.453131  \n",
              "3                   4.776397                4.820282             0.413858  \n",
              "4                   4.776397                4.820282             0.413858  \n",
              "...                      ...                     ...                  ...  \n",
              "749995              4.776397                4.820282             0.413858  \n",
              "749996              4.776397                4.820282             0.413858  \n",
              "749997              4.776397                4.820282             0.413858  \n",
              "749998              4.776397                4.820282             0.413858  \n",
              "749999              4.776397                4.820282             0.413858  \n",
              "\n",
              "[750000 rows x 75 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a6459556-78a6-425f-ad04-ef31c92bf0ba\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Age</th>\n",
              "      <th>Height</th>\n",
              "      <th>Weight</th>\n",
              "      <th>Duration</th>\n",
              "      <th>Heart_Rate</th>\n",
              "      <th>Body_Temp</th>\n",
              "      <th>Calories</th>\n",
              "      <th>Calories_log</th>\n",
              "      <th>...</th>\n",
              "      <th>Age_bin_target_std</th>\n",
              "      <th>HR_bin_target_mean</th>\n",
              "      <th>HR_bin_target_median</th>\n",
              "      <th>HR_bin_target_std</th>\n",
              "      <th>Duration_bin_target_mean</th>\n",
              "      <th>Duration_bin_target_median</th>\n",
              "      <th>Duration_bin_target_std</th>\n",
              "      <th>Temp_bin_target_mean</th>\n",
              "      <th>Temp_bin_target_median</th>\n",
              "      <th>Temp_bin_target_std</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36</td>\n",
              "      <td>189.0</td>\n",
              "      <td>82.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>101.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>5.017280</td>\n",
              "      <td>...</td>\n",
              "      <td>0.951446</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>5.080691</td>\n",
              "      <td>5.087596</td>\n",
              "      <td>0.217437</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>163.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>39.7</td>\n",
              "      <td>34.0</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>...</td>\n",
              "      <td>0.915592</td>\n",
              "      <td>3.083631</td>\n",
              "      <td>3.178054</td>\n",
              "      <td>0.763550</td>\n",
              "      <td>3.518998</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>0.305606</td>\n",
              "      <td>3.611024</td>\n",
              "      <td>3.637586</td>\n",
              "      <td>0.453131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>51</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>39.8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>3.401197</td>\n",
              "      <td>...</td>\n",
              "      <td>0.944149</td>\n",
              "      <td>3.083631</td>\n",
              "      <td>3.178054</td>\n",
              "      <td>0.763550</td>\n",
              "      <td>3.518998</td>\n",
              "      <td>3.555348</td>\n",
              "      <td>0.305606</td>\n",
              "      <td>3.611024</td>\n",
              "      <td>3.637586</td>\n",
              "      <td>0.453131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>192.0</td>\n",
              "      <td>90.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>105.0</td>\n",
              "      <td>40.7</td>\n",
              "      <td>140.0</td>\n",
              "      <td>4.948760</td>\n",
              "      <td>...</td>\n",
              "      <td>0.986483</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>5.080691</td>\n",
              "      <td>5.087596</td>\n",
              "      <td>0.217437</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>166.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>146.0</td>\n",
              "      <td>4.990433</td>\n",
              "      <td>...</td>\n",
              "      <td>0.951446</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>5.080691</td>\n",
              "      <td>5.087596</td>\n",
              "      <td>0.217437</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749995</th>\n",
              "      <td>749995</td>\n",
              "      <td>0</td>\n",
              "      <td>28</td>\n",
              "      <td>193.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>30.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>230.0</td>\n",
              "      <td>5.442418</td>\n",
              "      <td>...</td>\n",
              "      <td>1.006705</td>\n",
              "      <td>5.311860</td>\n",
              "      <td>5.313206</td>\n",
              "      <td>0.144463</td>\n",
              "      <td>5.080691</td>\n",
              "      <td>5.087596</td>\n",
              "      <td>0.217437</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749996</th>\n",
              "      <td>749996</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>165.0</td>\n",
              "      <td>63.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>40.5</td>\n",
              "      <td>96.0</td>\n",
              "      <td>4.574711</td>\n",
              "      <td>...</td>\n",
              "      <td>0.915592</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>4.351209</td>\n",
              "      <td>4.369448</td>\n",
              "      <td>0.301555</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749997</th>\n",
              "      <td>749997</td>\n",
              "      <td>0</td>\n",
              "      <td>60</td>\n",
              "      <td>162.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>40.9</td>\n",
              "      <td>221.0</td>\n",
              "      <td>5.402677</td>\n",
              "      <td>...</td>\n",
              "      <td>0.944149</td>\n",
              "      <td>5.311860</td>\n",
              "      <td>5.313206</td>\n",
              "      <td>0.144463</td>\n",
              "      <td>5.080691</td>\n",
              "      <td>5.087596</td>\n",
              "      <td>0.217437</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749998</th>\n",
              "      <td>749998</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>182.0</td>\n",
              "      <td>91.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>40.3</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.700480</td>\n",
              "      <td>...</td>\n",
              "      <td>0.922530</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>4.351209</td>\n",
              "      <td>4.369448</td>\n",
              "      <td>0.301555</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>749999</th>\n",
              "      <td>749999</td>\n",
              "      <td>1</td>\n",
              "      <td>39</td>\n",
              "      <td>171.0</td>\n",
              "      <td>65.0</td>\n",
              "      <td>19.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>40.6</td>\n",
              "      <td>103.0</td>\n",
              "      <td>4.644391</td>\n",
              "      <td>...</td>\n",
              "      <td>0.951446</td>\n",
              "      <td>4.585202</td>\n",
              "      <td>4.672829</td>\n",
              "      <td>0.537116</td>\n",
              "      <td>4.351209</td>\n",
              "      <td>4.369448</td>\n",
              "      <td>0.301555</td>\n",
              "      <td>4.776397</td>\n",
              "      <td>4.820282</td>\n",
              "      <td>0.413858</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>750000 rows × 75 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a6459556-78a6-425f-ad04-ef31c92bf0ba')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a6459556-78a6-425f-ad04-ef31c92bf0ba button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a6459556-78a6-425f-ad04-ef31c92bf0ba');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-8924e600-773a-418d-b20e-5b3a291bb7c1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8924e600-773a-418d-b20e-5b3a291bb7c1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-8924e600-773a-418d-b20e-5b3a291bb7c1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_abc0ae18-38a0-4c55-ba44-eb3449e22d22\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_abc0ae18-38a0-4c55-ba44-eb3449e22d22 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns.tolist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ore_0WjjiGNh",
        "outputId": "1807ec7b-4f03-450e-f0ee-8941f355a0cf"
      },
      "id": "ore_0WjjiGNh",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['id',\n",
              " 'Sex',\n",
              " 'Age',\n",
              " 'Height',\n",
              " 'Weight',\n",
              " 'Duration',\n",
              " 'Heart_Rate',\n",
              " 'Body_Temp',\n",
              " 'Calories',\n",
              " 'Calories_log',\n",
              " 'Height_m',\n",
              " 'BMI',\n",
              " 'BMI*Body_Temp',\n",
              " 'Effort',\n",
              " 'Age*BMI',\n",
              " 'body*weight',\n",
              " 'Weight*Dration',\n",
              " 'Age_Duration',\n",
              " 'Age_Adjusted_Effort',\n",
              " 'sex*heart',\n",
              " 'bodytmepduration',\n",
              " 'hr_percent',\n",
              " 'effort/weight',\n",
              " 'Heart_Rate/body_Temp',\n",
              " 'BMR',\n",
              " 'BMR × Duration',\n",
              " 'LBM',\n",
              " 'BMR_katch',\n",
              " 'HR_per_BMR',\n",
              " 'Temp_Slope',\n",
              " 'HR_Slope',\n",
              " 'dur_over_temp_delta',\n",
              " 'Micro_Effort',\n",
              " 'cluster_group',\n",
              " 'Duration_sqaured',\n",
              " 'Weight**2/Duration_sqaured',\n",
              " 'log(Heart_Rate)/Body_Temp',\n",
              " '1/(Age*Duration_sqaured)',\n",
              " 'Age**3/Duration_sqaured',\n",
              " 'log(Duration_sqaured)/Duration_sqaured',\n",
              " 'Age**3*Sex',\n",
              " 'Sex/Duration_sqaured',\n",
              " 'Weight_lb',\n",
              " 'VO2_max',\n",
              " 'VO2_per_kg',\n",
              " 'Age_bin',\n",
              " 'HR_bin',\n",
              " 'Duration_bin',\n",
              " 'Temp_bin',\n",
              " 'Gender_0',\n",
              " 'Gender_1',\n",
              " 'Male',\n",
              " 'Female',\n",
              " 'Height_X_Male',\n",
              " 'Height_X_Female',\n",
              " 'Weight_X_Male',\n",
              " 'Weight_X_Female',\n",
              " 'Body_Temp_X_Male',\n",
              " 'Body_Temp_X_Female',\n",
              " 'Duration_X_Male',\n",
              " 'Duration_X_Female',\n",
              " 'Heart_Rate_X_Male',\n",
              " 'Heart_Rate_X_Female',\n",
              " 'Age_bin_target_mean',\n",
              " 'Age_bin_target_median',\n",
              " 'Age_bin_target_std',\n",
              " 'HR_bin_target_mean',\n",
              " 'HR_bin_target_median',\n",
              " 'HR_bin_target_std',\n",
              " 'Duration_bin_target_mean',\n",
              " 'Duration_bin_target_median',\n",
              " 'Duration_bin_target_std',\n",
              " 'Temp_bin_target_mean',\n",
              " 'Temp_bin_target_median',\n",
              " 'Temp_bin_target_std']"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6983b70c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6983b70c",
        "outputId": "db8ccbde-ede5-48a8-d279-a65bc62b6a75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting optuna\n",
            "  Downloading optuna-4.3.0-py3-none-any.whl.metadata (17 kB)\n",
            "Collecting alembic>=1.5.0 (from optuna)\n",
            "  Downloading alembic-1.16.1-py3-none-any.whl.metadata (7.3 kB)\n",
            "Collecting colorlog (from optuna)\n",
            "  Downloading colorlog-6.9.0-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from optuna) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from optuna) (24.2)\n",
            "Requirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.11/dist-packages (from optuna) (2.0.41)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from optuna) (4.67.1)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from optuna) (6.0.2)\n",
            "Requirement already satisfied: Mako in /usr/lib/python3/dist-packages (from alembic>=1.5.0->optuna) (1.1.3)\n",
            "Requirement already satisfied: typing-extensions>=4.12 in /usr/local/lib/python3.11/dist-packages (from alembic>=1.5.0->optuna) (4.13.2)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.2.2)\n",
            "Downloading optuna-4.3.0-py3-none-any.whl (386 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m386.6/386.6 kB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading alembic-1.16.1-py3-none-any.whl (242 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m242.5/242.5 kB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading colorlog-6.9.0-py3-none-any.whl (11 kB)\n",
            "Installing collected packages: colorlog, alembic, optuna\n",
            "Successfully installed alembic-1.16.1 colorlog-6.9.0 optuna-4.3.0\n",
            "Collecting catboost\n",
            "  Downloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl.metadata (1.2 kB)\n",
            "Requirement already satisfied: graphviz in /usr/local/lib/python3.11/dist-packages (from catboost) (0.20.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (from catboost) (3.10.0)\n",
            "Requirement already satisfied: numpy<3.0,>=1.16.0 in /usr/local/lib/python3.11/dist-packages (from catboost) (1.26.4)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.11/dist-packages (from catboost) (2.2.2)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from catboost) (1.15.3)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.11/dist-packages (from catboost) (5.24.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from catboost) (1.17.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24->catboost) (2025.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.3.2)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (4.58.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (1.4.8)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (24.2)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (11.2.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib->catboost) (3.2.3)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly->catboost) (9.1.2)\n",
            "Downloading catboost-1.2.8-cp311-cp311-manylinux2014_x86_64.whl (99.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.2/99.2 MB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: catboost\n",
            "Successfully installed catboost-1.2.8\n",
            "Requirement already satisfied: lightgbm in /usr/local/lib/python3.11/dist-packages (4.5.0)\n",
            "Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from lightgbm) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from lightgbm) (1.15.3)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.11/dist-packages (2.1.4)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.26.4)\n",
            "Requirement already satisfied: nvidia-nccl-cu12 in /usr/local/lib/python3.11/dist-packages (from xgboost) (2.21.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from xgboost) (1.15.3)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:43:26,422] A new study created in memory with name: no-name-7565e1ad-3e95-47f7-83df-2d5924ded0db\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.249301 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:44:30,340] Trial 0 finished with value: 0.01746796556407445 and parameters: {'n_estimators': 772, 'learning_rate': 0.20500773411307716, 'max_depth': 3, 'num_leaves': 95, 'min_child_samples': 97, 'subsample': 0.9078539001224581, 'colsample_bytree': 0.8309812144597866, 'reg_alpha': 0.2911441559878917, 'reg_lambda': 0.5360759806097932}. Best is trial 0 with value: 0.01746796556407445.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.396206 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:45:11,323] Trial 1 finished with value: 0.017379729589115284 and parameters: {'n_estimators': 266, 'learning_rate': 0.09019383938878231, 'max_depth': 10, 'num_leaves': 54, 'min_child_samples': 63, 'subsample': 0.9670028068330571, 'colsample_bytree': 0.8160318609297849, 'reg_alpha': 0.19988398089059722, 'reg_lambda': 0.9794352131423639}. Best is trial 1 with value: 0.017379729589115284.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.310151 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:47:34,585] Trial 2 finished with value: 0.017307618948326726 and parameters: {'n_estimators': 825, 'learning_rate': 0.03481193937247092, 'max_depth': 9, 'num_leaves': 54, 'min_child_samples': 66, 'subsample': 0.8631612971699189, 'colsample_bytree': 0.9339925655249857, 'reg_alpha': 0.14258004817086956, 'reg_lambda': 0.028015466512076648}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.260455 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:48:57,892] Trial 3 finished with value: 0.017385336454507124 and parameters: {'n_estimators': 838, 'learning_rate': 0.10790894541457709, 'max_depth': 5, 'num_leaves': 26, 'min_child_samples': 20, 'subsample': 0.9108158704793318, 'colsample_bytree': 0.7406747668165957, 'reg_alpha': 0.938770022615489, 'reg_lambda': 0.9888752098563999}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.241471 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:50:03,983] Trial 4 finished with value: 0.017312102072373516 and parameters: {'n_estimators': 446, 'learning_rate': 0.05915504851218075, 'max_depth': 7, 'num_leaves': 101, 'min_child_samples': 54, 'subsample': 0.7550878027361814, 'colsample_bytree': 0.8809605580659003, 'reg_alpha': 0.10568881954826814, 'reg_lambda': 0.2880971048611424}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.254766 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:51:20,751] Trial 5 finished with value: 0.017524127330349644 and parameters: {'n_estimators': 691, 'learning_rate': 0.21517896648122264, 'max_depth': 6, 'num_leaves': 85, 'min_child_samples': 25, 'subsample': 0.9950601938782795, 'colsample_bytree': 0.7688856041175277, 'reg_alpha': 0.7863736632580034, 'reg_lambda': 0.8920329775450911}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.247936 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:51:46,275] Trial 6 finished with value: 0.01748995803780944 and parameters: {'n_estimators': 211, 'learning_rate': 0.15246020169604, 'max_depth': 6, 'num_leaves': 93, 'min_child_samples': 37, 'subsample': 0.8214924219718103, 'colsample_bytree': 0.6268745019447682, 'reg_alpha': 0.9070224717669487, 'reg_lambda': 0.6564808988104819}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.235270 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:52:13,394] Trial 7 finished with value: 0.017600044186351995 and parameters: {'n_estimators': 286, 'learning_rate': 0.2354103883106062, 'max_depth': 7, 'num_leaves': 23, 'min_child_samples': 35, 'subsample': 0.6141204871729365, 'colsample_bytree': 0.6405148985204782, 'reg_alpha': 0.309762664820148, 'reg_lambda': 0.23016057750640628}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.257163 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:53:12,314] Trial 8 finished with value: 0.017406001582387053 and parameters: {'n_estimators': 542, 'learning_rate': 0.11704933597249458, 'max_depth': 5, 'num_leaves': 65, 'min_child_samples': 76, 'subsample': 0.9598539308612876, 'colsample_bytree': 0.8447589533796234, 'reg_alpha': 0.9689143894222407, 'reg_lambda': 0.20469135546135286}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.075593 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:53:54,299] Trial 9 finished with value: 0.01756975129212315 and parameters: {'n_estimators': 369, 'learning_rate': 0.269509427062278, 'max_depth': 7, 'num_leaves': 49, 'min_child_samples': 34, 'subsample': 0.9527012920577344, 'colsample_bytree': 0.7121234263391393, 'reg_alpha': 0.9256466513010873, 'reg_lambda': 0.7787427794202462}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.243908 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:57:41,147] Trial 10 finished with value: 0.01733524090114072 and parameters: {'n_estimators': 979, 'learning_rate': 0.012220853045188385, 'max_depth': 9, 'num_leaves': 121, 'min_child_samples': 88, 'subsample': 0.8012352598137932, 'colsample_bytree': 0.994022955347385, 'reg_alpha': 0.5426410449380191, 'reg_lambda': 0.05126004867028231}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.254748 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 14:59:27,665] Trial 11 finished with value: 0.017315871781273584 and parameters: {'n_estimators': 508, 'learning_rate': 0.0280830498594439, 'max_depth': 9, 'num_leaves': 122, 'min_child_samples': 54, 'subsample': 0.7056498419384406, 'colsample_bytree': 0.9258347720873952, 'reg_alpha': 0.0007127078384133734, 'reg_lambda': 0.3076191164102422}. Best is trial 2 with value: 0.017307618948326726.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.067754 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:00:55,558] Trial 12 finished with value: 0.017302603020026702 and parameters: {'n_estimators': 629, 'learning_rate': 0.05740965161717921, 'max_depth': 8, 'num_leaves': 103, 'min_child_samples': 56, 'subsample': 0.7254084419730469, 'colsample_bytree': 0.9081287489899253, 'reg_alpha': 0.042658118925982674, 'reg_lambda': 0.027600962576699584}. Best is trial 12 with value: 0.017302603020026702.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.069065 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:02:32,686] Trial 13 finished with value: 0.01727212074791803 and parameters: {'n_estimators': 675, 'learning_rate': 0.0591043770717488, 'max_depth': 9, 'num_leaves': 74, 'min_child_samples': 69, 'subsample': 0.6884289299674853, 'colsample_bytree': 0.9658951397076979, 'reg_alpha': 0.4662597269595745, 'reg_lambda': 0.012580875404420355}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.068450 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:04:04,082] Trial 14 finished with value: 0.017295186636336134 and parameters: {'n_estimators': 658, 'learning_rate': 0.07024642721588799, 'max_depth': 8, 'num_leaves': 77, 'min_child_samples': 79, 'subsample': 0.6693537944561219, 'colsample_bytree': 0.9968306832339859, 'reg_alpha': 0.4962788517401303, 'reg_lambda': 0.12141027177435593}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.118273 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:04:24,160] Trial 15 finished with value: 0.017491865011003912 and parameters: {'n_estimators': 104, 'learning_rate': 0.16336198835309515, 'max_depth': 10, 'num_leaves': 73, 'min_child_samples': 76, 'subsample': 0.6333299458260075, 'colsample_bytree': 0.9641555059654727, 'reg_alpha': 0.5400085234794116, 'reg_lambda': 0.4120496607744737}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.070415 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:05:58,563] Trial 16 finished with value: 0.017298534309359785 and parameters: {'n_estimators': 655, 'learning_rate': 0.07960846639404108, 'max_depth': 8, 'num_leaves': 77, 'min_child_samples': 79, 'subsample': 0.6695310931361784, 'colsample_bytree': 0.991869451743804, 'reg_alpha': 0.6670425917943725, 'reg_lambda': 0.14932457425259546}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.243383 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:07:56,333] Trial 17 finished with value: 0.01741796025364291 and parameters: {'n_estimators': 977, 'learning_rate': 0.1332484694684435, 'max_depth': 8, 'num_leaves': 42, 'min_child_samples': 98, 'subsample': 0.6611110501358213, 'colsample_bytree': 0.876132062333316, 'reg_alpha': 0.4199883862707604, 'reg_lambda': 0.40684007948865747}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.066500 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:09:37,917] Trial 18 finished with value: 0.017329997735702388 and parameters: {'n_estimators': 700, 'learning_rate': 0.06992137635608814, 'max_depth': 10, 'num_leaves': 63, 'min_child_samples': 84, 'subsample': 0.7505506146056385, 'colsample_bytree': 0.9516250558454177, 'reg_alpha': 0.4360875202916916, 'reg_lambda': 0.13260187603022694}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.071064 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:10:37,193] Trial 19 finished with value: 0.017459051495982945 and parameters: {'n_estimators': 576, 'learning_rate': 0.18581270964232027, 'max_depth': 9, 'num_leaves': 36, 'min_child_samples': 69, 'subsample': 0.695368857314247, 'colsample_bytree': 0.9962156917388595, 'reg_alpha': 0.6608284417261806, 'reg_lambda': 0.5501119213558174}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.079476 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:11:16,896] Trial 20 finished with value: 0.018066209365371566 and parameters: {'n_estimators': 433, 'learning_rate': 0.04063689962981219, 'max_depth': 3, 'num_leaves': 83, 'min_child_samples': 89, 'subsample': 0.6015750281463642, 'colsample_bytree': 0.885631445702354, 'reg_alpha': 0.626973451566861, 'reg_lambda': 0.3776296172892509}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.068607 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:12:54,636] Trial 21 finished with value: 0.01732622952130083 and parameters: {'n_estimators': 662, 'learning_rate': 0.0865469117992636, 'max_depth': 8, 'num_leaves': 77, 'min_child_samples': 76, 'subsample': 0.666517102884981, 'colsample_bytree': 0.9710844117437016, 'reg_alpha': 0.6869178079229239, 'reg_lambda': 0.14803409868614045}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.068440 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:14:39,279] Trial 22 finished with value: 0.01734248943129317 and parameters: {'n_estimators': 761, 'learning_rate': 0.08624841284988742, 'max_depth': 8, 'num_leaves': 63, 'min_child_samples': 83, 'subsample': 0.6599180092345317, 'colsample_bytree': 0.9962898850148505, 'reg_alpha': 0.7644509467186715, 'reg_lambda': 0.12187994374946098}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.066442 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:16:36,949] Trial 23 finished with value: 0.017427751108112993 and parameters: {'n_estimators': 885, 'learning_rate': 0.12632633325088183, 'max_depth': 8, 'num_leaves': 85, 'min_child_samples': 70, 'subsample': 0.7559905998183339, 'colsample_bytree': 0.9609791974645944, 'reg_alpha': 0.4517271333034956, 'reg_lambda': 0.010267557307992576}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.253653 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:18:22,583] Trial 24 finished with value: 0.01729860364886563 and parameters: {'n_estimators': 602, 'learning_rate': 0.06296478798597384, 'max_depth': 9, 'num_leaves': 113, 'min_child_samples': 80, 'subsample': 0.6867109787914522, 'colsample_bytree': 0.9201498002237241, 'reg_alpha': 0.3374376690376967, 'reg_lambda': 0.12819694225328637}. Best is trial 13 with value: 0.01727212074791803.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.071558 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 600000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141163\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[I 2025-05-28 15:19:49,046] A new study created in memory with name: no-name-11af44bf-dc91-43be-b18e-f118c97ecd67\n",
            "[I 2025-05-28 15:20:20,488] Trial 0 finished with value: 0.01815821708161682 and parameters: {'n_estimators': 414, 'learning_rate': 0.0399878624391154, 'max_depth': 3, 'subsample': 0.6371598548941736, 'colsample_bytree': 0.762242860894129, 'reg_alpha': 0.9118996955826956, 'reg_lambda': 0.353448056485939}. Best is trial 0 with value: 0.01815821708161682.\n",
            "[I 2025-05-28 15:22:16,870] Trial 1 finished with value: 0.01763211477682968 and parameters: {'n_estimators': 623, 'learning_rate': 0.08985422047542939, 'max_depth': 10, 'subsample': 0.9663827911785715, 'colsample_bytree': 0.631339167572382, 'reg_alpha': 0.49654287325203217, 'reg_lambda': 0.5219007024176544}. Best is trial 1 with value: 0.01763211477682968.\n",
            "[I 2025-05-28 15:22:55,998] Trial 2 finished with value: 0.017560803819276462 and parameters: {'n_estimators': 433, 'learning_rate': 0.15645856473403605, 'max_depth': 5, 'subsample': 0.6398635221364214, 'colsample_bytree': 0.6809182467681425, 'reg_alpha': 0.45268726556150085, 'reg_lambda': 0.905740685200392}. Best is trial 2 with value: 0.017560803819276462.\n",
            "[I 2025-05-28 15:23:50,550] Trial 3 finished with value: 0.017971062983322447 and parameters: {'n_estimators': 938, 'learning_rate': 0.08785504410936232, 'max_depth': 2, 'subsample': 0.9768244401745204, 'colsample_bytree': 0.8765286791538128, 'reg_alpha': 0.5549575419554529, 'reg_lambda': 0.7443183928827211}. Best is trial 2 with value: 0.017560803819276462.\n",
            "[I 2025-05-28 15:24:12,464] Trial 4 finished with value: 0.022681229791438797 and parameters: {'n_estimators': 421, 'learning_rate': 0.052053896606761525, 'max_depth': 1, 'subsample': 0.8836577833970272, 'colsample_bytree': 0.7862567993930989, 'reg_alpha': 0.3221625833515691, 'reg_lambda': 0.9083665477720414}. Best is trial 2 with value: 0.017560803819276462.\n",
            "[I 2025-05-28 15:25:08,218] Trial 5 finished with value: 0.017849305427663116 and parameters: {'n_estimators': 325, 'learning_rate': 0.21008229569998502, 'max_depth': 9, 'subsample': 0.9043178493533555, 'colsample_bytree': 0.9898651948390669, 'reg_alpha': 0.8911822769132667, 'reg_lambda': 0.5549189588835874}. Best is trial 2 with value: 0.017560803819276462.\n",
            "[I 2025-05-28 15:26:19,503] Trial 6 finished with value: 0.018397060779731494 and parameters: {'n_estimators': 324, 'learning_rate': 0.23631006129403367, 'max_depth': 10, 'subsample': 0.8173959188828609, 'colsample_bytree': 0.988730753966975, 'reg_alpha': 0.43789860448294693, 'reg_lambda': 0.5294217973443464}. Best is trial 2 with value: 0.017560803819276462.\n",
            "[I 2025-05-28 15:27:20,223] Trial 7 finished with value: 0.017550233347727803 and parameters: {'n_estimators': 905, 'learning_rate': 0.07816335655904903, 'max_depth': 3, 'subsample': 0.9031174719160546, 'colsample_bytree': 0.6711263318896168, 'reg_alpha': 0.8530276056088013, 'reg_lambda': 0.3679363221753059}. Best is trial 7 with value: 0.017550233347727803.\n",
            "[I 2025-05-28 15:28:16,759] Trial 8 finished with value: 0.01735634518170537 and parameters: {'n_estimators': 612, 'learning_rate': 0.07268383607162925, 'max_depth': 5, 'subsample': 0.7960609226192971, 'colsample_bytree': 0.7973931435636363, 'reg_alpha': 0.9176751943934417, 'reg_lambda': 0.42413505626252557}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:28:28,705] Trial 9 finished with value: 0.019914301539187024 and parameters: {'n_estimators': 121, 'learning_rate': 0.2821554978218971, 'max_depth': 2, 'subsample': 0.9412270677159886, 'colsample_bytree': 0.6652371041126587, 'reg_alpha': 0.7559373642149065, 'reg_lambda': 0.37290690103715607}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:29:46,093] Trial 10 finished with value: 0.018169750263000297 and parameters: {'n_estimators': 730, 'learning_rate': 0.14362793017104064, 'max_depth': 7, 'subsample': 0.7247257243239598, 'colsample_bytree': 0.8668519484295002, 'reg_alpha': 0.010460731552602742, 'reg_lambda': 0.011489246282723742}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:31:19,025] Trial 11 finished with value: 0.01765695605470259 and parameters: {'n_estimators': 984, 'learning_rate': 0.020505932743561668, 'max_depth': 4, 'subsample': 0.8091732399989744, 'colsample_bytree': 0.7327642303966969, 'reg_alpha': 0.7284884512725289, 'reg_lambda': 0.17409224754175268}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:32:37,162] Trial 12 finished with value: 0.01747210368873866 and parameters: {'n_estimators': 807, 'learning_rate': 0.11316810185337, 'max_depth': 6, 'subsample': 0.763348967022686, 'colsample_bytree': 0.8544240115234683, 'reg_alpha': 0.9765546259411138, 'reg_lambda': 0.3051559885651086}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:34:14,104] Trial 13 finished with value: 0.01766254484354641 and parameters: {'n_estimators': 761, 'learning_rate': 0.1352495634708131, 'max_depth': 7, 'subsample': 0.733756107547786, 'colsample_bytree': 0.8559076297467076, 'reg_alpha': 0.9909541275198452, 'reg_lambda': 0.19893911745508283}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:35:24,715] Trial 14 finished with value: 0.01755774122171502 and parameters: {'n_estimators': 755, 'learning_rate': 0.1162434755978799, 'max_depth': 6, 'subsample': 0.7350806967616013, 'colsample_bytree': 0.9336105542494134, 'reg_alpha': 0.684685853779906, 'reg_lambda': 0.6841597695928169}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:36:50,235] Trial 15 finished with value: 0.017865874141784577 and parameters: {'n_estimators': 612, 'learning_rate': 0.18485686694232245, 'max_depth': 8, 'subsample': 0.7652495851234576, 'colsample_bytree': 0.8242639057354771, 'reg_alpha': 0.9827831038228529, 'reg_lambda': 0.25275721603492596}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:38:26,434] Trial 16 finished with value: 0.01766488151038547 and parameters: {'n_estimators': 855, 'learning_rate': 0.010916455685294126, 'max_depth': 5, 'subsample': 0.6790605890127659, 'colsample_bytree': 0.911533655469178, 'reg_alpha': 0.20305126060642642, 'reg_lambda': 0.009782856484281566}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:39:22,204] Trial 17 finished with value: 0.01744205184157251 and parameters: {'n_estimators': 548, 'learning_rate': 0.11368597656790219, 'max_depth': 6, 'subsample': 0.846962549191962, 'colsample_bytree': 0.7356270230679247, 'reg_alpha': 0.6309150825530594, 'reg_lambda': 0.6680073278199982}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:40:03,992] Trial 18 finished with value: 0.017548482980581915 and parameters: {'n_estimators': 512, 'learning_rate': 0.06631052212053022, 'max_depth': 4, 'subsample': 0.8548325697819364, 'colsample_bytree': 0.7229709973376731, 'reg_alpha': 0.6302062246479836, 'reg_lambda': 0.6981727491909973}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:41:14,439] Trial 19 finished with value: 0.01765879305337843 and parameters: {'n_estimators': 637, 'learning_rate': 0.17413582952398926, 'max_depth': 7, 'subsample': 0.8539213326874244, 'colsample_bytree': 0.6066590935332685, 'reg_alpha': 0.786910581677165, 'reg_lambda': 0.7806278909441249}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:42:25,558] Trial 20 finished with value: 0.01763561298519915 and parameters: {'n_estimators': 538, 'learning_rate': 0.1199930985320638, 'max_depth': 8, 'subsample': 0.8332021535091633, 'colsample_bytree': 0.801259403826501, 'reg_alpha': 0.5940445905781689, 'reg_lambda': 0.6162863767037036}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:43:48,793] Trial 21 finished with value: 0.017431158748273202 and parameters: {'n_estimators': 811, 'learning_rate': 0.10437502380833658, 'max_depth': 6, 'subsample': 0.7803698783847035, 'colsample_bytree': 0.7445854490756688, 'reg_alpha': 0.8332240830280747, 'reg_lambda': 0.4203469412815592}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:44:49,268] Trial 22 finished with value: 0.017397546676555027 and parameters: {'n_estimators': 707, 'learning_rate': 0.09756284741994689, 'max_depth': 5, 'subsample': 0.7848928581931267, 'colsample_bytree': 0.740993490422754, 'reg_alpha': 0.8102123986474091, 'reg_lambda': 0.4367307339431796}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:45:43,515] Trial 23 finished with value: 0.017531921908303338 and parameters: {'n_estimators': 675, 'learning_rate': 0.049506929157205934, 'max_depth': 4, 'subsample': 0.7750231289952476, 'colsample_bytree': 0.7707371110398428, 'reg_alpha': 0.8287595117702174, 'reg_lambda': 0.445144848879235}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:46:51,033] Trial 24 finished with value: 0.017360850001709238 and parameters: {'n_estimators': 819, 'learning_rate': 0.08875854264191652, 'max_depth': 5, 'subsample': 0.6832130098541931, 'colsample_bytree': 0.6957609660673588, 'reg_alpha': 0.8931563008302695, 'reg_lambda': 0.43922463179156923}. Best is trial 8 with value: 0.01735634518170537.\n",
            "[I 2025-05-28 15:47:43,640] A new study created in memory with name: no-name-01996aa2-5aa5-4994-9f99-8d54b186debc\n",
            "[I 2025-05-28 15:49:47,550] Trial 0 finished with value: 0.017432549507364777 and parameters: {'iterations': 847, 'learning_rate': 0.10923486587070394, 'depth': 5, 'l2_leaf_reg': 5.143758277970607, 'bagging_temperature': 3.4911509979496214, 'random_strength': 6.229959927414315}. Best is trial 0 with value: 0.017432549507364777.\n",
            "[I 2025-05-28 15:51:29,098] Trial 1 finished with value: 0.01734041421055742 and parameters: {'iterations': 544, 'learning_rate': 0.24407363829676115, 'depth': 7, 'l2_leaf_reg': 8.064565137256691, 'bagging_temperature': 3.8250816465413364, 'random_strength': 2.067959832335213}. Best is trial 1 with value: 0.01734041421055742.\n",
            "[I 2025-05-28 15:54:00,692] Trial 2 finished with value: 0.017392453200450304 and parameters: {'iterations': 915, 'learning_rate': 0.06186957859545619, 'depth': 6, 'l2_leaf_reg': 1.2512032226556782, 'bagging_temperature': 2.7221093166888197, 'random_strength': 2.840341019911969}. Best is trial 1 with value: 0.01734041421055742.\n",
            "[I 2025-05-28 15:55:42,259] Trial 3 finished with value: 0.017401686563688772 and parameters: {'iterations': 538, 'learning_rate': 0.28114954814116316, 'depth': 7, 'l2_leaf_reg': 3.706669157622936, 'bagging_temperature': 0.35081347587735634, 'random_strength': 3.2007077583110055}. Best is trial 1 with value: 0.01734041421055742.\n",
            "[I 2025-05-28 15:58:31,837] Trial 4 finished with value: 0.017334159655542834 and parameters: {'iterations': 910, 'learning_rate': 0.16578140251595974, 'depth': 7, 'l2_leaf_reg': 4.266275572604172, 'bagging_temperature': 4.963489052490343, 'random_strength': 9.30040084627813}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:00:40,665] Trial 5 finished with value: 0.017403165636785862 and parameters: {'iterations': 810, 'learning_rate': 0.24169342995843804, 'depth': 6, 'l2_leaf_reg': 6.627698080213193, 'bagging_temperature': 3.7173826937987564, 'random_strength': 9.687785836316051}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:02:30,801] Trial 6 finished with value: 0.017534710301919935 and parameters: {'iterations': 600, 'learning_rate': 0.050569028735748346, 'depth': 7, 'l2_leaf_reg': 3.0593396578679473, 'bagging_temperature': 1.1861151043970282, 'random_strength': 4.165312718591521}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:05:15,138] Trial 7 finished with value: 0.017446170675864025 and parameters: {'iterations': 990, 'learning_rate': 0.046301014083500854, 'depth': 6, 'l2_leaf_reg': 2.6928603405944047, 'bagging_temperature': 0.6006342855965532, 'random_strength': 3.378880031889495}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:09:55,979] Trial 8 finished with value: 0.01754915926099513 and parameters: {'iterations': 520, 'learning_rate': 0.037197720405818216, 'depth': 10, 'l2_leaf_reg': 1.411780909206549, 'bagging_temperature': 2.603940946506852, 'random_strength': 9.143409351865467}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:13:29,158] Trial 9 finished with value: 0.01745369759122406 and parameters: {'iterations': 989, 'learning_rate': 0.22556585281019464, 'depth': 8, 'l2_leaf_reg': 1.1665607725445903, 'bagging_temperature': 2.78405339946803, 'random_strength': 8.569515058147456}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:14:57,983] Trial 10 finished with value: 0.017522532572424435 and parameters: {'iterations': 699, 'learning_rate': 0.1690560150090104, 'depth': 4, 'l2_leaf_reg': 9.687113339611159, 'bagging_temperature': 4.947352215690313, 'random_strength': 6.942364686511872}. Best is trial 4 with value: 0.017334159655542834.\n",
            "[I 2025-05-28 16:17:49,976] Trial 11 finished with value: 0.017317463134527894 and parameters: {'iterations': 681, 'learning_rate': 0.18109992462568225, 'depth': 9, 'l2_leaf_reg': 7.798406783324559, 'bagging_temperature': 4.796982678062509, 'random_strength': 1.1517392271891211}. Best is trial 11 with value: 0.017317463134527894.\n",
            "[I 2025-05-28 16:21:02,426] Trial 12 finished with value: 0.017346115835838224 and parameters: {'iterations': 753, 'learning_rate': 0.17626823748103826, 'depth': 9, 'l2_leaf_reg': 6.0713826032781455, 'bagging_temperature': 4.993999536827296, 'random_strength': 4.803461262427653}. Best is trial 11 with value: 0.017317463134527894.\n",
            "[I 2025-05-28 16:23:52,196] Trial 13 finished with value: 0.017308657252284327 and parameters: {'iterations': 662, 'learning_rate': 0.13551186904472784, 'depth': 9, 'l2_leaf_reg': 8.137119006634084, 'bagging_temperature': 4.313465929893655, 'random_strength': 1.2209300878434393}. Best is trial 13 with value: 0.017308657252284327.\n",
            "[I 2025-05-28 16:29:56,089] Trial 14 finished with value: 0.017277986491430485 and parameters: {'iterations': 655, 'learning_rate': 0.11624270805476503, 'depth': 10, 'l2_leaf_reg': 7.978737393939291, 'bagging_temperature': 4.076255984611257, 'random_strength': 1.8941081760073828}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:35:37,671] Trial 15 finished with value: 0.017284795065182254 and parameters: {'iterations': 631, 'learning_rate': 0.11564448519310028, 'depth': 10, 'l2_leaf_reg': 9.752799981618752, 'bagging_temperature': 4.281126188360974, 'random_strength': 1.0224166956043994}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:41:30,793] Trial 16 finished with value: 0.01733806527457165 and parameters: {'iterations': 615, 'learning_rate': 0.09648619024713465, 'depth': 10, 'l2_leaf_reg': 9.32303404641803, 'bagging_temperature': 3.291796491895336, 'random_strength': 2.2430281657810647}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:48:23,737] Trial 17 finished with value: 0.01727950589262159 and parameters: {'iterations': 729, 'learning_rate': 0.09396621816102348, 'depth': 10, 'l2_leaf_reg': 8.7942122386406, 'bagging_temperature': 1.8280579203202199, 'random_strength': 1.0942933930643715}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:51:05,815] Trial 18 finished with value: 0.018315902793284575 and parameters: {'iterations': 747, 'learning_rate': 0.011279229299700266, 'depth': 8, 'l2_leaf_reg': 6.971020114516692, 'bagging_temperature': 1.974811734477944, 'random_strength': 4.522625070554192}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:53:44,267] Trial 19 finished with value: 0.017343001693470975 and parameters: {'iterations': 725, 'learning_rate': 0.08735933251120415, 'depth': 8, 'l2_leaf_reg': 8.407855753458612, 'bagging_temperature': 1.7461366603926791, 'random_strength': 7.37340403351827}. Best is trial 14 with value: 0.017277986491430485.\n",
            "[I 2025-05-28 16:57:18,549] Trial 20 finished with value: 0.017274709671788194 and parameters: {'iterations': 796, 'learning_rate': 0.14190339757894888, 'depth': 9, 'l2_leaf_reg': 8.867562725208105, 'bagging_temperature': 2.0304732568093558, 'random_strength': 2.070354128328056}. Best is trial 20 with value: 0.017274709671788194.\n",
            "[I 2025-05-28 17:04:45,935] Trial 21 finished with value: 0.017319090576084765 and parameters: {'iterations': 793, 'learning_rate': 0.13725260088899482, 'depth': 10, 'l2_leaf_reg': 8.887975797731242, 'bagging_temperature': 1.9739478581020575, 'random_strength': 2.35821731211307}. Best is trial 20 with value: 0.017274709671788194.\n",
            "[I 2025-05-28 17:08:21,682] Trial 22 finished with value: 0.01737064069559809 and parameters: {'iterations': 848, 'learning_rate': 0.20245890229231794, 'depth': 9, 'l2_leaf_reg': 7.451899188371527, 'bagging_temperature': 1.3261225484738564, 'random_strength': 1.9274034054179046}. Best is trial 20 with value: 0.017274709671788194.\n",
            "[I 2025-05-28 17:15:32,210] Trial 23 finished with value: 0.01726574002889643 and parameters: {'iterations': 785, 'learning_rate': 0.1344353335613341, 'depth': 10, 'l2_leaf_reg': 8.768032075387868, 'bagging_temperature': 1.488140022390711, 'random_strength': 3.6798956293307237}. Best is trial 23 with value: 0.01726574002889643.\n",
            "[I 2025-05-28 17:18:49,864] Trial 24 finished with value: 0.017287079648754866 and parameters: {'iterations': 796, 'learning_rate': 0.13283925116193845, 'depth': 9, 'l2_leaf_reg': 9.98467770615952, 'bagging_temperature': 1.0394466135613925, 'random_strength': 3.8502481641862305}. Best is trial 23 with value: 0.01726574002889643.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0:\tlearn: 0.8427559\ttotal: 337ms\tremaining: 4m 24s\n",
            "1:\tlearn: 0.7353272\ttotal: 858ms\tremaining: 5m 35s\n",
            "2:\tlearn: 0.6432347\ttotal: 1.41s\tremaining: 6m 8s\n",
            "3:\tlearn: 0.5632837\ttotal: 1.93s\tremaining: 6m 17s\n",
            "4:\tlearn: 0.4942997\ttotal: 2.47s\tremaining: 6m 25s\n",
            "5:\tlearn: 0.4334667\ttotal: 2.99s\tremaining: 6m 28s\n",
            "6:\tlearn: 0.3810717\ttotal: 3.52s\tremaining: 6m 31s\n",
            "7:\tlearn: 0.3352769\ttotal: 4.01s\tremaining: 6m 29s\n",
            "8:\tlearn: 0.2961520\ttotal: 4.53s\tremaining: 6m 30s\n",
            "9:\tlearn: 0.2618991\ttotal: 5.01s\tremaining: 6m 28s\n",
            "10:\tlearn: 0.2324723\ttotal: 5.67s\tremaining: 6m 38s\n",
            "11:\tlearn: 0.2068902\ttotal: 6.58s\tremaining: 7m 3s\n",
            "12:\tlearn: 0.1846423\ttotal: 7.48s\tremaining: 7m 24s\n",
            "13:\tlearn: 0.1659519\ttotal: 8.36s\tremaining: 7m 40s\n",
            "14:\tlearn: 0.1502948\ttotal: 9.05s\tremaining: 7m 44s\n",
            "15:\tlearn: 0.1370024\ttotal: 9.55s\tremaining: 7m 39s\n",
            "16:\tlearn: 0.1260534\ttotal: 10.1s\tremaining: 7m 35s\n",
            "17:\tlearn: 0.1169035\ttotal: 10.6s\tremaining: 7m 31s\n",
            "18:\tlearn: 0.1091236\ttotal: 11.1s\tremaining: 7m 27s\n",
            "19:\tlearn: 0.1024910\ttotal: 11.6s\tremaining: 7m 24s\n",
            "20:\tlearn: 0.0968820\ttotal: 12.1s\tremaining: 7m 21s\n",
            "21:\tlearn: 0.0924005\ttotal: 12.7s\tremaining: 7m 18s\n",
            "22:\tlearn: 0.0887368\ttotal: 13.2s\tremaining: 7m 16s\n",
            "23:\tlearn: 0.0857435\ttotal: 13.7s\tremaining: 7m 13s\n",
            "24:\tlearn: 0.0834462\ttotal: 14.2s\tremaining: 7m 11s\n",
            "25:\tlearn: 0.0813153\ttotal: 14.7s\tremaining: 7m 8s\n",
            "26:\tlearn: 0.0796679\ttotal: 15.2s\tremaining: 7m 6s\n",
            "27:\tlearn: 0.0781894\ttotal: 15.7s\tremaining: 7m 4s\n",
            "28:\tlearn: 0.0769843\ttotal: 16.2s\tremaining: 7m 2s\n",
            "29:\tlearn: 0.0759158\ttotal: 16.7s\tremaining: 7m\n",
            "30:\tlearn: 0.0750250\ttotal: 17.2s\tremaining: 6m 58s\n",
            "31:\tlearn: 0.0742444\ttotal: 17.7s\tremaining: 6m 56s\n",
            "32:\tlearn: 0.0736473\ttotal: 18.2s\tremaining: 6m 54s\n",
            "33:\tlearn: 0.0730951\ttotal: 18.7s\tremaining: 6m 53s\n",
            "34:\tlearn: 0.0725450\ttotal: 19.6s\tremaining: 7m\n",
            "35:\tlearn: 0.0720532\ttotal: 20.6s\tremaining: 7m 9s\n",
            "36:\tlearn: 0.0716208\ttotal: 21.5s\tremaining: 7m 13s\n",
            "37:\tlearn: 0.0711759\ttotal: 22.2s\tremaining: 7m 16s\n",
            "38:\tlearn: 0.0708140\ttotal: 22.7s\tremaining: 7m 15s\n",
            "39:\tlearn: 0.0704428\ttotal: 23.2s\tremaining: 7m 12s\n",
            "40:\tlearn: 0.0701793\ttotal: 23.8s\tremaining: 7m 11s\n",
            "41:\tlearn: 0.0698394\ttotal: 24.3s\tremaining: 7m 9s\n",
            "42:\tlearn: 0.0695563\ttotal: 24.8s\tremaining: 7m 8s\n",
            "43:\tlearn: 0.0693025\ttotal: 25.3s\tremaining: 7m 6s\n",
            "44:\tlearn: 0.0690440\ttotal: 25.8s\tremaining: 7m 5s\n",
            "45:\tlearn: 0.0687559\ttotal: 26.3s\tremaining: 7m 3s\n",
            "46:\tlearn: 0.0685511\ttotal: 26.9s\tremaining: 7m 1s\n",
            "47:\tlearn: 0.0682904\ttotal: 27.4s\tremaining: 7m\n",
            "48:\tlearn: 0.0681428\ttotal: 27.9s\tremaining: 6m 58s\n",
            "49:\tlearn: 0.0679233\ttotal: 28.4s\tremaining: 6m 57s\n",
            "50:\tlearn: 0.0678284\ttotal: 28.9s\tremaining: 6m 55s\n",
            "51:\tlearn: 0.0675919\ttotal: 29.4s\tremaining: 6m 54s\n",
            "52:\tlearn: 0.0674115\ttotal: 29.9s\tremaining: 6m 52s\n",
            "53:\tlearn: 0.0673015\ttotal: 30.4s\tremaining: 6m 51s\n",
            "54:\tlearn: 0.0671364\ttotal: 30.9s\tremaining: 6m 50s\n",
            "55:\tlearn: 0.0669675\ttotal: 31.4s\tremaining: 6m 49s\n",
            "56:\tlearn: 0.0667915\ttotal: 31.9s\tremaining: 6m 47s\n",
            "57:\tlearn: 0.0666360\ttotal: 32.7s\tremaining: 6m 49s\n",
            "58:\tlearn: 0.0665215\ttotal: 33.6s\tremaining: 6m 53s\n",
            "59:\tlearn: 0.0663700\ttotal: 34.5s\tremaining: 6m 57s\n",
            "60:\tlearn: 0.0662427\ttotal: 35.3s\tremaining: 6m 59s\n",
            "61:\tlearn: 0.0660928\ttotal: 35.8s\tremaining: 6m 57s\n",
            "62:\tlearn: 0.0660021\ttotal: 36.3s\tremaining: 6m 56s\n",
            "63:\tlearn: 0.0658516\ttotal: 36.9s\tremaining: 6m 55s\n",
            "64:\tlearn: 0.0657376\ttotal: 37.4s\tremaining: 6m 54s\n",
            "65:\tlearn: 0.0655853\ttotal: 37.9s\tremaining: 6m 52s\n",
            "66:\tlearn: 0.0654804\ttotal: 38.4s\tremaining: 6m 51s\n",
            "67:\tlearn: 0.0654027\ttotal: 38.9s\tremaining: 6m 50s\n",
            "68:\tlearn: 0.0653097\ttotal: 39.4s\tremaining: 6m 49s\n",
            "69:\tlearn: 0.0652179\ttotal: 39.9s\tremaining: 6m 47s\n",
            "70:\tlearn: 0.0651096\ttotal: 40.4s\tremaining: 6m 46s\n",
            "71:\tlearn: 0.0649993\ttotal: 41s\tremaining: 6m 45s\n",
            "72:\tlearn: 0.0649261\ttotal: 41.5s\tremaining: 6m 44s\n",
            "73:\tlearn: 0.0648142\ttotal: 42s\tremaining: 6m 43s\n",
            "74:\tlearn: 0.0647626\ttotal: 42.5s\tremaining: 6m 41s\n",
            "75:\tlearn: 0.0646421\ttotal: 43s\tremaining: 6m 41s\n",
            "76:\tlearn: 0.0645306\ttotal: 43.5s\tremaining: 6m 39s\n",
            "77:\tlearn: 0.0644399\ttotal: 44s\tremaining: 6m 38s\n",
            "78:\tlearn: 0.0643881\ttotal: 44.5s\tremaining: 6m 37s\n",
            "79:\tlearn: 0.0642942\ttotal: 45s\tremaining: 6m 36s\n",
            "80:\tlearn: 0.0642153\ttotal: 45.6s\tremaining: 6m 36s\n",
            "81:\tlearn: 0.0641363\ttotal: 46.6s\tremaining: 6m 39s\n",
            "82:\tlearn: 0.0640762\ttotal: 47.5s\tremaining: 6m 41s\n",
            "83:\tlearn: 0.0639781\ttotal: 48.4s\tremaining: 6m 44s\n",
            "84:\tlearn: 0.0639093\ttotal: 48.9s\tremaining: 6m 42s\n",
            "85:\tlearn: 0.0638098\ttotal: 49.4s\tremaining: 6m 41s\n",
            "86:\tlearn: 0.0637268\ttotal: 49.9s\tremaining: 6m 40s\n",
            "87:\tlearn: 0.0636399\ttotal: 50.4s\tremaining: 6m 39s\n",
            "88:\tlearn: 0.0635790\ttotal: 50.9s\tremaining: 6m 38s\n",
            "89:\tlearn: 0.0635261\ttotal: 51.6s\tremaining: 6m 38s\n",
            "90:\tlearn: 0.0634739\ttotal: 52.4s\tremaining: 6m 39s\n",
            "91:\tlearn: 0.0634178\ttotal: 53.4s\tremaining: 6m 41s\n",
            "92:\tlearn: 0.0633578\ttotal: 54.3s\tremaining: 6m 43s\n",
            "93:\tlearn: 0.0633040\ttotal: 54.9s\tremaining: 6m 43s\n",
            "94:\tlearn: 0.0632320\ttotal: 55.4s\tremaining: 6m 42s\n",
            "95:\tlearn: 0.0631452\ttotal: 56s\tremaining: 6m 41s\n",
            "96:\tlearn: 0.0630618\ttotal: 56.4s\tremaining: 6m 40s\n",
            "97:\tlearn: 0.0630026\ttotal: 57s\tremaining: 6m 39s\n",
            "98:\tlearn: 0.0629421\ttotal: 57.4s\tremaining: 6m 38s\n",
            "99:\tlearn: 0.0628753\ttotal: 57.9s\tremaining: 6m 36s\n",
            "100:\tlearn: 0.0628279\ttotal: 58.5s\tremaining: 6m 35s\n",
            "101:\tlearn: 0.0627849\ttotal: 59.2s\tremaining: 6m 36s\n",
            "102:\tlearn: 0.0627219\ttotal: 1m\tremaining: 6m 38s\n",
            "103:\tlearn: 0.0626565\ttotal: 1m 1s\tremaining: 6m 39s\n",
            "104:\tlearn: 0.0625686\ttotal: 1m 1s\tremaining: 6m 40s\n",
            "105:\tlearn: 0.0625136\ttotal: 1m 2s\tremaining: 6m 39s\n",
            "106:\tlearn: 0.0624394\ttotal: 1m 2s\tremaining: 6m 38s\n",
            "107:\tlearn: 0.0623814\ttotal: 1m 3s\tremaining: 6m 37s\n",
            "108:\tlearn: 0.0623355\ttotal: 1m 3s\tremaining: 6m 36s\n",
            "109:\tlearn: 0.0622899\ttotal: 1m 4s\tremaining: 6m 35s\n",
            "110:\tlearn: 0.0622592\ttotal: 1m 4s\tremaining: 6m 34s\n",
            "111:\tlearn: 0.0622094\ttotal: 1m 5s\tremaining: 6m 33s\n",
            "112:\tlearn: 0.0621447\ttotal: 1m 5s\tremaining: 6m 32s\n",
            "113:\tlearn: 0.0620764\ttotal: 1m 6s\tremaining: 6m 31s\n",
            "114:\tlearn: 0.0620120\ttotal: 1m 7s\tremaining: 6m 30s\n",
            "115:\tlearn: 0.0619680\ttotal: 1m 7s\tremaining: 6m 29s\n",
            "116:\tlearn: 0.0619156\ttotal: 1m 8s\tremaining: 6m 28s\n",
            "117:\tlearn: 0.0618663\ttotal: 1m 8s\tremaining: 6m 27s\n",
            "118:\tlearn: 0.0618130\ttotal: 1m 9s\tremaining: 6m 26s\n",
            "119:\tlearn: 0.0617749\ttotal: 1m 9s\tremaining: 6m 25s\n",
            "120:\tlearn: 0.0617290\ttotal: 1m 10s\tremaining: 6m 24s\n",
            "121:\tlearn: 0.0616807\ttotal: 1m 10s\tremaining: 6m 23s\n",
            "122:\tlearn: 0.0616471\ttotal: 1m 11s\tremaining: 6m 22s\n",
            "123:\tlearn: 0.0615961\ttotal: 1m 11s\tremaining: 6m 21s\n",
            "124:\tlearn: 0.0615406\ttotal: 1m 12s\tremaining: 6m 21s\n",
            "125:\tlearn: 0.0615147\ttotal: 1m 13s\tremaining: 6m 23s\n",
            "126:\tlearn: 0.0614744\ttotal: 1m 14s\tremaining: 6m 24s\n",
            "127:\tlearn: 0.0614272\ttotal: 1m 15s\tremaining: 6m 25s\n",
            "128:\tlearn: 0.0614020\ttotal: 1m 15s\tremaining: 6m 24s\n",
            "129:\tlearn: 0.0613606\ttotal: 1m 16s\tremaining: 6m 23s\n",
            "130:\tlearn: 0.0613365\ttotal: 1m 16s\tremaining: 6m 22s\n",
            "131:\tlearn: 0.0613000\ttotal: 1m 17s\tremaining: 6m 21s\n",
            "132:\tlearn: 0.0612402\ttotal: 1m 17s\tremaining: 6m 20s\n",
            "133:\tlearn: 0.0611943\ttotal: 1m 18s\tremaining: 6m 19s\n",
            "134:\tlearn: 0.0611597\ttotal: 1m 18s\tremaining: 6m 18s\n",
            "135:\tlearn: 0.0611045\ttotal: 1m 19s\tremaining: 6m 17s\n",
            "136:\tlearn: 0.0610712\ttotal: 1m 19s\tremaining: 6m 16s\n",
            "137:\tlearn: 0.0610307\ttotal: 1m 20s\tremaining: 6m 15s\n",
            "138:\tlearn: 0.0609952\ttotal: 1m 20s\tremaining: 6m 14s\n",
            "139:\tlearn: 0.0609707\ttotal: 1m 21s\tremaining: 6m 14s\n",
            "140:\tlearn: 0.0609303\ttotal: 1m 21s\tremaining: 6m 13s\n",
            "141:\tlearn: 0.0608835\ttotal: 1m 22s\tremaining: 6m 12s\n",
            "142:\tlearn: 0.0608533\ttotal: 1m 22s\tremaining: 6m 11s\n",
            "143:\tlearn: 0.0608136\ttotal: 1m 23s\tremaining: 6m 10s\n",
            "144:\tlearn: 0.0607882\ttotal: 1m 23s\tremaining: 6m 9s\n",
            "145:\tlearn: 0.0607498\ttotal: 1m 24s\tremaining: 6m 8s\n",
            "146:\tlearn: 0.0607175\ttotal: 1m 24s\tremaining: 6m 7s\n",
            "147:\tlearn: 0.0606907\ttotal: 1m 25s\tremaining: 6m 7s\n",
            "148:\tlearn: 0.0606552\ttotal: 1m 26s\tremaining: 6m 8s\n",
            "149:\tlearn: 0.0606266\ttotal: 1m 27s\tremaining: 6m 8s\n",
            "150:\tlearn: 0.0605913\ttotal: 1m 28s\tremaining: 6m 9s\n",
            "151:\tlearn: 0.0605736\ttotal: 1m 28s\tremaining: 6m 9s\n",
            "152:\tlearn: 0.0605427\ttotal: 1m 29s\tremaining: 6m 8s\n",
            "153:\tlearn: 0.0604959\ttotal: 1m 29s\tremaining: 6m 7s\n",
            "154:\tlearn: 0.0604563\ttotal: 1m 30s\tremaining: 6m 6s\n",
            "155:\tlearn: 0.0604172\ttotal: 1m 30s\tremaining: 6m 5s\n",
            "156:\tlearn: 0.0603912\ttotal: 1m 31s\tremaining: 6m 4s\n",
            "157:\tlearn: 0.0603414\ttotal: 1m 31s\tremaining: 6m 3s\n",
            "158:\tlearn: 0.0603253\ttotal: 1m 32s\tremaining: 6m 2s\n",
            "159:\tlearn: 0.0603049\ttotal: 1m 32s\tremaining: 6m 1s\n",
            "160:\tlearn: 0.0602771\ttotal: 1m 33s\tremaining: 6m 1s\n",
            "161:\tlearn: 0.0602462\ttotal: 1m 33s\tremaining: 6m\n",
            "162:\tlearn: 0.0602248\ttotal: 1m 34s\tremaining: 5m 59s\n",
            "163:\tlearn: 0.0602105\ttotal: 1m 34s\tremaining: 5m 58s\n",
            "164:\tlearn: 0.0601735\ttotal: 1m 35s\tremaining: 5m 58s\n",
            "165:\tlearn: 0.0601432\ttotal: 1m 35s\tremaining: 5m 57s\n",
            "166:\tlearn: 0.0601151\ttotal: 1m 36s\tremaining: 5m 56s\n",
            "167:\tlearn: 0.0600891\ttotal: 1m 36s\tremaining: 5m 55s\n",
            "168:\tlearn: 0.0600629\ttotal: 1m 37s\tremaining: 5m 54s\n",
            "169:\tlearn: 0.0600436\ttotal: 1m 37s\tremaining: 5m 54s\n",
            "170:\tlearn: 0.0600228\ttotal: 1m 38s\tremaining: 5m 53s\n",
            "171:\tlearn: 0.0599945\ttotal: 1m 39s\tremaining: 5m 54s\n",
            "172:\tlearn: 0.0599851\ttotal: 1m 40s\tremaining: 5m 55s\n",
            "173:\tlearn: 0.0599542\ttotal: 1m 41s\tremaining: 5m 55s\n",
            "174:\tlearn: 0.0599231\ttotal: 1m 41s\tremaining: 5m 55s\n",
            "175:\tlearn: 0.0598954\ttotal: 1m 42s\tremaining: 5m 54s\n",
            "176:\tlearn: 0.0598696\ttotal: 1m 42s\tremaining: 5m 53s\n",
            "177:\tlearn: 0.0598472\ttotal: 1m 43s\tremaining: 5m 52s\n",
            "178:\tlearn: 0.0598311\ttotal: 1m 43s\tremaining: 5m 52s\n",
            "179:\tlearn: 0.0598151\ttotal: 1m 44s\tremaining: 5m 51s\n",
            "180:\tlearn: 0.0597924\ttotal: 1m 45s\tremaining: 5m 50s\n",
            "181:\tlearn: 0.0597740\ttotal: 1m 45s\tremaining: 5m 49s\n",
            "182:\tlearn: 0.0597472\ttotal: 1m 46s\tremaining: 5m 48s\n",
            "183:\tlearn: 0.0597364\ttotal: 1m 46s\tremaining: 5m 48s\n",
            "184:\tlearn: 0.0597094\ttotal: 1m 47s\tremaining: 5m 47s\n",
            "185:\tlearn: 0.0596892\ttotal: 1m 47s\tremaining: 5m 46s\n",
            "186:\tlearn: 0.0596734\ttotal: 1m 48s\tremaining: 5m 45s\n",
            "187:\tlearn: 0.0596534\ttotal: 1m 48s\tremaining: 5m 44s\n",
            "188:\tlearn: 0.0596203\ttotal: 1m 49s\tremaining: 5m 44s\n",
            "189:\tlearn: 0.0596028\ttotal: 1m 49s\tremaining: 5m 43s\n",
            "190:\tlearn: 0.0595843\ttotal: 1m 50s\tremaining: 5m 42s\n",
            "191:\tlearn: 0.0595633\ttotal: 1m 50s\tremaining: 5m 41s\n",
            "192:\tlearn: 0.0595419\ttotal: 1m 51s\tremaining: 5m 41s\n",
            "193:\tlearn: 0.0595070\ttotal: 1m 52s\tremaining: 5m 41s\n",
            "194:\tlearn: 0.0594938\ttotal: 1m 53s\tremaining: 5m 42s\n",
            "195:\tlearn: 0.0594686\ttotal: 1m 53s\tremaining: 5m 42s\n",
            "196:\tlearn: 0.0594439\ttotal: 1m 54s\tremaining: 5m 42s\n",
            "197:\tlearn: 0.0594292\ttotal: 1m 55s\tremaining: 5m 41s\n",
            "198:\tlearn: 0.0594137\ttotal: 1m 55s\tremaining: 5m 41s\n",
            "199:\tlearn: 0.0593923\ttotal: 1m 56s\tremaining: 5m 40s\n",
            "200:\tlearn: 0.0593696\ttotal: 1m 56s\tremaining: 5m 39s\n",
            "201:\tlearn: 0.0593381\ttotal: 1m 57s\tremaining: 5m 38s\n",
            "202:\tlearn: 0.0593253\ttotal: 1m 57s\tremaining: 5m 37s\n",
            "203:\tlearn: 0.0593045\ttotal: 1m 58s\tremaining: 5m 37s\n",
            "204:\tlearn: 0.0592862\ttotal: 1m 58s\tremaining: 5m 36s\n",
            "205:\tlearn: 0.0592721\ttotal: 1m 59s\tremaining: 5m 35s\n",
            "206:\tlearn: 0.0592484\ttotal: 1m 59s\tremaining: 5m 34s\n",
            "207:\tlearn: 0.0592128\ttotal: 2m\tremaining: 5m 33s\n",
            "208:\tlearn: 0.0591928\ttotal: 2m\tremaining: 5m 33s\n",
            "209:\tlearn: 0.0591717\ttotal: 2m 1s\tremaining: 5m 32s\n",
            "210:\tlearn: 0.0591483\ttotal: 2m 1s\tremaining: 5m 31s\n",
            "211:\tlearn: 0.0591250\ttotal: 2m 2s\tremaining: 5m 30s\n",
            "212:\tlearn: 0.0591067\ttotal: 2m 2s\tremaining: 5m 30s\n",
            "213:\tlearn: 0.0590978\ttotal: 2m 3s\tremaining: 5m 29s\n",
            "214:\tlearn: 0.0590790\ttotal: 2m 3s\tremaining: 5m 28s\n",
            "215:\tlearn: 0.0590546\ttotal: 2m 4s\tremaining: 5m 27s\n",
            "216:\tlearn: 0.0590348\ttotal: 2m 4s\tremaining: 5m 27s\n",
            "217:\tlearn: 0.0590209\ttotal: 2m 5s\tremaining: 5m 27s\n",
            "218:\tlearn: 0.0590023\ttotal: 2m 6s\tremaining: 5m 27s\n",
            "219:\tlearn: 0.0589919\ttotal: 2m 7s\tremaining: 5m 28s\n",
            "220:\tlearn: 0.0589780\ttotal: 2m 8s\tremaining: 5m 27s\n",
            "221:\tlearn: 0.0589647\ttotal: 2m 8s\tremaining: 5m 26s\n",
            "222:\tlearn: 0.0589528\ttotal: 2m 9s\tremaining: 5m 26s\n",
            "223:\tlearn: 0.0589458\ttotal: 2m 9s\tremaining: 5m 25s\n",
            "224:\tlearn: 0.0589288\ttotal: 2m 10s\tremaining: 5m 24s\n",
            "225:\tlearn: 0.0589148\ttotal: 2m 10s\tremaining: 5m 23s\n",
            "226:\tlearn: 0.0588985\ttotal: 2m 11s\tremaining: 5m 23s\n",
            "227:\tlearn: 0.0588762\ttotal: 2m 11s\tremaining: 5m 22s\n",
            "228:\tlearn: 0.0588608\ttotal: 2m 12s\tremaining: 5m 21s\n",
            "229:\tlearn: 0.0588435\ttotal: 2m 12s\tremaining: 5m 20s\n",
            "230:\tlearn: 0.0588293\ttotal: 2m 13s\tremaining: 5m 20s\n",
            "231:\tlearn: 0.0588043\ttotal: 2m 13s\tremaining: 5m 19s\n",
            "232:\tlearn: 0.0587877\ttotal: 2m 14s\tremaining: 5m 18s\n",
            "233:\tlearn: 0.0587657\ttotal: 2m 14s\tremaining: 5m 17s\n",
            "234:\tlearn: 0.0587510\ttotal: 2m 15s\tremaining: 5m 17s\n",
            "235:\tlearn: 0.0587293\ttotal: 2m 15s\tremaining: 5m 16s\n",
            "236:\tlearn: 0.0587215\ttotal: 2m 16s\tremaining: 5m 15s\n",
            "237:\tlearn: 0.0587048\ttotal: 2m 16s\tremaining: 5m 14s\n",
            "238:\tlearn: 0.0586921\ttotal: 2m 17s\tremaining: 5m 14s\n",
            "239:\tlearn: 0.0586698\ttotal: 2m 17s\tremaining: 5m 13s\n",
            "240:\tlearn: 0.0586428\ttotal: 2m 18s\tremaining: 5m 13s\n",
            "241:\tlearn: 0.0586211\ttotal: 2m 19s\tremaining: 5m 13s\n",
            "242:\tlearn: 0.0586054\ttotal: 2m 20s\tremaining: 5m 13s\n",
            "243:\tlearn: 0.0585926\ttotal: 2m 21s\tremaining: 5m 13s\n",
            "244:\tlearn: 0.0585749\ttotal: 2m 22s\tremaining: 5m 13s\n",
            "245:\tlearn: 0.0585537\ttotal: 2m 22s\tremaining: 5m 12s\n",
            "246:\tlearn: 0.0585363\ttotal: 2m 23s\tremaining: 5m 11s\n",
            "247:\tlearn: 0.0585126\ttotal: 2m 23s\tremaining: 5m 10s\n",
            "248:\tlearn: 0.0584866\ttotal: 2m 24s\tremaining: 5m 10s\n",
            "249:\tlearn: 0.0584642\ttotal: 2m 24s\tremaining: 5m 9s\n",
            "250:\tlearn: 0.0584509\ttotal: 2m 25s\tremaining: 5m 8s\n",
            "251:\tlearn: 0.0584318\ttotal: 2m 25s\tremaining: 5m 7s\n",
            "252:\tlearn: 0.0584171\ttotal: 2m 26s\tremaining: 5m 7s\n",
            "253:\tlearn: 0.0584049\ttotal: 2m 26s\tremaining: 5m 6s\n",
            "254:\tlearn: 0.0583940\ttotal: 2m 27s\tremaining: 5m 5s\n",
            "255:\tlearn: 0.0583819\ttotal: 2m 27s\tremaining: 5m 4s\n",
            "256:\tlearn: 0.0583680\ttotal: 2m 28s\tremaining: 5m 4s\n",
            "257:\tlearn: 0.0583477\ttotal: 2m 28s\tremaining: 5m 3s\n",
            "258:\tlearn: 0.0583310\ttotal: 2m 29s\tremaining: 5m 2s\n",
            "259:\tlearn: 0.0583136\ttotal: 2m 29s\tremaining: 5m 2s\n",
            "260:\tlearn: 0.0582991\ttotal: 2m 30s\tremaining: 5m 1s\n",
            "261:\tlearn: 0.0582883\ttotal: 2m 30s\tremaining: 5m\n",
            "262:\tlearn: 0.0582697\ttotal: 2m 31s\tremaining: 4m 59s\n",
            "263:\tlearn: 0.0582557\ttotal: 2m 31s\tremaining: 4m 59s\n",
            "264:\tlearn: 0.0582473\ttotal: 2m 32s\tremaining: 4m 59s\n",
            "265:\tlearn: 0.0582396\ttotal: 2m 33s\tremaining: 4m 59s\n",
            "266:\tlearn: 0.0582289\ttotal: 2m 34s\tremaining: 4m 59s\n",
            "267:\tlearn: 0.0582152\ttotal: 2m 35s\tremaining: 4m 59s\n",
            "268:\tlearn: 0.0582024\ttotal: 2m 35s\tremaining: 4m 58s\n",
            "269:\tlearn: 0.0581942\ttotal: 2m 36s\tremaining: 4m 57s\n",
            "270:\tlearn: 0.0581782\ttotal: 2m 36s\tremaining: 4m 56s\n",
            "271:\tlearn: 0.0581681\ttotal: 2m 37s\tremaining: 4m 56s\n",
            "272:\tlearn: 0.0581522\ttotal: 2m 37s\tremaining: 4m 55s\n",
            "273:\tlearn: 0.0581355\ttotal: 2m 38s\tremaining: 4m 54s\n",
            "274:\tlearn: 0.0581199\ttotal: 2m 38s\tremaining: 4m 54s\n",
            "275:\tlearn: 0.0581101\ttotal: 2m 39s\tremaining: 4m 53s\n",
            "276:\tlearn: 0.0580994\ttotal: 2m 39s\tremaining: 4m 52s\n",
            "277:\tlearn: 0.0580837\ttotal: 2m 40s\tremaining: 4m 51s\n",
            "278:\tlearn: 0.0580744\ttotal: 2m 40s\tremaining: 4m 51s\n",
            "279:\tlearn: 0.0580566\ttotal: 2m 41s\tremaining: 4m 50s\n",
            "280:\tlearn: 0.0580380\ttotal: 2m 41s\tremaining: 4m 49s\n",
            "281:\tlearn: 0.0580191\ttotal: 2m 42s\tremaining: 4m 49s\n",
            "282:\tlearn: 0.0579998\ttotal: 2m 42s\tremaining: 4m 48s\n",
            "283:\tlearn: 0.0579800\ttotal: 2m 43s\tremaining: 4m 47s\n",
            "284:\tlearn: 0.0579730\ttotal: 2m 43s\tremaining: 4m 47s\n",
            "285:\tlearn: 0.0579610\ttotal: 2m 44s\tremaining: 4m 46s\n",
            "286:\tlearn: 0.0579418\ttotal: 2m 44s\tremaining: 4m 45s\n",
            "287:\tlearn: 0.0579370\ttotal: 2m 45s\tremaining: 4m 45s\n",
            "288:\tlearn: 0.0579255\ttotal: 2m 46s\tremaining: 4m 45s\n",
            "289:\tlearn: 0.0579111\ttotal: 2m 47s\tremaining: 4m 45s\n",
            "290:\tlearn: 0.0578932\ttotal: 2m 48s\tremaining: 4m 45s\n",
            "291:\tlearn: 0.0578827\ttotal: 2m 48s\tremaining: 4m 44s\n",
            "292:\tlearn: 0.0578681\ttotal: 2m 49s\tremaining: 4m 43s\n",
            "293:\tlearn: 0.0578629\ttotal: 2m 49s\tremaining: 4m 43s\n",
            "294:\tlearn: 0.0578402\ttotal: 2m 50s\tremaining: 4m 42s\n",
            "295:\tlearn: 0.0578254\ttotal: 2m 50s\tremaining: 4m 41s\n",
            "296:\tlearn: 0.0578055\ttotal: 2m 51s\tremaining: 4m 41s\n",
            "297:\tlearn: 0.0577917\ttotal: 2m 51s\tremaining: 4m 40s\n",
            "298:\tlearn: 0.0577832\ttotal: 2m 52s\tremaining: 4m 39s\n",
            "299:\tlearn: 0.0577691\ttotal: 2m 52s\tremaining: 4m 38s\n",
            "300:\tlearn: 0.0577506\ttotal: 2m 53s\tremaining: 4m 38s\n",
            "301:\tlearn: 0.0577376\ttotal: 2m 53s\tremaining: 4m 37s\n",
            "302:\tlearn: 0.0577220\ttotal: 2m 54s\tremaining: 4m 36s\n",
            "303:\tlearn: 0.0577084\ttotal: 2m 54s\tremaining: 4m 36s\n",
            "304:\tlearn: 0.0576956\ttotal: 2m 55s\tremaining: 4m 35s\n",
            "305:\tlearn: 0.0576853\ttotal: 2m 55s\tremaining: 4m 34s\n",
            "306:\tlearn: 0.0576773\ttotal: 2m 56s\tremaining: 4m 34s\n",
            "307:\tlearn: 0.0576613\ttotal: 2m 56s\tremaining: 4m 33s\n",
            "308:\tlearn: 0.0576384\ttotal: 2m 57s\tremaining: 4m 32s\n",
            "309:\tlearn: 0.0576315\ttotal: 2m 57s\tremaining: 4m 32s\n",
            "310:\tlearn: 0.0576232\ttotal: 2m 58s\tremaining: 4m 31s\n",
            "311:\tlearn: 0.0576161\ttotal: 2m 59s\tremaining: 4m 31s\n",
            "312:\tlearn: 0.0576044\ttotal: 3m\tremaining: 4m 31s\n",
            "313:\tlearn: 0.0575860\ttotal: 3m\tremaining: 4m 31s\n",
            "314:\tlearn: 0.0575742\ttotal: 3m 1s\tremaining: 4m 30s\n",
            "315:\tlearn: 0.0575663\ttotal: 3m 2s\tremaining: 4m 30s\n",
            "316:\tlearn: 0.0575526\ttotal: 3m 2s\tremaining: 4m 29s\n",
            "317:\tlearn: 0.0575437\ttotal: 3m 3s\tremaining: 4m 28s\n",
            "318:\tlearn: 0.0575280\ttotal: 3m 3s\tremaining: 4m 28s\n",
            "319:\tlearn: 0.0575058\ttotal: 3m 4s\tremaining: 4m 27s\n",
            "320:\tlearn: 0.0574994\ttotal: 3m 4s\tremaining: 4m 26s\n",
            "321:\tlearn: 0.0574825\ttotal: 3m 5s\tremaining: 4m 26s\n",
            "322:\tlearn: 0.0574687\ttotal: 3m 5s\tremaining: 4m 25s\n",
            "323:\tlearn: 0.0574582\ttotal: 3m 6s\tremaining: 4m 24s\n",
            "324:\tlearn: 0.0574538\ttotal: 3m 6s\tremaining: 4m 24s\n",
            "325:\tlearn: 0.0574418\ttotal: 3m 7s\tremaining: 4m 23s\n",
            "326:\tlearn: 0.0574276\ttotal: 3m 7s\tremaining: 4m 22s\n",
            "327:\tlearn: 0.0574163\ttotal: 3m 8s\tremaining: 4m 22s\n",
            "328:\tlearn: 0.0574051\ttotal: 3m 8s\tremaining: 4m 21s\n",
            "329:\tlearn: 0.0573963\ttotal: 3m 9s\tremaining: 4m 20s\n",
            "330:\tlearn: 0.0573753\ttotal: 3m 9s\tremaining: 4m 20s\n",
            "331:\tlearn: 0.0573626\ttotal: 3m 10s\tremaining: 4m 19s\n",
            "332:\tlearn: 0.0573559\ttotal: 3m 10s\tremaining: 4m 18s\n",
            "333:\tlearn: 0.0573501\ttotal: 3m 11s\tremaining: 4m 18s\n",
            "334:\tlearn: 0.0573438\ttotal: 3m 12s\tremaining: 4m 18s\n",
            "335:\tlearn: 0.0573345\ttotal: 3m 13s\tremaining: 4m 17s\n",
            "336:\tlearn: 0.0573209\ttotal: 3m 13s\tremaining: 4m 17s\n",
            "337:\tlearn: 0.0573109\ttotal: 3m 14s\tremaining: 4m 17s\n",
            "338:\tlearn: 0.0572993\ttotal: 3m 15s\tremaining: 4m 16s\n",
            "339:\tlearn: 0.0572907\ttotal: 3m 15s\tremaining: 4m 16s\n",
            "340:\tlearn: 0.0572788\ttotal: 3m 16s\tremaining: 4m 15s\n",
            "341:\tlearn: 0.0572621\ttotal: 3m 16s\tremaining: 4m 14s\n",
            "342:\tlearn: 0.0572524\ttotal: 3m 17s\tremaining: 4m 14s\n",
            "343:\tlearn: 0.0572439\ttotal: 3m 17s\tremaining: 4m 13s\n",
            "344:\tlearn: 0.0572289\ttotal: 3m 18s\tremaining: 4m 12s\n",
            "345:\tlearn: 0.0572186\ttotal: 3m 18s\tremaining: 4m 12s\n",
            "346:\tlearn: 0.0572031\ttotal: 3m 19s\tremaining: 4m 11s\n",
            "347:\tlearn: 0.0571928\ttotal: 3m 19s\tremaining: 4m 10s\n",
            "348:\tlearn: 0.0571768\ttotal: 3m 20s\tremaining: 4m 10s\n",
            "349:\tlearn: 0.0571654\ttotal: 3m 20s\tremaining: 4m 9s\n",
            "350:\tlearn: 0.0571430\ttotal: 3m 21s\tremaining: 4m 8s\n",
            "351:\tlearn: 0.0571273\ttotal: 3m 21s\tremaining: 4m 8s\n",
            "352:\tlearn: 0.0571178\ttotal: 3m 22s\tremaining: 4m 7s\n",
            "353:\tlearn: 0.0571029\ttotal: 3m 22s\tremaining: 4m 6s\n",
            "354:\tlearn: 0.0570894\ttotal: 3m 23s\tremaining: 4m 6s\n",
            "355:\tlearn: 0.0570741\ttotal: 3m 23s\tremaining: 4m 5s\n",
            "356:\tlearn: 0.0570670\ttotal: 3m 24s\tremaining: 4m 4s\n",
            "357:\tlearn: 0.0570526\ttotal: 3m 24s\tremaining: 4m 4s\n",
            "358:\tlearn: 0.0570474\ttotal: 3m 25s\tremaining: 4m 4s\n",
            "359:\tlearn: 0.0570375\ttotal: 3m 26s\tremaining: 4m 4s\n",
            "360:\tlearn: 0.0570227\ttotal: 3m 27s\tremaining: 4m 3s\n",
            "361:\tlearn: 0.0570120\ttotal: 3m 28s\tremaining: 4m 3s\n",
            "362:\tlearn: 0.0570060\ttotal: 3m 28s\tremaining: 4m 2s\n",
            "363:\tlearn: 0.0570013\ttotal: 3m 29s\tremaining: 4m 1s\n",
            "364:\tlearn: 0.0569885\ttotal: 3m 29s\tremaining: 4m 1s\n",
            "365:\tlearn: 0.0569815\ttotal: 3m 30s\tremaining: 4m\n",
            "366:\tlearn: 0.0569697\ttotal: 3m 30s\tremaining: 3m 59s\n",
            "367:\tlearn: 0.0569554\ttotal: 3m 31s\tremaining: 3m 59s\n",
            "368:\tlearn: 0.0569452\ttotal: 3m 31s\tremaining: 3m 58s\n",
            "369:\tlearn: 0.0569348\ttotal: 3m 32s\tremaining: 3m 58s\n",
            "370:\tlearn: 0.0569237\ttotal: 3m 32s\tremaining: 3m 57s\n",
            "371:\tlearn: 0.0569158\ttotal: 3m 33s\tremaining: 3m 56s\n",
            "372:\tlearn: 0.0569039\ttotal: 3m 33s\tremaining: 3m 56s\n",
            "373:\tlearn: 0.0568962\ttotal: 3m 34s\tremaining: 3m 55s\n",
            "374:\tlearn: 0.0568777\ttotal: 3m 34s\tremaining: 3m 54s\n",
            "375:\tlearn: 0.0568688\ttotal: 3m 35s\tremaining: 3m 54s\n",
            "376:\tlearn: 0.0568558\ttotal: 3m 35s\tremaining: 3m 53s\n",
            "377:\tlearn: 0.0568419\ttotal: 3m 36s\tremaining: 3m 52s\n",
            "378:\tlearn: 0.0568371\ttotal: 3m 36s\tremaining: 3m 52s\n",
            "379:\tlearn: 0.0568261\ttotal: 3m 37s\tremaining: 3m 51s\n",
            "380:\tlearn: 0.0568141\ttotal: 3m 37s\tremaining: 3m 51s\n",
            "381:\tlearn: 0.0568005\ttotal: 3m 38s\tremaining: 3m 50s\n",
            "382:\tlearn: 0.0567903\ttotal: 3m 39s\tremaining: 3m 50s\n",
            "383:\tlearn: 0.0567861\ttotal: 3m 40s\tremaining: 3m 50s\n",
            "384:\tlearn: 0.0567714\ttotal: 3m 41s\tremaining: 3m 49s\n",
            "385:\tlearn: 0.0567585\ttotal: 3m 41s\tremaining: 3m 49s\n",
            "386:\tlearn: 0.0567476\ttotal: 3m 42s\tremaining: 3m 48s\n",
            "387:\tlearn: 0.0567417\ttotal: 3m 42s\tremaining: 3m 47s\n",
            "388:\tlearn: 0.0567257\ttotal: 3m 43s\tremaining: 3m 47s\n",
            "389:\tlearn: 0.0567170\ttotal: 3m 43s\tremaining: 3m 46s\n",
            "390:\tlearn: 0.0567041\ttotal: 3m 44s\tremaining: 3m 46s\n",
            "391:\tlearn: 0.0566938\ttotal: 3m 44s\tremaining: 3m 45s\n",
            "392:\tlearn: 0.0566820\ttotal: 3m 45s\tremaining: 3m 44s\n",
            "393:\tlearn: 0.0566704\ttotal: 3m 45s\tremaining: 3m 44s\n",
            "394:\tlearn: 0.0566611\ttotal: 3m 46s\tremaining: 3m 43s\n",
            "395:\tlearn: 0.0566498\ttotal: 3m 46s\tremaining: 3m 42s\n",
            "396:\tlearn: 0.0566413\ttotal: 3m 47s\tremaining: 3m 42s\n",
            "397:\tlearn: 0.0566228\ttotal: 3m 47s\tremaining: 3m 41s\n",
            "398:\tlearn: 0.0566170\ttotal: 3m 48s\tremaining: 3m 41s\n",
            "399:\tlearn: 0.0566050\ttotal: 3m 48s\tremaining: 3m 40s\n",
            "400:\tlearn: 0.0565934\ttotal: 3m 49s\tremaining: 3m 39s\n",
            "401:\tlearn: 0.0565803\ttotal: 3m 50s\tremaining: 3m 39s\n",
            "402:\tlearn: 0.0565683\ttotal: 3m 50s\tremaining: 3m 38s\n",
            "403:\tlearn: 0.0565598\ttotal: 3m 51s\tremaining: 3m 37s\n",
            "404:\tlearn: 0.0565473\ttotal: 3m 52s\tremaining: 3m 37s\n",
            "405:\tlearn: 0.0565327\ttotal: 3m 53s\tremaining: 3m 37s\n",
            "406:\tlearn: 0.0565226\ttotal: 3m 53s\tremaining: 3m 37s\n",
            "407:\tlearn: 0.0565076\ttotal: 3m 54s\tremaining: 3m 36s\n",
            "408:\tlearn: 0.0565012\ttotal: 3m 55s\tremaining: 3m 36s\n",
            "409:\tlearn: 0.0564912\ttotal: 3m 55s\tremaining: 3m 35s\n",
            "410:\tlearn: 0.0564883\ttotal: 3m 56s\tremaining: 3m 34s\n",
            "411:\tlearn: 0.0564819\ttotal: 3m 56s\tremaining: 3m 34s\n",
            "412:\tlearn: 0.0564690\ttotal: 3m 57s\tremaining: 3m 33s\n",
            "413:\tlearn: 0.0564505\ttotal: 3m 57s\tremaining: 3m 32s\n",
            "414:\tlearn: 0.0564441\ttotal: 3m 58s\tremaining: 3m 32s\n",
            "415:\tlearn: 0.0564370\ttotal: 3m 58s\tremaining: 3m 31s\n",
            "416:\tlearn: 0.0564281\ttotal: 3m 59s\tremaining: 3m 30s\n",
            "417:\tlearn: 0.0564266\ttotal: 3m 59s\tremaining: 3m 30s\n",
            "418:\tlearn: 0.0564209\ttotal: 4m\tremaining: 3m 29s\n",
            "419:\tlearn: 0.0564083\ttotal: 4m\tremaining: 3m 29s\n",
            "420:\tlearn: 0.0564017\ttotal: 4m 1s\tremaining: 3m 28s\n",
            "421:\tlearn: 0.0563933\ttotal: 4m 1s\tremaining: 3m 27s\n",
            "422:\tlearn: 0.0563838\ttotal: 4m 2s\tremaining: 3m 27s\n",
            "423:\tlearn: 0.0563772\ttotal: 4m 2s\tremaining: 3m 26s\n",
            "424:\tlearn: 0.0563652\ttotal: 4m 3s\tremaining: 3m 25s\n",
            "425:\tlearn: 0.0563619\ttotal: 4m 3s\tremaining: 3m 25s\n",
            "426:\tlearn: 0.0563523\ttotal: 4m 4s\tremaining: 3m 24s\n",
            "427:\tlearn: 0.0563411\ttotal: 4m 4s\tremaining: 3m 24s\n",
            "428:\tlearn: 0.0563296\ttotal: 4m 5s\tremaining: 3m 23s\n",
            "429:\tlearn: 0.0563250\ttotal: 4m 6s\tremaining: 3m 23s\n",
            "430:\tlearn: 0.0563130\ttotal: 4m 7s\tremaining: 3m 23s\n",
            "431:\tlearn: 0.0562969\ttotal: 4m 8s\tremaining: 3m 22s\n",
            "432:\tlearn: 0.0562805\ttotal: 4m 8s\tremaining: 3m 22s\n",
            "433:\tlearn: 0.0562688\ttotal: 4m 9s\tremaining: 3m 21s\n",
            "434:\tlearn: 0.0562562\ttotal: 4m 9s\tremaining: 3m 20s\n",
            "435:\tlearn: 0.0562538\ttotal: 4m 10s\tremaining: 3m 20s\n",
            "436:\tlearn: 0.0562464\ttotal: 4m 10s\tremaining: 3m 19s\n",
            "437:\tlearn: 0.0562376\ttotal: 4m 11s\tremaining: 3m 18s\n",
            "438:\tlearn: 0.0562256\ttotal: 4m 11s\tremaining: 3m 18s\n",
            "439:\tlearn: 0.0562198\ttotal: 4m 12s\tremaining: 3m 17s\n",
            "440:\tlearn: 0.0562072\ttotal: 4m 12s\tremaining: 3m 17s\n",
            "441:\tlearn: 0.0561982\ttotal: 4m 13s\tremaining: 3m 16s\n",
            "442:\tlearn: 0.0561890\ttotal: 4m 13s\tremaining: 3m 15s\n",
            "443:\tlearn: 0.0561768\ttotal: 4m 14s\tremaining: 3m 15s\n",
            "444:\tlearn: 0.0561614\ttotal: 4m 14s\tremaining: 3m 14s\n",
            "445:\tlearn: 0.0561521\ttotal: 4m 15s\tremaining: 3m 13s\n",
            "446:\tlearn: 0.0561333\ttotal: 4m 15s\tremaining: 3m 13s\n",
            "447:\tlearn: 0.0561220\ttotal: 4m 16s\tremaining: 3m 12s\n",
            "448:\tlearn: 0.0561084\ttotal: 4m 16s\tremaining: 3m 12s\n",
            "449:\tlearn: 0.0561012\ttotal: 4m 17s\tremaining: 3m 11s\n",
            "450:\tlearn: 0.0560967\ttotal: 4m 17s\tremaining: 3m 10s\n",
            "451:\tlearn: 0.0560902\ttotal: 4m 18s\tremaining: 3m 10s\n",
            "452:\tlearn: 0.0560822\ttotal: 4m 19s\tremaining: 3m 10s\n",
            "453:\tlearn: 0.0560736\ttotal: 4m 20s\tremaining: 3m 9s\n",
            "454:\tlearn: 0.0560680\ttotal: 4m 21s\tremaining: 3m 9s\n",
            "455:\tlearn: 0.0560604\ttotal: 4m 21s\tremaining: 3m 8s\n",
            "456:\tlearn: 0.0560485\ttotal: 4m 22s\tremaining: 3m 8s\n",
            "457:\tlearn: 0.0560381\ttotal: 4m 22s\tremaining: 3m 7s\n",
            "458:\tlearn: 0.0560315\ttotal: 4m 23s\tremaining: 3m 7s\n",
            "459:\tlearn: 0.0560204\ttotal: 4m 23s\tremaining: 3m 6s\n",
            "460:\tlearn: 0.0560107\ttotal: 4m 24s\tremaining: 3m 5s\n",
            "461:\tlearn: 0.0560003\ttotal: 4m 24s\tremaining: 3m 5s\n",
            "462:\tlearn: 0.0559927\ttotal: 4m 25s\tremaining: 3m 4s\n",
            "463:\tlearn: 0.0559871\ttotal: 4m 25s\tremaining: 3m 3s\n",
            "464:\tlearn: 0.0559812\ttotal: 4m 26s\tremaining: 3m 3s\n",
            "465:\tlearn: 0.0559681\ttotal: 4m 26s\tremaining: 3m 2s\n",
            "466:\tlearn: 0.0559629\ttotal: 4m 27s\tremaining: 3m 2s\n",
            "467:\tlearn: 0.0559525\ttotal: 4m 27s\tremaining: 3m 1s\n",
            "468:\tlearn: 0.0559441\ttotal: 4m 28s\tremaining: 3m\n",
            "469:\tlearn: 0.0559364\ttotal: 4m 28s\tremaining: 3m\n",
            "470:\tlearn: 0.0559300\ttotal: 4m 29s\tremaining: 2m 59s\n",
            "471:\tlearn: 0.0559104\ttotal: 4m 29s\tremaining: 2m 58s\n",
            "472:\tlearn: 0.0559023\ttotal: 4m 30s\tremaining: 2m 58s\n",
            "473:\tlearn: 0.0558949\ttotal: 4m 30s\tremaining: 2m 57s\n",
            "474:\tlearn: 0.0558839\ttotal: 4m 31s\tremaining: 2m 57s\n",
            "475:\tlearn: 0.0558718\ttotal: 4m 32s\tremaining: 2m 56s\n",
            "476:\tlearn: 0.0558548\ttotal: 4m 33s\tremaining: 2m 56s\n",
            "477:\tlearn: 0.0558495\ttotal: 4m 34s\tremaining: 2m 56s\n",
            "478:\tlearn: 0.0558374\ttotal: 4m 34s\tremaining: 2m 55s\n",
            "479:\tlearn: 0.0558330\ttotal: 4m 35s\tremaining: 2m 54s\n",
            "480:\tlearn: 0.0558222\ttotal: 4m 35s\tremaining: 2m 54s\n",
            "481:\tlearn: 0.0558169\ttotal: 4m 36s\tremaining: 2m 53s\n",
            "482:\tlearn: 0.0558051\ttotal: 4m 36s\tremaining: 2m 53s\n",
            "483:\tlearn: 0.0557910\ttotal: 4m 37s\tremaining: 2m 52s\n",
            "484:\tlearn: 0.0557744\ttotal: 4m 37s\tremaining: 2m 51s\n",
            "485:\tlearn: 0.0557696\ttotal: 4m 38s\tremaining: 2m 51s\n",
            "486:\tlearn: 0.0557600\ttotal: 4m 38s\tremaining: 2m 50s\n",
            "487:\tlearn: 0.0557518\ttotal: 4m 39s\tremaining: 2m 50s\n",
            "488:\tlearn: 0.0557480\ttotal: 4m 39s\tremaining: 2m 49s\n",
            "489:\tlearn: 0.0557389\ttotal: 4m 40s\tremaining: 2m 48s\n",
            "490:\tlearn: 0.0557302\ttotal: 4m 40s\tremaining: 2m 48s\n",
            "491:\tlearn: 0.0557237\ttotal: 4m 41s\tremaining: 2m 47s\n",
            "492:\tlearn: 0.0557187\ttotal: 4m 41s\tremaining: 2m 46s\n",
            "493:\tlearn: 0.0557156\ttotal: 4m 42s\tremaining: 2m 46s\n",
            "494:\tlearn: 0.0557060\ttotal: 4m 42s\tremaining: 2m 45s\n",
            "495:\tlearn: 0.0556997\ttotal: 4m 43s\tremaining: 2m 45s\n",
            "496:\tlearn: 0.0556903\ttotal: 4m 43s\tremaining: 2m 44s\n",
            "497:\tlearn: 0.0556797\ttotal: 4m 44s\tremaining: 2m 43s\n",
            "498:\tlearn: 0.0556699\ttotal: 4m 45s\tremaining: 2m 43s\n",
            "499:\tlearn: 0.0556622\ttotal: 4m 46s\tremaining: 2m 43s\n",
            "500:\tlearn: 0.0556576\ttotal: 4m 46s\tremaining: 2m 42s\n",
            "501:\tlearn: 0.0556426\ttotal: 4m 47s\tremaining: 2m 42s\n",
            "502:\tlearn: 0.0556374\ttotal: 4m 48s\tremaining: 2m 41s\n",
            "503:\tlearn: 0.0556324\ttotal: 4m 48s\tremaining: 2m 40s\n",
            "504:\tlearn: 0.0556294\ttotal: 4m 49s\tremaining: 2m 40s\n",
            "505:\tlearn: 0.0556234\ttotal: 4m 49s\tremaining: 2m 39s\n",
            "506:\tlearn: 0.0556120\ttotal: 4m 50s\tremaining: 2m 39s\n",
            "507:\tlearn: 0.0556048\ttotal: 4m 50s\tremaining: 2m 38s\n",
            "508:\tlearn: 0.0555948\ttotal: 4m 51s\tremaining: 2m 37s\n",
            "509:\tlearn: 0.0555854\ttotal: 4m 51s\tremaining: 2m 37s\n",
            "510:\tlearn: 0.0555786\ttotal: 4m 52s\tremaining: 2m 36s\n",
            "511:\tlearn: 0.0555660\ttotal: 4m 52s\tremaining: 2m 35s\n",
            "512:\tlearn: 0.0555618\ttotal: 4m 53s\tremaining: 2m 35s\n",
            "513:\tlearn: 0.0555518\ttotal: 4m 53s\tremaining: 2m 34s\n",
            "514:\tlearn: 0.0555484\ttotal: 4m 54s\tremaining: 2m 34s\n",
            "515:\tlearn: 0.0555424\ttotal: 4m 54s\tremaining: 2m 33s\n",
            "516:\tlearn: 0.0555371\ttotal: 4m 54s\tremaining: 2m 32s\n",
            "517:\tlearn: 0.0555341\ttotal: 4m 55s\tremaining: 2m 32s\n",
            "518:\tlearn: 0.0555213\ttotal: 4m 55s\tremaining: 2m 31s\n",
            "519:\tlearn: 0.0555061\ttotal: 4m 56s\tremaining: 2m 31s\n",
            "520:\tlearn: 0.0555006\ttotal: 4m 56s\tremaining: 2m 30s\n",
            "521:\tlearn: 0.0554897\ttotal: 4m 57s\tremaining: 2m 29s\n",
            "522:\tlearn: 0.0554779\ttotal: 4m 58s\tremaining: 2m 29s\n",
            "523:\tlearn: 0.0554737\ttotal: 4m 59s\tremaining: 2m 29s\n",
            "524:\tlearn: 0.0554693\ttotal: 5m\tremaining: 2m 28s\n",
            "525:\tlearn: 0.0554582\ttotal: 5m\tremaining: 2m 28s\n",
            "526:\tlearn: 0.0554534\ttotal: 5m 1s\tremaining: 2m 27s\n",
            "527:\tlearn: 0.0554506\ttotal: 5m 1s\tremaining: 2m 26s\n",
            "528:\tlearn: 0.0554412\ttotal: 5m 2s\tremaining: 2m 26s\n",
            "529:\tlearn: 0.0554323\ttotal: 5m 2s\tremaining: 2m 25s\n",
            "530:\tlearn: 0.0554244\ttotal: 5m 3s\tremaining: 2m 25s\n",
            "531:\tlearn: 0.0554171\ttotal: 5m 3s\tremaining: 2m 24s\n",
            "532:\tlearn: 0.0554111\ttotal: 5m 4s\tremaining: 2m 23s\n",
            "533:\tlearn: 0.0554036\ttotal: 5m 4s\tremaining: 2m 23s\n",
            "534:\tlearn: 0.0553926\ttotal: 5m 5s\tremaining: 2m 22s\n",
            "535:\tlearn: 0.0553880\ttotal: 5m 5s\tremaining: 2m 22s\n",
            "536:\tlearn: 0.0553806\ttotal: 5m 6s\tremaining: 2m 21s\n",
            "537:\tlearn: 0.0553770\ttotal: 5m 6s\tremaining: 2m 20s\n",
            "538:\tlearn: 0.0553666\ttotal: 5m 7s\tremaining: 2m 20s\n",
            "539:\tlearn: 0.0553571\ttotal: 5m 7s\tremaining: 2m 19s\n",
            "540:\tlearn: 0.0553523\ttotal: 5m 8s\tremaining: 2m 19s\n",
            "541:\tlearn: 0.0553452\ttotal: 5m 8s\tremaining: 2m 18s\n",
            "542:\tlearn: 0.0553386\ttotal: 5m 9s\tremaining: 2m 17s\n",
            "543:\tlearn: 0.0553328\ttotal: 5m 9s\tremaining: 2m 17s\n",
            "544:\tlearn: 0.0553281\ttotal: 5m 10s\tremaining: 2m 16s\n",
            "545:\tlearn: 0.0553220\ttotal: 5m 10s\tremaining: 2m 16s\n",
            "546:\tlearn: 0.0553182\ttotal: 5m 11s\tremaining: 2m 15s\n",
            "547:\tlearn: 0.0553127\ttotal: 5m 12s\tremaining: 2m 15s\n",
            "548:\tlearn: 0.0553102\ttotal: 5m 13s\tremaining: 2m 14s\n",
            "549:\tlearn: 0.0553032\ttotal: 5m 14s\tremaining: 2m 14s\n",
            "550:\tlearn: 0.0552978\ttotal: 5m 14s\tremaining: 2m 13s\n",
            "551:\tlearn: 0.0552926\ttotal: 5m 15s\tremaining: 2m 13s\n",
            "552:\tlearn: 0.0552881\ttotal: 5m 15s\tremaining: 2m 12s\n",
            "553:\tlearn: 0.0552795\ttotal: 5m 16s\tremaining: 2m 11s\n",
            "554:\tlearn: 0.0552649\ttotal: 5m 16s\tremaining: 2m 11s\n",
            "555:\tlearn: 0.0552497\ttotal: 5m 17s\tremaining: 2m 10s\n",
            "556:\tlearn: 0.0552380\ttotal: 5m 17s\tremaining: 2m 10s\n",
            "557:\tlearn: 0.0552300\ttotal: 5m 18s\tremaining: 2m 9s\n",
            "558:\tlearn: 0.0552264\ttotal: 5m 18s\tremaining: 2m 8s\n",
            "559:\tlearn: 0.0552171\ttotal: 5m 19s\tremaining: 2m 8s\n",
            "560:\tlearn: 0.0552106\ttotal: 5m 20s\tremaining: 2m 7s\n",
            "561:\tlearn: 0.0552025\ttotal: 5m 21s\tremaining: 2m 7s\n",
            "562:\tlearn: 0.0551998\ttotal: 5m 21s\tremaining: 2m 6s\n",
            "563:\tlearn: 0.0551818\ttotal: 5m 22s\tremaining: 2m 6s\n",
            "564:\tlearn: 0.0551761\ttotal: 5m 23s\tremaining: 2m 5s\n",
            "565:\tlearn: 0.0551730\ttotal: 5m 23s\tremaining: 2m 5s\n",
            "566:\tlearn: 0.0551672\ttotal: 5m 24s\tremaining: 2m 4s\n",
            "567:\tlearn: 0.0551648\ttotal: 5m 25s\tremaining: 2m 4s\n",
            "568:\tlearn: 0.0551601\ttotal: 5m 26s\tremaining: 2m 3s\n",
            "569:\tlearn: 0.0551537\ttotal: 5m 27s\tremaining: 2m 3s\n",
            "570:\tlearn: 0.0551454\ttotal: 5m 27s\tremaining: 2m 2s\n",
            "571:\tlearn: 0.0551307\ttotal: 5m 28s\tremaining: 2m 2s\n",
            "572:\tlearn: 0.0551210\ttotal: 5m 28s\tremaining: 2m 1s\n",
            "573:\tlearn: 0.0551152\ttotal: 5m 29s\tremaining: 2m 1s\n",
            "574:\tlearn: 0.0551051\ttotal: 5m 29s\tremaining: 2m\n",
            "575:\tlearn: 0.0551007\ttotal: 5m 30s\tremaining: 1m 59s\n",
            "576:\tlearn: 0.0550961\ttotal: 5m 30s\tremaining: 1m 59s\n",
            "577:\tlearn: 0.0550920\ttotal: 5m 31s\tremaining: 1m 58s\n",
            "578:\tlearn: 0.0550855\ttotal: 5m 31s\tremaining: 1m 58s\n",
            "579:\tlearn: 0.0550773\ttotal: 5m 32s\tremaining: 1m 57s\n",
            "580:\tlearn: 0.0550728\ttotal: 5m 32s\tremaining: 1m 56s\n",
            "581:\tlearn: 0.0550578\ttotal: 5m 33s\tremaining: 1m 56s\n",
            "582:\tlearn: 0.0550556\ttotal: 5m 33s\tremaining: 1m 55s\n",
            "583:\tlearn: 0.0550489\ttotal: 5m 34s\tremaining: 1m 55s\n",
            "584:\tlearn: 0.0550400\ttotal: 5m 34s\tremaining: 1m 54s\n",
            "585:\tlearn: 0.0550366\ttotal: 5m 35s\tremaining: 1m 53s\n",
            "586:\tlearn: 0.0550298\ttotal: 5m 35s\tremaining: 1m 53s\n",
            "587:\tlearn: 0.0550195\ttotal: 5m 36s\tremaining: 1m 52s\n",
            "588:\tlearn: 0.0550128\ttotal: 5m 36s\tremaining: 1m 52s\n",
            "589:\tlearn: 0.0550060\ttotal: 5m 37s\tremaining: 1m 51s\n",
            "590:\tlearn: 0.0550013\ttotal: 5m 38s\tremaining: 1m 51s\n",
            "591:\tlearn: 0.0549946\ttotal: 5m 39s\tremaining: 1m 50s\n",
            "592:\tlearn: 0.0549903\ttotal: 5m 40s\tremaining: 1m 50s\n",
            "593:\tlearn: 0.0549844\ttotal: 5m 40s\tremaining: 1m 49s\n",
            "594:\tlearn: 0.0549691\ttotal: 5m 41s\tremaining: 1m 48s\n",
            "595:\tlearn: 0.0549630\ttotal: 5m 41s\tremaining: 1m 48s\n",
            "596:\tlearn: 0.0549458\ttotal: 5m 42s\tremaining: 1m 47s\n",
            "597:\tlearn: 0.0549379\ttotal: 5m 42s\tremaining: 1m 47s\n",
            "598:\tlearn: 0.0549368\ttotal: 5m 43s\tremaining: 1m 46s\n",
            "599:\tlearn: 0.0549306\ttotal: 5m 43s\tremaining: 1m 46s\n",
            "600:\tlearn: 0.0549206\ttotal: 5m 44s\tremaining: 1m 45s\n",
            "601:\tlearn: 0.0549098\ttotal: 5m 44s\tremaining: 1m 44s\n",
            "602:\tlearn: 0.0549047\ttotal: 5m 45s\tremaining: 1m 44s\n",
            "603:\tlearn: 0.0549025\ttotal: 5m 45s\tremaining: 1m 43s\n",
            "604:\tlearn: 0.0548891\ttotal: 5m 46s\tremaining: 1m 43s\n",
            "605:\tlearn: 0.0548811\ttotal: 5m 46s\tremaining: 1m 42s\n",
            "606:\tlearn: 0.0548782\ttotal: 5m 47s\tremaining: 1m 41s\n",
            "607:\tlearn: 0.0548643\ttotal: 5m 47s\tremaining: 1m 41s\n",
            "608:\tlearn: 0.0548590\ttotal: 5m 48s\tremaining: 1m 40s\n",
            "609:\tlearn: 0.0548525\ttotal: 5m 48s\tremaining: 1m 40s\n",
            "610:\tlearn: 0.0548439\ttotal: 5m 49s\tremaining: 1m 39s\n",
            "611:\tlearn: 0.0548355\ttotal: 5m 49s\tremaining: 1m 38s\n",
            "612:\tlearn: 0.0548255\ttotal: 5m 50s\tremaining: 1m 38s\n",
            "613:\tlearn: 0.0548115\ttotal: 5m 51s\tremaining: 1m 37s\n",
            "614:\tlearn: 0.0548042\ttotal: 5m 52s\tremaining: 1m 37s\n",
            "615:\tlearn: 0.0547980\ttotal: 5m 53s\tremaining: 1m 36s\n",
            "616:\tlearn: 0.0547947\ttotal: 5m 53s\tremaining: 1m 36s\n",
            "617:\tlearn: 0.0547825\ttotal: 5m 54s\tremaining: 1m 35s\n",
            "618:\tlearn: 0.0547762\ttotal: 5m 54s\tremaining: 1m 35s\n",
            "619:\tlearn: 0.0547647\ttotal: 5m 55s\tremaining: 1m 34s\n",
            "620:\tlearn: 0.0547585\ttotal: 5m 55s\tremaining: 1m 34s\n",
            "621:\tlearn: 0.0547565\ttotal: 5m 56s\tremaining: 1m 33s\n",
            "622:\tlearn: 0.0547494\ttotal: 5m 56s\tremaining: 1m 32s\n",
            "623:\tlearn: 0.0547454\ttotal: 5m 57s\tremaining: 1m 32s\n",
            "624:\tlearn: 0.0547432\ttotal: 5m 57s\tremaining: 1m 31s\n",
            "625:\tlearn: 0.0547372\ttotal: 5m 58s\tremaining: 1m 31s\n",
            "626:\tlearn: 0.0547338\ttotal: 5m 58s\tremaining: 1m 30s\n",
            "627:\tlearn: 0.0547217\ttotal: 5m 59s\tremaining: 1m 29s\n",
            "628:\tlearn: 0.0547151\ttotal: 6m\tremaining: 1m 29s\n",
            "629:\tlearn: 0.0547098\ttotal: 6m\tremaining: 1m 28s\n",
            "630:\tlearn: 0.0547039\ttotal: 6m 1s\tremaining: 1m 28s\n",
            "631:\tlearn: 0.0546930\ttotal: 6m 1s\tremaining: 1m 27s\n",
            "632:\tlearn: 0.0546888\ttotal: 6m 2s\tremaining: 1m 26s\n",
            "633:\tlearn: 0.0546826\ttotal: 6m 2s\tremaining: 1m 26s\n",
            "634:\tlearn: 0.0546777\ttotal: 6m 3s\tremaining: 1m 25s\n",
            "635:\tlearn: 0.0546677\ttotal: 6m 3s\tremaining: 1m 25s\n",
            "636:\tlearn: 0.0546618\ttotal: 6m 4s\tremaining: 1m 24s\n",
            "637:\tlearn: 0.0546543\ttotal: 6m 5s\tremaining: 1m 24s\n",
            "638:\tlearn: 0.0546451\ttotal: 6m 6s\tremaining: 1m 23s\n",
            "639:\tlearn: 0.0546363\ttotal: 6m 7s\tremaining: 1m 23s\n",
            "640:\tlearn: 0.0546284\ttotal: 6m 7s\tremaining: 1m 22s\n",
            "641:\tlearn: 0.0546259\ttotal: 6m 8s\tremaining: 1m 22s\n",
            "642:\tlearn: 0.0546208\ttotal: 6m 8s\tremaining: 1m 21s\n",
            "643:\tlearn: 0.0546189\ttotal: 6m 9s\tremaining: 1m 20s\n",
            "644:\tlearn: 0.0546056\ttotal: 6m 9s\tremaining: 1m 20s\n",
            "645:\tlearn: 0.0545989\ttotal: 6m 10s\tremaining: 1m 19s\n",
            "646:\tlearn: 0.0545953\ttotal: 6m 10s\tremaining: 1m 19s\n",
            "647:\tlearn: 0.0545914\ttotal: 6m 11s\tremaining: 1m 18s\n",
            "648:\tlearn: 0.0545847\ttotal: 6m 11s\tremaining: 1m 17s\n",
            "649:\tlearn: 0.0545714\ttotal: 6m 12s\tremaining: 1m 17s\n",
            "650:\tlearn: 0.0545611\ttotal: 6m 12s\tremaining: 1m 16s\n",
            "651:\tlearn: 0.0545579\ttotal: 6m 13s\tremaining: 1m 16s\n",
            "652:\tlearn: 0.0545427\ttotal: 6m 13s\tremaining: 1m 15s\n",
            "653:\tlearn: 0.0545380\ttotal: 6m 14s\tremaining: 1m 14s\n",
            "654:\tlearn: 0.0545307\ttotal: 6m 14s\tremaining: 1m 14s\n",
            "655:\tlearn: 0.0545218\ttotal: 6m 15s\tremaining: 1m 13s\n",
            "656:\tlearn: 0.0545179\ttotal: 6m 15s\tremaining: 1m 13s\n",
            "657:\tlearn: 0.0545088\ttotal: 6m 16s\tremaining: 1m 12s\n",
            "658:\tlearn: 0.0545000\ttotal: 6m 16s\tremaining: 1m 12s\n",
            "659:\tlearn: 0.0544956\ttotal: 6m 17s\tremaining: 1m 11s\n",
            "660:\tlearn: 0.0544862\ttotal: 6m 18s\tremaining: 1m 11s\n",
            "661:\tlearn: 0.0544802\ttotal: 6m 19s\tremaining: 1m 10s\n",
            "662:\tlearn: 0.0544778\ttotal: 6m 20s\tremaining: 1m 9s\n",
            "663:\tlearn: 0.0544733\ttotal: 6m 20s\tremaining: 1m 9s\n",
            "664:\tlearn: 0.0544682\ttotal: 6m 21s\tremaining: 1m 8s\n",
            "665:\tlearn: 0.0544607\ttotal: 6m 21s\tremaining: 1m 8s\n",
            "666:\tlearn: 0.0544543\ttotal: 6m 22s\tremaining: 1m 7s\n",
            "667:\tlearn: 0.0544482\ttotal: 6m 22s\tremaining: 1m 7s\n",
            "668:\tlearn: 0.0544407\ttotal: 6m 23s\tremaining: 1m 6s\n",
            "669:\tlearn: 0.0544270\ttotal: 6m 23s\tremaining: 1m 5s\n",
            "670:\tlearn: 0.0544210\ttotal: 6m 24s\tremaining: 1m 5s\n",
            "671:\tlearn: 0.0544175\ttotal: 6m 24s\tremaining: 1m 4s\n",
            "672:\tlearn: 0.0544145\ttotal: 6m 25s\tremaining: 1m 4s\n",
            "673:\tlearn: 0.0544072\ttotal: 6m 25s\tremaining: 1m 3s\n",
            "674:\tlearn: 0.0543994\ttotal: 6m 26s\tremaining: 1m 2s\n",
            "675:\tlearn: 0.0543904\ttotal: 6m 26s\tremaining: 1m 2s\n",
            "676:\tlearn: 0.0543821\ttotal: 6m 27s\tremaining: 1m 1s\n",
            "677:\tlearn: 0.0543760\ttotal: 6m 27s\tremaining: 1m 1s\n",
            "678:\tlearn: 0.0543659\ttotal: 6m 28s\tremaining: 1m\n",
            "679:\tlearn: 0.0543638\ttotal: 6m 28s\tremaining: 1m\n",
            "680:\tlearn: 0.0543534\ttotal: 6m 29s\tremaining: 59.5s\n",
            "681:\tlearn: 0.0543400\ttotal: 6m 29s\tremaining: 58.9s\n",
            "682:\tlearn: 0.0543342\ttotal: 6m 30s\tremaining: 58.4s\n",
            "683:\tlearn: 0.0543298\ttotal: 6m 31s\tremaining: 57.8s\n",
            "684:\tlearn: 0.0543226\ttotal: 6m 32s\tremaining: 57.3s\n",
            "685:\tlearn: 0.0543165\ttotal: 6m 33s\tremaining: 56.8s\n",
            "686:\tlearn: 0.0543136\ttotal: 6m 33s\tremaining: 56.2s\n",
            "687:\tlearn: 0.0543074\ttotal: 6m 34s\tremaining: 55.6s\n",
            "688:\tlearn: 0.0543048\ttotal: 6m 34s\tremaining: 55s\n",
            "689:\tlearn: 0.0543027\ttotal: 6m 35s\tremaining: 54.4s\n",
            "690:\tlearn: 0.0542965\ttotal: 6m 35s\tremaining: 53.9s\n",
            "691:\tlearn: 0.0542823\ttotal: 6m 36s\tremaining: 53.3s\n",
            "692:\tlearn: 0.0542756\ttotal: 6m 36s\tremaining: 52.7s\n",
            "693:\tlearn: 0.0542720\ttotal: 6m 37s\tremaining: 52.1s\n",
            "694:\tlearn: 0.0542638\ttotal: 6m 37s\tremaining: 51.5s\n",
            "695:\tlearn: 0.0542518\ttotal: 6m 38s\tremaining: 51s\n",
            "696:\tlearn: 0.0542462\ttotal: 6m 38s\tremaining: 50.4s\n",
            "697:\tlearn: 0.0542395\ttotal: 6m 39s\tremaining: 49.8s\n",
            "698:\tlearn: 0.0542288\ttotal: 6m 40s\tremaining: 49.2s\n",
            "699:\tlearn: 0.0542160\ttotal: 6m 40s\tremaining: 48.6s\n",
            "700:\tlearn: 0.0542127\ttotal: 6m 41s\tremaining: 48.1s\n",
            "701:\tlearn: 0.0542069\ttotal: 6m 41s\tremaining: 47.5s\n",
            "702:\tlearn: 0.0541987\ttotal: 6m 42s\tremaining: 46.9s\n",
            "703:\tlearn: 0.0541894\ttotal: 6m 42s\tremaining: 46.3s\n",
            "704:\tlearn: 0.0541847\ttotal: 6m 43s\tremaining: 45.7s\n",
            "705:\tlearn: 0.0541793\ttotal: 6m 43s\tremaining: 45.2s\n",
            "706:\tlearn: 0.0541739\ttotal: 6m 44s\tremaining: 44.7s\n",
            "707:\tlearn: 0.0541671\ttotal: 6m 45s\tremaining: 44.1s\n",
            "708:\tlearn: 0.0541617\ttotal: 6m 46s\tremaining: 43.6s\n",
            "709:\tlearn: 0.0541539\ttotal: 6m 47s\tremaining: 43s\n",
            "710:\tlearn: 0.0541490\ttotal: 6m 47s\tremaining: 42.4s\n",
            "711:\tlearn: 0.0541434\ttotal: 6m 48s\tremaining: 41.8s\n",
            "712:\tlearn: 0.0541387\ttotal: 6m 48s\tremaining: 41.3s\n",
            "713:\tlearn: 0.0541350\ttotal: 6m 49s\tremaining: 40.7s\n",
            "714:\tlearn: 0.0541303\ttotal: 6m 49s\tremaining: 40.1s\n",
            "715:\tlearn: 0.0541261\ttotal: 6m 50s\tremaining: 39.5s\n",
            "716:\tlearn: 0.0541158\ttotal: 6m 50s\tremaining: 39s\n",
            "717:\tlearn: 0.0541141\ttotal: 6m 51s\tremaining: 38.4s\n",
            "718:\tlearn: 0.0541109\ttotal: 6m 51s\tremaining: 37.8s\n",
            "719:\tlearn: 0.0541038\ttotal: 6m 52s\tremaining: 37.2s\n",
            "720:\tlearn: 0.0540998\ttotal: 6m 52s\tremaining: 36.6s\n",
            "721:\tlearn: 0.0540961\ttotal: 6m 53s\tremaining: 36.1s\n",
            "722:\tlearn: 0.0540884\ttotal: 6m 53s\tremaining: 35.5s\n",
            "723:\tlearn: 0.0540785\ttotal: 6m 54s\tremaining: 34.9s\n",
            "724:\tlearn: 0.0540759\ttotal: 6m 54s\tremaining: 34.3s\n",
            "725:\tlearn: 0.0540650\ttotal: 6m 55s\tremaining: 33.7s\n",
            "726:\tlearn: 0.0540536\ttotal: 6m 55s\tremaining: 33.2s\n",
            "727:\tlearn: 0.0540458\ttotal: 6m 56s\tremaining: 32.6s\n",
            "728:\tlearn: 0.0540381\ttotal: 6m 57s\tremaining: 32s\n",
            "729:\tlearn: 0.0540296\ttotal: 6m 57s\tremaining: 31.5s\n",
            "730:\tlearn: 0.0540225\ttotal: 6m 58s\tremaining: 30.9s\n",
            "731:\tlearn: 0.0540181\ttotal: 6m 59s\tremaining: 30.4s\n",
            "732:\tlearn: 0.0540154\ttotal: 7m\tremaining: 29.8s\n",
            "733:\tlearn: 0.0540093\ttotal: 7m\tremaining: 29.2s\n",
            "734:\tlearn: 0.0540048\ttotal: 7m 1s\tremaining: 28.7s\n",
            "735:\tlearn: 0.0539996\ttotal: 7m 1s\tremaining: 28.1s\n",
            "736:\tlearn: 0.0539959\ttotal: 7m 2s\tremaining: 27.5s\n",
            "737:\tlearn: 0.0539856\ttotal: 7m 2s\tremaining: 26.9s\n",
            "738:\tlearn: 0.0539792\ttotal: 7m 3s\tremaining: 26.4s\n",
            "739:\tlearn: 0.0539753\ttotal: 7m 3s\tremaining: 25.8s\n",
            "740:\tlearn: 0.0539708\ttotal: 7m 4s\tremaining: 25.2s\n",
            "741:\tlearn: 0.0539606\ttotal: 7m 4s\tremaining: 24.6s\n",
            "742:\tlearn: 0.0539491\ttotal: 7m 5s\tremaining: 24.1s\n",
            "743:\tlearn: 0.0539434\ttotal: 7m 5s\tremaining: 23.5s\n",
            "744:\tlearn: 0.0539325\ttotal: 7m 6s\tremaining: 22.9s\n",
            "745:\tlearn: 0.0539268\ttotal: 7m 7s\tremaining: 22.3s\n",
            "746:\tlearn: 0.0539237\ttotal: 7m 7s\tremaining: 21.7s\n",
            "747:\tlearn: 0.0539133\ttotal: 7m 8s\tremaining: 21.2s\n",
            "748:\tlearn: 0.0539057\ttotal: 7m 8s\tremaining: 20.6s\n",
            "749:\tlearn: 0.0539011\ttotal: 7m 9s\tremaining: 20s\n",
            "750:\tlearn: 0.0538933\ttotal: 7m 9s\tremaining: 19.5s\n",
            "751:\tlearn: 0.0538822\ttotal: 7m 10s\tremaining: 18.9s\n",
            "752:\tlearn: 0.0538707\ttotal: 7m 11s\tremaining: 18.3s\n",
            "753:\tlearn: 0.0538660\ttotal: 7m 12s\tremaining: 17.8s\n",
            "754:\tlearn: 0.0538605\ttotal: 7m 13s\tremaining: 17.2s\n",
            "755:\tlearn: 0.0538554\ttotal: 7m 13s\tremaining: 16.6s\n",
            "756:\tlearn: 0.0538510\ttotal: 7m 14s\tremaining: 16.1s\n",
            "757:\tlearn: 0.0538473\ttotal: 7m 14s\tremaining: 15.5s\n",
            "758:\tlearn: 0.0538394\ttotal: 7m 15s\tremaining: 14.9s\n",
            "759:\tlearn: 0.0538350\ttotal: 7m 15s\tremaining: 14.3s\n",
            "760:\tlearn: 0.0538322\ttotal: 7m 16s\tremaining: 13.8s\n",
            "761:\tlearn: 0.0538240\ttotal: 7m 16s\tremaining: 13.2s\n",
            "762:\tlearn: 0.0538170\ttotal: 7m 17s\tremaining: 12.6s\n",
            "763:\tlearn: 0.0538074\ttotal: 7m 18s\tremaining: 12s\n",
            "764:\tlearn: 0.0537990\ttotal: 7m 18s\tremaining: 11.5s\n",
            "765:\tlearn: 0.0537890\ttotal: 7m 19s\tremaining: 10.9s\n",
            "766:\tlearn: 0.0537804\ttotal: 7m 19s\tremaining: 10.3s\n",
            "767:\tlearn: 0.0537749\ttotal: 7m 20s\tremaining: 9.74s\n",
            "768:\tlearn: 0.0537703\ttotal: 7m 20s\tremaining: 9.17s\n",
            "769:\tlearn: 0.0537676\ttotal: 7m 21s\tremaining: 8.6s\n",
            "770:\tlearn: 0.0537603\ttotal: 7m 21s\tremaining: 8.02s\n",
            "771:\tlearn: 0.0537503\ttotal: 7m 22s\tremaining: 7.45s\n",
            "772:\tlearn: 0.0537400\ttotal: 7m 22s\tremaining: 6.87s\n",
            "773:\tlearn: 0.0537316\ttotal: 7m 23s\tremaining: 6.3s\n",
            "774:\tlearn: 0.0537231\ttotal: 7m 23s\tremaining: 5.73s\n",
            "775:\tlearn: 0.0537156\ttotal: 7m 24s\tremaining: 5.16s\n",
            "776:\tlearn: 0.0537053\ttotal: 7m 25s\tremaining: 4.59s\n",
            "777:\tlearn: 0.0536960\ttotal: 7m 26s\tremaining: 4.02s\n",
            "778:\tlearn: 0.0536899\ttotal: 7m 26s\tremaining: 3.44s\n",
            "779:\tlearn: 0.0536835\ttotal: 7m 27s\tremaining: 2.87s\n",
            "780:\tlearn: 0.0536753\ttotal: 7m 27s\tremaining: 2.29s\n",
            "781:\tlearn: 0.0536713\ttotal: 7m 28s\tremaining: 1.72s\n",
            "782:\tlearn: 0.0536628\ttotal: 7m 29s\tremaining: 1.15s\n",
            "783:\tlearn: 0.0536564\ttotal: 7m 29s\tremaining: 573ms\n",
            "784:\tlearn: 0.0536524\ttotal: 7m 30s\tremaining: 0us\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.214383 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5294\n",
            "[LightGBM] [Info] Number of data points in the train set: 480000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141291\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.054170 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5292\n",
            "[LightGBM] [Info] Number of data points in the train set: 480000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.141428\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.055454 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5297\n",
            "[LightGBM] [Info] Number of data points in the train set: 480000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.140125\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.199049 seconds.\n",
            "You can set `force_col_wise=true` to remove the overhead.\n",
            "[LightGBM] [Info] Total Bins 5296\n",
            "[LightGBM] [Info] Number of data points in the train set: 480000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.140559\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.054911 seconds.\n",
            "You can set `force_row_wise=true` to remove the overhead.\n",
            "And if memory is not enough, you can set `force_col_wise=true`.\n",
            "[LightGBM] [Info] Total Bins 5299\n",
            "[LightGBM] [Info] Number of data points in the train set: 480000, number of used features: 43\n",
            "[LightGBM] [Info] Start training from score 4.142413\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n",
            "CV RMSLE Scores: [0.01763549 0.01703841 0.01727753 0.01714882 0.01726436]\n",
            "Mean CV RMSLE: 0.017272922037856187\n",
            "R² Score: 0.996204\n",
            "RMSE: 0.059302\n",
            "RMSLE: 0.017157\n",
            "MSE: 0.003517\n"
          ]
        }
      ],
      "source": [
        "%pip install optuna\n",
        "! pip install catboost\n",
        "! pip install lightgbm\n",
        "! pip install xgboost\n",
        "\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from xgboost import XGBRegressor\n",
        "from lightgbm import LGBMRegressor\n",
        "from catboost import CatBoostRegressor\n",
        "from sklearn.model_selection import train_test_split, RandomizedSearchCV, KFold\n",
        "from sklearn.metrics import mean_squared_error, mean_squared_log_error, r2_score\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import optuna\n",
        "from sklearn.metrics import make_scorer\n",
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "# Features and target\n",
        "features = df[[\n",
        " 'BMI',\n",
        " 'Effort',\n",
        " 'Age*BMI',\n",
        " 'body*weight',\n",
        " 'Age_Duration',\n",
        " 'hr_percent',\n",
        " 'effort/weight',\n",
        " 'BMR',\n",
        " 'LBM',\n",
        " 'Temp_Slope',\n",
        " 'HR_Slope',\n",
        " 'dur_over_temp_delta',\n",
        " 'Weight**2/Duration_sqaured',\n",
        " 'log(Heart_Rate)/Body_Temp',\n",
        " '1/(Age*Duration_sqaured)',\n",
        " 'Age**3/Duration_sqaured',\n",
        " 'log(Duration_sqaured)/Duration_sqaured',\n",
        " 'Age**3*Sex',\n",
        " 'Sex/Duration_sqaured',\n",
        " 'VO2_max',\n",
        " 'VO2_per_kg',\n",
        " 'Heart_Rate_X_Male','Heart_Rate_X_Female','Duration_X_Male','Duration_X_Female',\n",
        " 'Body_Temp_X_Male','Body_Temp_X_Female',\n",
        " 'Height_X_Male','Height_X_Female',\t'Weight_X_Male','Weight_X_Female',\n",
        " 'Age_bin_target_mean',\n",
        " 'Age_bin_target_median',\n",
        " 'Age_bin_target_std',\n",
        " 'HR_bin_target_mean',\n",
        " 'HR_bin_target_median',\n",
        " 'HR_bin_target_std',\n",
        " 'Duration_bin_target_mean',\n",
        " 'Duration_bin_target_median',\n",
        " 'Duration_bin_target_std',\n",
        " 'Temp_bin_target_mean',\n",
        " 'Temp_bin_target_median',\n",
        " 'Temp_bin_target_std'\n",
        " ]]\n",
        "target = df['Calories_log']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)\n",
        "kfold = KFold(n_splits=8, shuffle=True, random_state=42)\n",
        "\n",
        "\n",
        "def optimize_lgbm(trial):\n",
        "    params = {\n",
        "        'n_estimators': trial.suggest_int('n_estimators', 100, 1000),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n",
        "        'max_depth': trial.suggest_int('max_depth', 3, 10),\n",
        "        'num_leaves': trial.suggest_int('num_leaves', 16, 128),\n",
        "        'min_child_samples': trial.suggest_int('min_child_samples', 20, 100),\n",
        "        'subsample': trial.suggest_float('subsample', 0.6, 1.0),\n",
        "        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),\n",
        "        'reg_alpha': trial.suggest_float('reg_alpha', 0.0, 1.0),\n",
        "        'reg_lambda': trial.suggest_float('reg_lambda', 0.0, 1.0),\n",
        "    }\n",
        "    model = LGBMRegressor(**params)\n",
        "    model.fit(X_train, y_train)\n",
        "    preds = model.predict(X_test)\n",
        "    return np.sqrt(mean_squared_log_error(y_test, np.maximum(0, preds)))\n",
        "\n",
        "study_lgbm = optuna.create_study(direction='minimize')\n",
        "study_lgbm.optimize(optimize_lgbm, n_trials=25)\n",
        "best_lgbm = LGBMRegressor(**study_lgbm.best_params).fit(X_train, y_train)\n",
        "\n",
        "# ---------- XGBoost ----------\n",
        "def optimize_xgb(trial):\n",
        "    params = {\n",
        "        'n_estimators': trial.suggest_int('n_estimators', 100, 1000),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n",
        "        'max_depth': trial.suggest_int('max_depth', 1, 10),\n",
        "        'subsample': trial.suggest_float('subsample', 0.6, 1.0),\n",
        "        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),\n",
        "        'reg_alpha': trial.suggest_float('reg_alpha', 0.0, 1.0),\n",
        "        'reg_lambda': trial.suggest_float('reg_lambda', 0.0, 1.0)\n",
        "    }\n",
        "    model = XGBRegressor(**params)\n",
        "    model.fit(X_train, y_train)\n",
        "    preds = model.predict(X_test)\n",
        "    return np.sqrt(mean_squared_log_error(y_test, np.maximum(0, preds)))\n",
        "\n",
        "study_xgb = optuna.create_study(direction='minimize')\n",
        "study_xgb.optimize(optimize_xgb, n_trials=25)\n",
        "best_xgb = XGBRegressor(**study_xgb.best_params).fit(X_train, y_train)\n",
        "\n",
        "# ---------- CatBoost ----------\n",
        "def optimize_cat(trial):\n",
        "    params = {\n",
        "        'iterations': trial.suggest_int('iterations', 500, 1000),\n",
        "        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),\n",
        "        'depth': trial.suggest_int('depth', 4, 10),\n",
        "        'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1, 10),\n",
        "        'bagging_temperature': trial.suggest_float('bagging_temperature', 0.1, 5.0),\n",
        "        'random_strength': trial.suggest_float('random_strength', 1, 10),\n",
        "        'od_type': 'Iter',\n",
        "        'od_wait': 20,\n",
        "        'devices': '0',\n",
        "        'verbose': 0\n",
        "    }\n",
        "    model = CatBoostRegressor(**params)\n",
        "    model.fit(X_train, y_train)\n",
        "    preds = model.predict(X_test)\n",
        "    return np.sqrt(mean_squared_log_error(y_test, np.maximum(0, preds)))\n",
        "\n",
        "study_cat = optuna.create_study(direction='minimize')\n",
        "study_cat.optimize(optimize_cat, n_trials=25)\n",
        "best_cat = CatBoostRegressor(**study_cat.best_params).fit(X_train, y_train)\n",
        "\n",
        "# ---------- Final Predictions and Evaluation ----------\n",
        "pred_lgbm = best_lgbm.predict(X_test)\n",
        "pred_xgb = best_xgb.predict(X_test)\n",
        "pred_cat = best_cat.predict(X_test)\n",
        "\n",
        "scorer = make_scorer(lambda y_true, y_pred: np.sqrt(mean_squared_log_error(y_true, np.maximum(0, y_pred))))\n",
        "cv_scores = cross_val_score(best_lgbm, X_train, y_train, scoring=scorer, cv=5)\n",
        "\n",
        "\n",
        "\n",
        "# Simple average ensemble\n",
        "final_pred = (pred_lgbm + pred_xgb + pred_cat) / 3\n",
        "\n",
        "# Evaluation metrics\n",
        "mse = mean_squared_error(y_test, final_pred)\n",
        "rmse = np.sqrt(mse)\n",
        "r2 = r2_score(y_test, final_pred)\n",
        "rmsle = np.sqrt(mean_squared_log_error(y_test, np.maximum(0, final_pred)))\n",
        "\n",
        "# Print results\n",
        "print(\"CV RMSLE Scores:\", cv_scores)\n",
        "print(\"Mean CV RMSLE:\", np.mean(cv_scores))\n",
        "print(f\"R² Score: {r2:.6f}\")\n",
        "print(f\"RMSE: {rmse:.6f}\")\n",
        "print(f\"RMSLE: {rmsle:.6f}\")\n",
        "print(f\"MSE: {mse:.6f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[feature.cols].var().sort_values(ascending=False)"
      ],
      "metadata": {
        "id": "TbohU6iEOuuX",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "outputId": "63bd51c4-00d1-409d-b105-2faab0429077"
      },
      "id": "TbohU6iEOuuX",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'feature' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-72-014f840a93ad>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mascending\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'feature' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from statsmodels.tools.tools import add_constant\n",
        "\n",
        "X_vif_check = add_constant(df[features.columns])  # or X_train if using only training data\n",
        "\n",
        "vif_df = pd.DataFrame()\n",
        "vif_df[\"Feature\"] = X_vif_check.columns\n",
        "vif_df[\"VIF\"] = [variance_inflation_factor(X_vif_check.values, i) for i in range(X_vif_check.shape[1])]\n",
        "print(vif_df.sort_values(\"VIF\", ascending=False))"
      ],
      "metadata": {
        "id": "BDoZlBrdOqzL"
      },
      "id": "BDoZlBrdOqzL",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: generate a shap plot based on my model\n",
        "\n",
        "!pip install shap\n",
        "import shap\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming 'best_cat' is your trained CatBoost model\n",
        "# You can replace it with 'best_lgbm' or 'best_xgb' as needed\n",
        "\n",
        "# Create a SHAP explainer\n",
        "explainer = shap.TreeExplainer(best_cat)\n",
        "\n",
        "# Calculate SHAP values for the test set\n",
        "shap_values = explainer.shap_values(X_test)\n",
        "\n",
        "# Plot the summary plot\n",
        "shap.summary_plot(shap_values, X_test)\n",
        "\n",
        "# You can also plot a force plot for a single instance\n",
        "# shap.force_plot(explainer.expected_value, shap_values[0,:], X_test.iloc[0,:])\n",
        "\n",
        "# Or plot a dependence plot for a specific feature\n",
        "# shap.dependence_plot(\"Feature_Name\", shap_values, X_test)"
      ],
      "metadata": {
        "id": "cglBKUTSkP0N"
      },
      "id": "cglBKUTSkP0N",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7096f276",
      "metadata": {
        "id": "7096f276"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import KFold\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.metrics import mean_squared_log_error\n",
        "from sklearn.ensemble import StackingRegressor\n",
        "from lightgbm import LGBMRegressor # Import LGBMRegressor explicitly\n",
        "from xgboost import XGBRegressor # Import XGBRegressor explicitly\n",
        "from catboost import CatBoostRegressor # Import CatBoostRegressor explicitly\n",
        "from sklearn.metrics import make_scorer # Ensure make_scorer is imported if used later\n",
        "\n",
        "# Get the best parameters from the Optuna studies\n",
        "best_lgbm_params = study_lgbm.best_params\n",
        "best_xgb_params = study_xgb.best_params\n",
        "best_cat_params = study_cat.best_params\n",
        "\n",
        "# Define base models using the stored best parameters\n",
        "base_models = {\n",
        "    'lgb': LGBMRegressor(**best_lgbm_params),\n",
        "    'xgb': XGBRegressor(**best_xgb_params),\n",
        "    'cat': CatBoostRegressor(**best_cat_params, verbose=0)\n",
        "}\n",
        "\n",
        "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
        "\n",
        "# Create empty OOF prediction DataFrames\n",
        "# CORRECTED: Initialize oof_train with the shape of X_train\n",
        "oof_train = pd.DataFrame(np.zeros((X_train.shape[0], len(base_models))), columns=base_models.keys())\n",
        "# Note: X_test is the test set from the initial split, so we use its shape here\n",
        "oof_test = pd.DataFrame(np.zeros((X_test.shape[0], len(base_models))), columns=base_models.keys())\n",
        "\n",
        "for i, (name, model) in enumerate(base_models.items()):\n",
        "    test_preds = []\n",
        "\n",
        "    # Using the original X_train and y_train from the initial split\n",
        "    for fold, (train_idx, val_idx) in enumerate(kf.split(X_train, y_train)):\n",
        "        X_tr, y_tr = X_train.iloc[train_idx], y_train.iloc[train_idx]\n",
        "        X_val, y_val = X_train.iloc[val_idx], y_train.iloc[val_idx]\n",
        "\n",
        "        # For CatBoost with GPU, ensure verbose=0 in the loop to avoid excessive output\n",
        "        if name == 'cat':\n",
        "             model.fit(X_tr, y_tr, verbose=0)\n",
        "        else:\n",
        "             model.fit(X_tr, y_tr)\n",
        "\n",
        "        # Store OOF predictions for the validation set\n",
        "        # The indices (val_idx) correctly map predictions back to the original X_train indices\n",
        "        oof_train.iloc[val_idx, i] = model.predict(X_val)\n",
        "\n",
        "        # Predict on the independent test set with the model trained on the current fold\n",
        "        # These predictions will be averaged later\n",
        "        test_preds.append(model.predict(X_test))\n",
        "\n",
        "\n",
        "    # Average predictions on the independent test set from each fold\n",
        "    oof_test.iloc[:, i] = np.mean(test_preds, axis=0)\n",
        "\n",
        "# Ensure non-negative predictions for RMSLE (important for log-transformed target)\n",
        "oof_train = np.maximum(0, oof_train)\n",
        "oof_test = np.maximum(0, oof_test)\n",
        "\n",
        "# Train meta-model on OOF predictions generated from the training data folds\n",
        "# The meta-model predicts y_train using the base model OOF predictions\n",
        "meta_model = Ridge()\n",
        "# meta_model.fit() should now work as oof_train and y_train have the same number of samples\n",
        "meta_model.fit(oof_train, y_train)\n",
        "\n",
        "# Final prediction on the independent test set using the meta-model\n",
        "final_preds_stacked = meta_model.predict(oof_test)\n",
        "final_preds_stacked = np.maximum(0, final_preds_stacked) # Ensure non-negative\n",
        "\n",
        "# Evaluate RMSLE on the independent test set (using the stacked predictions)\n",
        "stacked_rmsle = np.sqrt(mean_squared_log_error(y_test, final_preds_stacked))\n",
        "print(\"Stacked Model Test RMSLE:\", stacked_rmsle)\n",
        "\n",
        "# Evaluate RMSLE on OOF (optional, provides an estimate of performance on training data)\n",
        "# This uses the meta-model's predictions on the OOF data\n",
        "oof_rmsle = np.sqrt(mean_squared_log_error(y_train, meta_model.predict(oof_train)))\n",
        "print(\"OOF RMSLE (Meta-model):\", oof_rmsle)\n",
        "\n",
        "# Ensure the scorer is defined if you plan to use it later\n",
        "scorer = make_scorer(lambda y_true, y_pred: np.sqrt(mean_squared_log_error(y_true, np.maximum(0, y_pred))))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8h_7QzKlRd8i"
      },
      "id": "8h_7QzKlRd8i",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "08c8c1e4",
      "metadata": {
        "id": "08c8c1e4"
      },
      "outputs": [],
      "source": [
        "import shap\n",
        "explainer = shap.Explainer(best_lgbm)\n",
        "shap_values = explainer(X_test[:10000])\n",
        "shap.summary_plot(shap_values, X_test[:10000], plot_type=\"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5f75f560",
      "metadata": {
        "id": "5f75f560"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_pred = best_lgbm.predict(X_test)\n",
        "residuals = y_test - y_pred\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(residuals, bins=50, kde=True)\n",
        "plt.title(\"Distribution of Prediction Errors (Residuals)\")\n",
        "plt.xlabel(\"Actual - Predicted\")\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "79cc6d29",
      "metadata": {
        "id": "79cc6d29"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Get predictions from your final model\n",
        "y_pred = best_lgbm.predict(X_test)\n",
        "\n",
        "# Plot Actual vs Predicted\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=y_test, y=y_pred, alpha=0.4)\n",
        "plt.xlabel(\"Actual Calories\")\n",
        "plt.ylabel(\"Predicted Calories\")\n",
        "plt.title(\"Actual vs Predicted Calories Burned\")\n",
        "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--', color='red')  # reference line\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Calories'].describe()"
      ],
      "metadata": {
        "id": "BeWY1yb7TgKK"
      },
      "id": "BeWY1yb7TgKK",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f34a49c9",
      "metadata": {
        "id": "f34a49c9"
      },
      "outputs": [],
      "source": [
        "df_test = pd.read_csv(r\"test.csv\")\n",
        "df_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "451e6c22",
      "metadata": {
        "id": "451e6c22"
      },
      "outputs": [],
      "source": [
        "# Copy test set to avoid modifying origin\n",
        "\n",
        "# 1. Encode 'Sex'\n",
        "df_test['Sex'] = df_test['Sex'].map({'male': 0, 'female': 1})\n",
        "\n",
        "# 2. Height in meters\n",
        "df_test['Height_m'] = df_test['Height'] / 100\n",
        "\n",
        "# 3. BMI\n",
        "df_test['BMI'] = df_test['Weight'] / (df_test['Height_m'] ** 2)\n",
        "\n",
        "# 4. BMI*Body_Temp\n",
        "df_test['BMI*Body_Temp'] = df_test['BMI'] * df_test['Body_Temp']\n",
        "\n",
        "# 5. Effort\n",
        "df_test['Effort'] = df_test['Heart_Rate'] * df_test['Duration']\n",
        "\n",
        "# 6. Age*BMI\n",
        "df_test['Age*BMI'] = df_test['Age'] * df_test['BMI']\n",
        "\n",
        "# 7. body*weight\n",
        "df_test['body*weight'] = df_test['Body_Temp'] * df_test['Weight']\n",
        "\n",
        "# 8. Weight*Dration\n",
        "df_test['Weight*Dration'] = df_test['Weight'] * df_test['Duration']\n",
        "\n",
        "# 9. Age_Duration\n",
        "df_test['Age_Duration'] = df_test['Age'] * df_test['Duration']\n",
        "\n",
        "# 10. Age_Adjusted_Effort\n",
        "df_test['Age_Adjusted_Effort'] = df_test['Effort'] / df_test['Age']\n",
        "\n",
        "# 11. sex*heart\n",
        "df_test['sex*heart'] = df_test['Sex'] * df_test['Heart_Rate']\n",
        "\n",
        "# 12. max_hr and hr_percent\n",
        "max_hr_test = 220 - df_test['Age']\n",
        "df_test['hr_percent'] = (df_test['Heart_Rate'] / max_hr_test) * 100\n",
        "\n",
        "# 13. effort/weight\n",
        "df_test['effort/weight'] = df_test['Effort'] / df_test['Weight']\n",
        "\n",
        "# 14. Heart_Rate/body_Temp\n",
        "df_test['Heart_Rate/body_Temp'] = df_test['Heart_Rate'] / df_test['Body_Temp']\n",
        "\n",
        "# 15. BMR\n",
        "df_test['BMR'] = df_test.apply(lambda row:\n",
        "    10 * row['Weight'] + 6.25 * row['Height'] - 5 * row['Age'] + (5 if row['Sex'] == 0 else -161),\n",
        "    axis=1\n",
        ")\n",
        "\n",
        "# 16. BMR × Duration\n",
        "df_test['BMR × Duration'] = df_test['BMR'] * df_test['Duration']\n",
        "\n",
        "# 17. LBM\n",
        "df_test['LBM'] = df_test.apply(lambda row:\n",
        "    0.407 * row['Weight'] + 0.267 * row['Height'] - 19.2\n",
        "    if row['Sex'] == 0\n",
        "    else 0.252 * row['Weight'] + 0.473 * row['Height'] - 48.3,\n",
        "    axis=1\n",
        ")\n",
        "\n",
        "# 18. BMR_katch\n",
        "df_test['BMR_katch'] = 370 + 21.6 * df_test['LBM']\n",
        "\n",
        "# 19. HR_per_BMR\n",
        "df_test['HR_per_BMR'] = df_test['Heart_Rate'] / df_test['BMR_katch']\n",
        "\n",
        "# 20. Temp_Slope\n",
        "df_test['Temp_Slope'] = (df_test['Body_Temp'] - 37) / (df_test['Duration'])\n",
        "\n",
        "# 21. HR_Slope\n",
        "df_test['HR_Slope'] = df_test['Heart_Rate'] / df_test['Duration']\n",
        "\n",
        "# 22. dur_over_temp_delta\n",
        "df_test['dur_over_temp_delta'] = df_test['Duration'] / ((df_test['Body_Temp'] - 37) + 1e-5)\n",
        "\n",
        "# 23. Micro_Effort\n",
        "df_test['Micro_Effort'] = (df_test['Heart_Rate'] * df_test['Duration']) / (df_test['Weight'])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: can you add all the feature columns in df_test?\n",
        "\n",
        "df_test['Duration_sqaured'] = df_test['Duration'] ** 2\n",
        "df_test['Weight**2/Duration_sqaured'] = (df_test['Weight'] ** 2) / df_test['Duration_sqaured']\n",
        "df_test['log(Heart_Rate)/Body_Temp'] = np.log(df_test['Heart_Rate']) / df_test['Body_Temp']\n",
        "df_test['1/(Age*Duration_sqaured)'] = 1 / (df_test['Age'] * df_test['Duration_sqaured'])\n",
        "df_test['Age**3/Duration_sqaured'] = (df_test['Age'] ** 3) / df_test['Duration_sqaured']\n",
        "df_test['log(Duration_sqaured)/Duration_sqaured'] = np.log(df_test['Duration_sqaured']) / df_test['Duration_sqaured']\n",
        "df_test['Age**3*Sex'] = (df_test['Age'] ** 3) * df_test['Sex']\n",
        "df_test['Sex/Duration_sqaured'] = df_test['Sex'] / df_test['Duration_sqaured']\n",
        "df_test['Gender'] = 1 - df_test['Sex']  # converts 0→1 (male), 1→0 (female)\n",
        "df_test['Weight_lb'] = df_test['Weight'] * 2.20462  # kg → lb\n",
        "\n",
        "df_test['VO2_max'] = (\n",
        "    132.853\n",
        "    - 0.0769 * df_test['Weight_lb']\n",
        "    - 0.3877 * df_test['Age']\n",
        "    + 6.315 * df_test['Gender']\n",
        "    - 3.2649 * (df_test['Duration'] / 60)  # convert seconds to minutes\n",
        "    - 0.1565 * df_test['Heart_Rate']\n",
        ")"
      ],
      "metadata": {
        "id": "a9GEo1FVdqej"
      },
      "id": "a9GEo1FVdqej",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6f08f74",
      "metadata": {
        "id": "e6f08f74"
      },
      "outputs": [],
      "source": [
        "df_test.columns.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Base model predictions on test data\n",
        "oof_test = pd.DataFrame({\n",
        "      'lgb': best_lgbm.predict(df_test[features.columns]),\n",
        "    'xgb': best_xgb.predict(df_test[features.columns]),\n",
        "    'cat': best_cat.predict(df_test[features.columns]),\n",
        "})\n",
        "\n",
        "# Final stacked prediction\n",
        "final_submit_pred_log = meta_model.predict(oof_test)\n",
        "final_submit_pred = np.expm1(final_submit_pred_log)  # inverse log if target was log-transformed\n",
        "submission = pd.DataFrame({\n",
        "    'id': df_test['id'],\n",
        "    'Calories': final_submit_pred\n",
        "})\n",
        "\n",
        "submission.to_csv('submission.csv', index=False)\n",
        "print(\"✅ submission.csv !\")\n",
        "\n"
      ],
      "metadata": {
        "id": "DquyTvVIiSxb"
      },
      "id": "DquyTvVIiSxb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "98eaf925",
      "metadata": {
        "id": "98eaf925"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9368c01a",
      "metadata": {
        "id": "9368c01a"
      },
      "outputs": [],
      "source": [
        "short = X_test[y_test < 2]  # log scale: very low calories\n",
        "short_preds = best_lgbm.predict(short)\n",
        "\n",
        "plt.scatter(y_test.loc[short.index], short_preds, alpha=0.3)\n",
        "plt.plot([0, 6], [0, 6], 'r--')\n",
        "plt.title(\"Zoomed-in: Low Calorie Predictions\")\n",
        "plt.xlabel(\"Actual\")\n",
        "plt.ylabel(\"Predicted\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3355f4bb",
      "metadata": {
        "id": "3355f4bb"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Get predictions from your final model\n",
        "y_pred = best_lgbm.predict(X_test)\n",
        "\n",
        "# Plot Actual vs Predicted\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=y_test, y=y_pred, alpha=0.4)\n",
        "plt.xlabel(\"Actual Calories\")\n",
        "plt.ylabel(\"Predicted Calories\")\n",
        "plt.title(\"Actual vs Predicted Calories Burned\")\n",
        "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--', color='red')  # reference line\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0e36db18",
      "metadata": {
        "id": "0e36db18"
      },
      "outputs": [],
      "source": [
        "residuals = y_test - y_pred\n",
        "sns.scatterplot(x=y_test, y=residuals)\n",
        "plt.axhline(0, color='red', linestyle='--')\n",
        "plt.title(\"Residuals vs Actual Calories\")\n",
        "plt.xlabel(\"Actual\")\n",
        "plt.ylabel(\"Residual (Actual - Predicted)\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "587734c7",
      "metadata": {
        "id": "587734c7"
      },
      "outputs": [],
      "source": [
        "df['Body_Temp'].describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ae700fbe",
      "metadata": {
        "id": "ae700fbe"
      },
      "outputs": [],
      "source": [
        "sns.histplot(df['Body_Temp'], bins=50, kde=True)\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.13.2"
    },
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "gpuType": "T4",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 5
}